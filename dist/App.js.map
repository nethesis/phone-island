{"version":3,"file":"App.js","sources":["../src/App.tsx"],"sourcesContent":["import React, { type FC, useState, useEffect } from 'react'\nimport { Events, Socket, WebRTC, Island, RestAPI } from './components'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport { Base64 } from 'js-base64'\nimport wakeUpWorker from './workers/wake_up'\nimport { initI18n } from './lib/i18n'\n\nimport 'react-tooltip/dist/react-tooltip.css'\nimport { useEventListener, eventDispatch, setJSONItem, getJSONItem } from './utils'\nimport { detach } from './lib/webrtc/messages'\nimport { checkDarkTheme, setTheme } from './lib/darkTheme'\nimport { changeOperatorStatus } from './services/user'\nimport { getParamUrl } from './services/user'\nimport { isEmpty } from './utils/genericFunctions/isEmpty'\nimport { checkInternetConnection } from './utils/genericFunctions/checkConnection'\nimport { isBackCallActive } from './utils/genericFunctions/isBackCallVisible'\nimport { isFromTrunk } from './lib/user/extensions'\n\ninterface PhoneIslandProps {\n  dataConfig: string\n  showAlways?: boolean\n  uaType: string\n}\n\ninterface DeviceInputOutputTypes {\n  deviceId: string\n}\n\nexport const PhoneIsland: FC<PhoneIslandProps> = ({\n  dataConfig,\n  showAlways = false,\n  uaType,\n}: PhoneIslandProps) => {\n  const CONFIG: string[] = Base64.atob(dataConfig || '').split(':')\n  const HOST_NAME: string = CONFIG[0]\n  const USERNAME: string = CONFIG[1]\n  const AUTH_TOKEN: string = CONFIG[2]\n  const SIP_EXTEN: string = CONFIG[3]\n  const SIP_SECRET: string = CONFIG[4]\n  const SIP_HOST: string = CONFIG[5]\n  const SIP_PORT: string = CONFIG[6]\n\n  // Initialize the state to manage the reload events\n  const [reload, setReload] = useState<boolean>(false)\n  const [reloadedWebRTC, setReloadedWebRTC] = useState<boolean>(false)\n  const [reloadedSocket, setReloadedSocket] = useState<boolean>(false)\n\n  useEffect(() => {\n    const worker = new Worker(wakeUpWorker, { type: 'module' })\n    worker.onmessage = (event: MessageEvent<string>) => {\n      // Handle wakeup message\n      if (event.data === 'wakeup') {\n        setReload(true)\n      }\n    }\n\n    return () => {\n      worker.terminate()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (reloadedSocket && reloadedWebRTC) {\n      setReload(false)\n      setReloadedWebRTC(false)\n      setReloadedSocket(false)\n    }\n  }, [reloadedSocket, reloadedWebRTC])\n\n  useEventListener('phone-island-expand', () => {\n    store.dispatch.island.toggleIsOpen(true)\n    eventDispatch('phone-island-expanded', {})\n  })\n  useEventListener('phone-island-compress', () => {\n    store.dispatch.island.toggleIsOpen(false)\n    eventDispatch('phone-island-compressed', {})\n  })\n\n  useEventListener('phone-island-call-keypad-close', () => {\n    store.dispatch.island.setIslandView('call')\n    eventDispatch('phone-island-call-keypad-closed', {})\n  })\n  useEventListener('phone-island-call-transfer-close', () => {\n    store.dispatch.island.setIslandView('call')\n    eventDispatch('phone-island-call-transfer-closed', {})\n  })\n  useEventListener('phone-island-recording-close', () => {\n    store.dispatch.island.setIslandView(null)\n    eventDispatch('phone-island-recording-closed', {})\n  })\n  useEventListener('phone-island-audio-player-close', () => {\n    store.dispatch.island.setIslandView(null)\n    eventDispatch('phone-island-audio-player-closed', {})\n  })\n\n  useEventListener('phone-island-detach', (data) => {\n    detach()\n    eventDispatch('phone-island-detached', {})\n  })\n\n  useEventListener('phone-island-audio-input-change', (data: DeviceInputOutputTypes) => {\n    setJSONItem('phone-island-audio-input-device', { deviceId: data.deviceId })\n    eventDispatch('phone-island-audio-input-changed', {})\n  })\n\n  useEventListener('phone-island-video-input-change', (data: DeviceInputOutputTypes) => {\n    setJSONItem('phone-island-video-input-device', { deviceId: data.deviceId })\n    eventDispatch('phone-island-video-input-changed', {})\n  })\n\n  const [firstRender, setFirstRender] = useState(true)\n  const [firstAudioOutputInit, setFirstAudioOutputInit] = useState(true)\n\n  // Initialize application on first render\n  useEffect(() => {\n    const initParamUrl = async () => {\n      try {\n        const paramUrlResponse: any = await getParamUrl()\n        const url = paramUrlResponse?.url || ''\n        const isValid = url && url.trim() !== ''\n\n        // Save data inside the store\n        store.dispatch.paramUrl.setParamUrl({\n          url: url,\n          onlyQueues: paramUrlResponse?.only_queues || false,\n          hasValidUrl: isValid,\n        })\n      } catch (error) {\n        console.error('Error fetching URL parameter:', error)\n        store.dispatch.paramUrl.setParamUrl({\n          url: '',\n          onlyQueues: false,\n          hasValidUrl: false,\n        })\n      }\n    }\n\n    if (firstRender) {\n      // Initialize i18n\n      initI18n()\n      // Initialize param URL\n      initParamUrl()\n      setFirstRender(false)\n    }\n  }, [firstRender])\n\n  useEventListener('phone-island-audio-output-change', (data: DeviceInputOutputTypes) => {\n    if (!firstAudioOutputInit) {\n      store.dispatch.island.setIslandView(null)\n      store.dispatch.island.toggleAvoidToShow(true)\n      eventDispatch('phone-island-call-start', { number: '*43' })\n    }\n\n    setTimeout(() => {\n      const remoteAudioElement: any = store.getState().player.remoteAudio\n      // set audio output\n      remoteAudioElement?.current\n        .setSinkId(data.deviceId)\n        .then(function () {\n          console.info('Default audio output device change with success!')\n          // set device to localstorage\n          setJSONItem('phone-island-audio-output-device', { deviceId: data.deviceId })\n\n          // dispatch event\n          eventDispatch('phone-island-audio-output-changed', {})\n          eventDispatch('phone-island-call-end', {})\n          store.dispatch.island.toggleAvoidToShow(false)\n        })\n        .catch(function (err) {\n          console.error('Default audio output device change error:', err)\n          eventDispatch('phone-island-call-end', {})\n          store.dispatch.island.toggleAvoidToShow(false)\n        })\n    }, 1000)\n  })\n\n  // Listen for the operator status change\n  useEventListener('phone-island-presence-change', (data: any) => {\n    changeOperatorStatus(data)\n    eventDispatch('phone-island-presence-changed', {})\n  })\n\n  useEventListener('phone-island-view-changed', (data) => {\n    const viewType = data?.viewType\n    store.dispatch.island.setIslandView(viewType)\n  })\n\n  const remoteAudioElement: any = store.getState().player.remoteAudio\n\n  //get output device from localstorage\n  useEffect(() => {\n    if (firstAudioOutputInit && remoteAudioElement) {\n      const defaultAudioOutputDevice: any = getJSONItem(\n        `phone-island-audio-output-device`,\n      )?.deviceId\n      eventDispatch('phone-island-audio-output-change', {\n        deviceId: defaultAudioOutputDevice,\n      })\n      setFirstAudioOutputInit(false)\n    }\n  }, [firstAudioOutputInit, remoteAudioElement])\n\n  useEffect(() => {\n    checkDarkTheme()\n  }, [])\n\n  useEventListener('phone-island-theme-change', (theme: any) => {\n    setTheme(theme?.selectedTheme)\n  })\n\n  useEventListener('phone-island-default-device-change', (data) => {\n    store.dispatch.currentUser.updateCurrentDefaultDevice(data?.deviceInformationObject)\n    eventDispatch('phone-island-default-device-changed', {})\n  })\n\n  useEventListener('phone-island-alert', (alertType: any) => {\n    store.dispatch.alerts.setAlert(alertType.toString())\n  })\n\n  // Manually check if internet connection is enabled or not\n  useEventListener('phone-island-check-connection', () => {\n    checkInternetConnection().then((internetIsActive) => {\n      if (internetIsActive) {\n        eventDispatch('phone-island-internet-connected', {})\n      } else {\n        eventDispatch('phone-island-internet-disconnected', {})\n      }\n    })\n  })\n\n  // Check internet connection every 5 seconds\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      checkInternetConnection().then((internetIsActive) => {\n        if (internetIsActive) {\n          eventDispatch('phone-island-internet-connected', {})\n        } else {\n          eventDispatch('phone-island-internet-disconnected', {})\n        }\n      })\n    }, 5000)\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  useEventListener('phone-island-main-presence', (data: any) => {\n    const currentUsernameInformation: any = store.getState().currentUser?.username\n    const currentUserObject: any = store.getState().currentUser\n    let mainPresenceValueBeforeUpdate = currentUserObject?.mainPresence\n    if (\n      currentUsernameInformation !== undefined &&\n      currentUsernameInformation !== '' &&\n      !isEmpty(data[currentUsernameInformation]) &&\n      data[currentUsernameInformation]?.mainPresence !== undefined\n    ) {\n      let newMainPresenceValue = data[currentUsernameInformation]?.mainPresence\n      store.dispatch.currentUser.updateMainPresence(data[currentUsernameInformation]?.mainPresence)\n      let mainPresenceValueAfterUpdate = newMainPresenceValue\n      if (mainPresenceValueAfterUpdate === 'online' && mainPresenceValueBeforeUpdate !== 'online') {\n        eventDispatch('phone-island-call-ended', {})\n      }\n    }\n  })\n\n  useEventListener('phone-island-call-status', () => {\n    const callInformation = store.getState().currentCall\n    console.log('Call status debug informations: ', callInformation)\n  })\n\n  const openParameterizedUrl = (callerNum: any, callerName: any, called: any, uniqueId: any) => {\n    const paramUrlInfo = store.getState().paramUrl\n\n    if (!paramUrlInfo?.hasValidUrl) {\n      return\n    }\n\n    const paramUrl = paramUrlInfo.url || ''\n\n    if (!paramUrl) {\n      return\n    }\n\n    const { urlOpened } = store.getState().island\n    const openParamUrlType = paramUrlInfo.openParamUrlType\n\n    if (urlOpened && openParamUrlType !== 'button') {\n      return\n    }\n\n    let processedUrl = paramUrl\n\n    if (processedUrl.includes('$CALLER_NUMBER') && callerNum) {\n      processedUrl = processedUrl.replace(/\\$CALLER_NUMBER/g, encodeURIComponent(callerNum))\n    }\n    if (processedUrl.includes('$CALLER_NAME') && callerName) {\n      processedUrl = processedUrl.replace(/\\$CALLER_NAME/g, encodeURIComponent(callerName))\n    }\n    if (processedUrl.includes('$UNIQUEID') && uniqueId) {\n      processedUrl = processedUrl.replace(/\\$UNIQUEID/g, encodeURIComponent(uniqueId))\n    }\n    if (processedUrl.includes('$CALLED') && called) {\n      processedUrl = processedUrl.replace(/\\$CALLED/g, encodeURIComponent(called))\n    }\n    if (processedUrl.includes('{phone}') && callerNum) {\n      processedUrl = processedUrl.replace(/\\{phone\\}/g, encodeURIComponent(callerNum))\n    }\n\n    const formattedUrl = processedUrl.startsWith('http') ? processedUrl : `https://${processedUrl}`\n\n    if (uaType !== 'mobile') {\n      const newWindow = window.open('about:blank', '_blank')\n      if (newWindow) {\n        newWindow.location.href = formattedUrl\n        store.dispatch.island.setUrlOpened(true)\n      }\n    } else {\n      eventDispatch('phone-island-url-parameter-opened-external', { formattedUrl })\n    }\n  }\n\n  useEventListener('phone-island-already-opened-external-page', () => {\n    store.dispatch.island.setUrlOpened(true)\n  })\n\n  useEventListener('phone-island-url-parameter-opened', (data) => {\n    const paramUrlInfo = store.getState().paramUrl\n\n    if (!paramUrlInfo.hasValidUrl) {\n      return\n    }\n\n    const { urlOpened } = store.getState().island\n    if (urlOpened) {\n      return\n    }\n\n    const onlyQueues = paramUrlInfo.onlyQueues || false\n    const throughTrunk = isFromTrunk(data?.counterpartNum)\n    store.dispatch.paramUrl.setThroughTrunk(throughTrunk)\n\n    if (data?.direction === 'in') {\n      if (onlyQueues === true && data?.throughQueue === true) {\n        openParameterizedUrl(\n          data?.counterpartNum,\n          data?.counterpartName,\n          data?.owner,\n          data?.uniqueId,\n        )\n      } else if (onlyQueues === false && (throughTrunk === true || data?.throughQueue === true)) {\n        openParameterizedUrl(\n          data?.counterpartNum,\n          data?.counterpartName,\n          data?.owner,\n          data?.uniqueId,\n        )\n      }\n    }\n  })\n\n  useEventListener('phone-island-user-status', () => {\n    const userInformation = store.getState().currentUser\n    console.log('User status debug informations: ', userInformation)\n  })\n\n  useEventListener('phone-island-all-users-status', () => {\n    const allUsersInformation = store.getState().users\n    console.log('Users status debug informations: ', allUsersInformation)\n  })\n\n  useEventListener('phone-island-status', () => {\n    const phoneIslandInformation = store.getState().island\n    console.log('Phone island status debug informations: ', phoneIslandInformation)\n  })\n\n  useEventListener('phone-island-webrtc-status', () => {\n    const webrtcInformation = store.getState().webrtc\n    console.log('Webrtc status debug informations: ', webrtcInformation)\n  })\n\n  useEventListener('phone-island-player-status', () => {\n    const playerInformation = store.getState().player\n    console.log('Player status debug informations: ', playerInformation)\n  })\n\n  useEventListener('phone-island-conference-status', () => {\n    const conferenceInformation = store.getState().conference\n    console.log('Webrtc status debug informations: ', conferenceInformation)\n  })\n\n  useEventListener('phone-island-streaming-status', () => {\n    const streamingInformation = store.getState().streaming\n    console.log('Streaming status debug informations: ', streamingInformation)\n  })\n\n  useEventListener('phone-island-paramurl-status', () => {\n    const paramurl = store.getState().paramUrl\n    console.log('Paramurl status debug informations: ', paramurl)\n  })\n\n  useEventListener('phone-island-player-force-stop', () => {\n    store.dispatch.player.reset()\n    console.log('Audio player is interrupted')\n  })\n\n  useEventListener('phone-island-sideview-open', () => {\n    store.dispatch.island.toggleSideViewVisible(true)\n    store.dispatch.island.setUrlOpened(false)\n    eventDispatch('phone-island-sideview-opened', {})\n  })\n\n  useEventListener('phone-island-sideview-close', () => {\n    store.dispatch.island.toggleSideViewVisible(false)\n    eventDispatch('phone-island-sideview-closed', {})\n  })\n\n  useEventListener('phone-island-size-change', (args: any) => {\n    const { sideViewIsVisible } = store.getState().island\n\n    // Get current dimensions from args\n    const { sizeInformation } = args\n\n    // // Calculate extra row dimension ( side view and back call )\n    const updatedSizeInformation = {\n      ...sizeInformation,\n      right: sideViewIsVisible ? '42px' : '0px',\n      top: isBackCallActive() ? '40px' : '0px',\n    }\n    eventDispatch('phone-island-size-changed', { sizes: updatedSizeInformation })\n  })\n\n  // Listen for the call end event and set the island size to 0\n  useEventListener('phone-island-call-ended', () => {\n    const { mainPresence } = store.getState().currentUser\n    if (mainPresence === 'online') {\n      const sizeInformation: any = {\n        width: '0px',\n        height: '0px',\n      }\n      eventDispatch('phone-island-size-change', { sizeInformation })\n      eventDispatch('phone-island-sideview-close', {})\n      store.dispatch.island.resetIslandStore()\n      store.dispatch.paramUrl.setThroughTrunk(false)\n    }\n  })\n\n  useEventListener('phone-island-conference-list-open', () => {\n    store.dispatch.island.toggleConferenceList(true)\n    eventDispatch('phone-island-conference-list-opened', {})\n  })\n\n  useEventListener('phone-island-alert-removed', (alertRemovedType) => {\n    // Get current alerts status\n    const { activeAlertsCount } = store.getState().alerts.status\n    const { view, previousView } = store.getState().island\n    const { isActive } = store.getState().conference\n    const alertsData = store.getState().alerts.data\n    const currentCall = store.getState().currentCall\n    const { incoming, outgoing, accepted } = currentCall\n\n    // Check if alert type was provided\n    const alertType = alertRemovedType?.type\n\n    // Check if user is in a call\n    const isInCall =\n      currentCall.incoming ||\n      currentCall.outgoing ||\n      currentCall.accepted ||\n      currentCall.conversationId !== ''\n\n    // Determine if the island should remain visible\n    const shouldKeepVisible =\n      incoming ||\n      outgoing ||\n      accepted ||\n      activeAlertsCount > 0 ||\n      view === 'player' ||\n      view === 'recorder' ||\n      view === 'physicalPhoneRecorder' ||\n      (view === 'waitingConference' && isActive) ||\n      (view === 'transfer' && isActive) ||\n      (view === 'settings' && isActive) ||\n      (view === 'settings' && (previousView === 'recorder' || previousView === 'player'))\n\n    // Reset the island store only if:\n    // 1. The island should not remain visible\n    // 2. No more active alerts\n    // 3. The specific alert is not active anymore\n    // 4. User is not currently in a call\n    if (\n      !shouldKeepVisible &&\n      activeAlertsCount === 0 &&\n      (!alertType || (alertsData[alertType] && !alertsData[alertType].active)) &&\n      !isInCall\n    ) {\n      const sizeInformation: any = {\n        width: '0px',\n        height: '0px',\n      }\n      eventDispatch('phone-island-size-change', { sizeInformation })\n      eventDispatch('phone-island-sideview-close', {})\n      store.dispatch.island.resetIslandStore()\n    }\n  })\n\n  useEventListener('phone-island-conference-list-close', () => {\n    store.dispatch.island.toggleConferenceList(false)\n    eventDispatch('phone-island-conference-list-closed', {})\n  })\n\n  // Listen for conversations updates to handle 'answered' preference for parameterized URL\n  useEventListener('phone-island-conversations', (data: any) => {\n    // Get the current username (first key in the data object)\n    const username = Object.keys(data)[0]\n    const currentUsernameInformation: any = store.getState().currentUser?.username\n\n    if (username === currentUsernameInformation) {\n      const conversations = data[username].conversations\n      const paramUrlInfo = store.getState().paramUrl\n      const { urlOpened } = store.getState().island\n\n      // Only proceed if URL is valid and not already opened\n      if (!paramUrlInfo.hasValidUrl || urlOpened) {\n        return\n      }\n\n      // Check if the openParamUrlType is set to 'answered'\n      if (paramUrlInfo.openParamUrlType === 'answered') {\n        // Check if there are any conversations\n        if (conversations && Object.keys(conversations).length > 0) {\n          // Get the first conversation (usually there's only one active call)\n          const convId = Object.keys(conversations)[0]\n          const conv = conversations[convId]\n\n          // Check conditions: must be connected and incoming\n          if (conv?.connected && conv?.direction === 'in') {\n            const onlyQueues = paramUrlInfo.onlyQueues || false\n            const calculatedThroughTrunk = isFromTrunk(conv.counterpartNum)\n            // Update throughTrunk in paramUrl store\n            store.dispatch.paramUrl.setThroughTrunk(calculatedThroughTrunk)\n\n            // Check queue conditions based on preferences\n            if (onlyQueues === true && conv?.throughQueue === true) {\n              // Open URL only for queue calls when onlyQueues is true\n              openParameterizedUrl(\n                conv.counterpartNum,\n                conv.counterpartName,\n                conv.owner,\n                conv.uniqueId,\n              )\n            } else if (\n              onlyQueues === false &&\n              (calculatedThroughTrunk === true || conv?.throughQueue === true)\n            ) {\n              // Open URL for both trunk and queue calls when onlyQueues is false\n              openParameterizedUrl(\n                conv.counterpartNum,\n                conv.counterpartName,\n                conv.owner,\n                conv.uniqueId,\n              )\n            }\n          }\n        }\n      }\n    }\n  })\n\n  return (\n    <>\n      <Provider store={store}>\n        <WebRTC\n          hostName={HOST_NAME}\n          sipExten={SIP_EXTEN}\n          sipSecret={SIP_SECRET}\n          sipHost={SIP_HOST}\n          sipPort={SIP_PORT}\n          reload={reload}\n          reloadedCallback={() => setReloadedWebRTC(true)}\n          uaType={uaType}\n        >\n          <RestAPI hostName={HOST_NAME} username={USERNAME} authToken={AUTH_TOKEN}>\n            <Socket\n              hostName={HOST_NAME}\n              username={USERNAME}\n              authToken={AUTH_TOKEN}\n              reload={reload}\n              reloadedCallback={() => setReloadedSocket(true)}\n              uaType={uaType}\n            >\n              <Events sipHost={SIP_HOST}>\n                <Island showAlways={showAlways} uaType={uaType} />\n              </Events>\n            </Socket>\n          </RestAPI>\n        </WebRTC>\n      </Provider>\n    </>\n  )\n}\n\nPhoneIsland.displayName = 'PhoneIsland'\n"],"names":["PhoneIsland","_a","dataConfig","_b","showAlways","uaType","CONFIG","Base64","atob","split","HOST_NAME","USERNAME","AUTH_TOKEN","SIP_EXTEN","SIP_SECRET","SIP_HOST","SIP_PORT","_c","useState","reload","setReload","_d","reloadedWebRTC","setReloadedWebRTC","_e","reloadedSocket","setReloadedSocket","useEffect","worker","Worker","wakeUpWorker","type","onmessage","event","data","terminate","useEventListener","store","dispatch","island","toggleIsOpen","eventDispatch","setIslandView","detach","setJSONItem","deviceId","_f","firstRender","setFirstRender","_g","firstAudioOutputInit","setFirstAudioOutputInit","initI18n","__awaiter","getParamUrl","paramUrlResponse","sent","url","isValid","trim","paramUrl","setParamUrl","onlyQueues","only_queues","hasValidUrl","console","error","error_1","toggleAvoidToShow","number","setTimeout","remoteAudioElement","getState","player","remoteAudio","current","setSinkId","then","info","catch","err","changeOperatorStatus","viewType","defaultAudioOutputDevice","getJSONItem","checkDarkTheme","theme","setTheme","selectedTheme","currentUser","updateCurrentDefaultDevice","deviceInformationObject","alertType","alerts","setAlert","toString","checkInternetConnection","internetIsActive","intervalId","setInterval","clearInterval","currentUsernameInformation","username","currentUserObject","mainPresenceValueBeforeUpdate","mainPresence","undefined","isEmpty","newMainPresenceValue","updateMainPresence","callInformation","currentCall","log","openParameterizedUrl","callerNum","callerName","called","uniqueId","paramUrlInfo","urlOpened","openParamUrlType","processedUrl","includes","replace","encodeURIComponent","formattedUrl","startsWith","concat","newWindow","window","open","location","href","setUrlOpened","throughTrunk","isFromTrunk","counterpartNum","setThroughTrunk","direction","throughQueue","counterpartName","owner","userInformation","allUsersInformation","users","phoneIslandInformation","webrtcInformation","webrtc","playerInformation","conferenceInformation","conference","streamingInformation","streaming","paramurl","reset","toggleSideViewVisible","args","sideViewIsVisible","sizeInformation","updatedSizeInformation","__assign","right","top","isBackCallActive","sizes","width","height","resetIslandStore","toggleConferenceList","alertRemovedType","activeAlertsCount","status","view","previousView","isActive","alertsData","incoming","outgoing","accepted","isInCall","conversationId","active","Object","keys","conversations","length","conv","connected","calculatedThroughTrunk","React","createElement","Fragment","Provider","WebRTC","hostName","sipExten","sipSecret","sipHost","sipPort","reloadedCallback","RestAPI","authToken","Socket","Events","Island","displayName"],"mappings":"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"}