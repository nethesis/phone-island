{"version":3,"file":"user.js","sources":["../../src/services/user.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { store } from '../store'\nimport type { UserInfoTypes, AvatarsTypes, UsersEndpointsTypes } from '../types'\n\n/**\n * Get current user info\n */\nexport async function getCurrentUserInfo(): Promise<UserInfoTypes | undefined> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/me`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function setDefaultDevice(\n  default_type: string,\n  extensionNumber: string,\n): Promise<any> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n\n    let webrtcId: any = { id: extensionNumber }\n    let physicalId: any = { id: extensionNumber }\n    const response = await fetch(`${baseURL}/user/default_device`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: default_type === 'physical' ? JSON.stringify(physicalId) : JSON.stringify(webrtcId),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Get all avatars\n */\nexport async function getAllAvatars(): Promise<AvatarsTypes | undefined> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n\n    const response = await fetch(`${baseURL}/user/all_avatars`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Get all users endpoints\n */\nexport async function getAllUsersEndpoints(): Promise<UsersEndpointsTypes | undefined> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/endpoints/all`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function changeOperatorStatus(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/presence`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function changeDefaultDevice(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/default_device`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function setMainDevice(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/default_device`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\n/**\n * Get parameter URL information\n */\nexport async function getParamUrl(): Promise<UserInfoTypes | undefined> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/paramurl`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function getVideoSources(): Promise<UserInfoTypes | undefined> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/streaming/sources`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function openVideoSource(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/streaming/open`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function subscribe(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/streaming/subscribe`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function unsubscribe(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/streaming/unsubscribe`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function setIncomingCallsPreference(settingsStatus: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/user/settings`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(settingsStatus),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n\n    const contentType = response.headers.get('content-type')\n    if (contentType && contentType.includes('application/json')) {\n      const text = await response.text()\n      return text ? JSON.parse(text) : {}\n    }\n\n    return { success: true }\n  } catch (error: any) {\n    console.error('Error updating user settings:', error)\n    throw error\n  }\n}\n"],"names":["obj","_a","store","getState","fetchDefaults","baseURL","headers","fetch","concat","method","__assign","body","JSON","stringify","response","_b","sent","ok","Error","statusText","json","error_3","error_4","error_1","error_8","error_9"],"mappings":"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"}