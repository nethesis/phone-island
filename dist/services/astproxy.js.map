{"version":3,"file":"astproxy.js","sources":["../../src/services/astproxy.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { store } from '../store'\nimport { ExtensionsTypes, TransferTypes } from '../types'\nimport { useSelector } from 'react-redux'\n\n/**\n * Get all extensions\n */\nexport async function getAllExtensions(): Promise<ExtensionsTypes> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/extensions`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Start blind transfer\n */\nexport async function blindTransfer(body: TransferTypes) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/blindtransfer`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Start attended transfer\n */\nexport async function attendedTransfer(body: TransferTypes) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/atxfer`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Hangup a conversation\n */\nexport async function hangupConversation(body: { convid: string; endpointId: string }) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/hangup`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Force hangup a conversation\n */\nexport async function forceHangup(body: { convid: string; endpointId: string, endpointType: string }) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/force_hangup`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function parkConversation(body: {\n  applicantId: string // Current user main extension\n  convid: string\n  endpointId: string // Current user main extension\n}) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/park`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function answerPhysical() {\n  // get data\n  const { default_device } = store.getState().currentUser\n\n  let default_device_details = default_device?.id || default_device?.exten\n  // compose body\n  if (default_device_details !== undefined) {\n    let body: any = {\n      endpointId: default_device?.exten || default_device?.id,\n      endpointType: 'extension',\n    }\n\n    try {\n      const { baseURL, headers } = store.getState().fetchDefaults\n      const response = await fetch(`${baseURL}/astproxy/answer`, {\n        method: 'POST',\n        headers: { ...headers },\n        body: JSON.stringify(body),\n      })\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n      return true\n    } catch (error: any) {\n      throw new Error(error)\n    }\n  }\n}\n\nexport async function hangupPhysical() {\n  // get data\n  const { ownerExtension, conversationId } = store.getState().currentCall\n  const currentUserInformation = store.getState().currentUser\n  // compose body\n  let body: any = {\n    convid: conversationId,\n    endpointId: ownerExtension,\n    endpointType: 'extension',\n  }\n  let astproxyUrl = '/astproxy/'\n  let actionUrl = ''\n  if (body?.convid !== '' && body?.convid !== undefined) {\n    actionUrl = 'hangup'\n  } else {\n    actionUrl = 'cancel'\n    // set user default device as endpointId on cancel action\n    body.endpointId = currentUserInformation?.default_device?.id\n  }\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    // if default device is physical check if conversation is empty or not\n    // if conversation is empty then cancel the call else hangup the call\n    const response = await fetch(`${baseURL}` + `${astproxyUrl}` + `${actionUrl}`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function hangupPhysicalRecordingCall() {\n  // get data\n  const { ownerExtension, conversationId } = store.getState().physicalRecorder\n  // compose body\n  let body: any = {\n    convid: conversationId,\n    endpointId: ownerExtension,\n    endpointType: 'extension',\n  }\n\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/hangup`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function mutePhysical(toggleMute: boolean) {\n  // get data\n  const { ownerExtension, conversationId } = store.getState().currentCall\n\n  // compose body\n  let body: any = {\n    convid: conversationId,\n    endpointId: ownerExtension,\n  }\n\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/toggle_mute`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    store.dispatch.currentCall.updateCurrentCall({\n      muted: toggleMute,\n    })\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function pausePhysical(togglePause: boolean) {\n  // get data\n  const { ownerExtension, conversationId } = store.getState().currentCall\n\n  // compose body\n  let body: any = {\n    endpointId: ownerExtension,\n  }\n\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/toggle_hold`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    store.dispatch.currentCall.updateCurrentCall({\n      paused: togglePause,\n    })\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function sendPhysicalDTMF(key: string) {\n  // get data\n  const { ownerExtension, conversationId } = store.getState().currentCall\n\n  // compose body\n  let body: any = {\n    convid: conversationId,\n    endpointId: ownerExtension,\n    tone: key.toString(),\n  }\n\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/dtmf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function callPhysical(to: string) {\n  // get data\n  const { ownerExtension } = store.getState().currentCall\n\n  // compose body\n  let body: any = {\n    endpointId: ownerExtension,\n    endpointTpe: 'extension',\n    number: to,\n  }\n\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/call`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(body),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\nexport async function toggleRecord(recordingType: any, obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/${recordingType}`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function startConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/start_conf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function endConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/end_conf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function joinMyConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/join_myconf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function muteUserConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/mute_userconf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function unmuteUserConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/unmute_userconf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n\nexport async function hangupUserConf(obj: any) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/astproxy/hangup_userconf`, {\n      method: 'POST',\n      headers: { ...headers },\n      body: JSON.stringify(obj),\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    return true\n  } catch (error: any) {\n    throw error\n  }\n}\n"],"names":["default_device","store","getState","currentUser","undefined","id","exten","body","endpointId","endpointType","_a","fetchDefaults","baseURL","headers","fetch","concat","method","__assign","JSON","stringify","response","_b","sent","ok","Error","statusText","error_7","error_3","error_2","to","ownerExtension","currentCall","endpointTpe","number","error_13","obj","error_5","json","error_1","error_4","conversationId","currentUserInformation","astproxyUrl","actionUrl","convid","_c","_d","error_8","physicalRecorder","error_9","toggleMute","dispatch","updateCurrentCall","muted","error_10","error_6","togglePause","paused","error_11","key","tone","toString","error_12","recordingType"],"mappings":"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"}