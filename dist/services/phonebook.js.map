{"version":3,"file":"phonebook.js","sources":["../../src/services/phonebook.ts"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { store } from '../store'\nimport { PhonebookContact, PhonebookSearchResult } from '../types/phonebook'\n\nexport const PAGE_SIZE = 50\n\n/**\n * phonebook search\n */\nexport async function searchPhonebook(\n  pageNum: number,\n  textFilter: string,\n  contactType: string,\n  pageSize: number = PAGE_SIZE,\n) {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    let apiUrl = `${baseURL}/phonebook/search/${textFilter.trim()}`\n    const offset = (pageNum - 1) * pageSize\n    apiUrl += `?offset=${offset}&limit=${pageSize}&view=${contactType}`\n\n    const response = await fetch(apiUrl, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return mapPhonebookResponse(data)\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n *\n * @param phonebookResponse the response from the phonebook API\n * @returns\n */\nexport const mapPhonebookResponse = (phonebookResponse: PhonebookSearchResult) => {\n  phonebookResponse.rows = phonebookResponse.rows.map((contact: PhonebookContact) => {\n    return mapContact(contact)\n  })\n\n  // total pages\n  phonebookResponse.totalPages = Math.ceil(phonebookResponse.count / PAGE_SIZE)\n  return phonebookResponse\n}\n\nexport function mapContact(contact: PhonebookContact) {\n  // kind & display name\n  if (contact.name) {\n    contact.kind = 'person'\n    contact.displayName = contact.name\n  } else {\n    contact.kind = 'company'\n    contact.displayName = contact.company\n  }\n\n  // company contacts\n  if (contact.contacts) {\n    contact.contacts = JSON.parse(contact.contacts)\n  }\n  return contact\n}\n\nexport function getMainPhoneNumber(contact: PhonebookContact): string {\n  if (contact.extension) {\n    return contact.extension\n  } else if (contact.workphone) {\n    return contact.workphone\n  } else if (contact.cellphone) {\n    return contact.cellphone\n  }\n  return ''\n}\n\nexport function getTotalPhoneNumbers(contact: PhonebookContact) {\n  const phoneNumbers = [contact.extension, contact.workphone, contact.cellphone].filter(\n    (number) => number,\n  )\n  return phoneNumbers.length\n}\n"],"names":["mapPhonebookResponse","phonebookResponse","rows","map","contact","mapContact","totalPages","Math","ceil","count","name","kind","displayName","company","contacts","JSON","parse","extension","workphone","cellphone","filter","number","length","pageNum","textFilter","contactType","pageSize","_a","store","getState","fetchDefaults","baseURL","headers","apiUrl","concat","trim","fetch","__assign","response","_b","sent","ok","Error","statusText","json","data","error_1"],"mappings":"uJAyCO,IAAMA,EAAuB,SAACC,GAOnC,OANAA,EAAkBC,KAAOD,EAAkBC,KAAKC,KAAI,SAACC,GACnD,OAAOC,EAAWD,EACpB,IAGAH,EAAkBK,WAAaC,KAAKC,KAAKP,EAAkBQ,MAzCpC,IA0ChBR,CACT,EAEM,SAAUI,EAAWD,GAczB,OAZIA,EAAQM,MACVN,EAAQO,KAAO,SACfP,EAAQQ,YAAcR,EAAQM,OAE9BN,EAAQO,KAAO,UACfP,EAAQQ,YAAcR,EAAQS,SAI5BT,EAAQU,WACVV,EAAQU,SAAWC,KAAKC,MAAMZ,EAAQU,WAEjCV,CACT,mBA5DyB,8BA8DnB,SAA6BA,GACjC,OAAIA,EAAQa,UACHb,EAAQa,UACNb,EAAQc,UACVd,EAAQc,UACNd,EAAQe,UACVf,EAAQe,UAEV,EACT,+BAEM,SAA+Bf,GAInC,MAHqB,CAACA,EAAQa,UAAWb,EAAQc,UAAWd,EAAQe,WAAWC,QAC7E,SAACC,GAAW,OAAAA,CAAM,IAEAC,MACtB,8EAzEM,SACJC,EACAC,EACAC,EACAC,eAAA,IAAAA,IAAAA,EATuB,+HAiBJ,6BALXC,EAAuBC,EAAKA,MAACC,WAAWC,cAAtCC,EAAOJ,EAAAI,QAAEC,EAAOL,EAAAK,QACpBC,EAAS,UAAGF,EAAO,sBAAAG,OAAqBV,EAAWW,QAEvDF,GAAU,mBADMV,EAAU,GAAKG,EACJ,WAAAQ,OAAUR,EAAiB,UAAAQ,OAAAT,GAE/B,CAAA,EAAAW,MAAMH,EAAQ,CACnCD,QAAOK,EAAAA,SAAA,CAAA,EAAOL,aAEhB,KAHMM,EAAWC,EAEfC,QACYC,GACZ,MAAM,IAAIC,MAAMJ,EAASK,YAEd,MAAA,CAAA,EAAML,EAASM,eAC5B,OADMC,EAAON,EAAqBC,OAClC,CAAA,EAAOxC,EAAqB6C,WAE5B,iBAAM,IAAIH,MAAMI,0BAEnB"}