{"version":3,"file":"offhour.js","sources":["../../src/services/offhour.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { store } from '../store'\nimport type { AnnouncementInfoTypes } from '../types'\n\n/**\n * Get announcement in base64 format\n */\nexport async function getAnnouncement(id: string): Promise<string> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/offhour/listen_announcement/${id}`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Get the info of an announcement\n */\nexport async function getAllAnnouncementsInfo(): Promise<AnnouncementInfoTypes[]> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/offhour/list_announcement`, {\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Start a call to record an announcement\n */\nexport async function startAnnouncementRecording(): Promise<{tempFilename: string}> {\n  try {\n    const { baseURL, headers } = store.getState().fetchDefaults\n    const response = await fetch(`${baseURL}/offhour/record_announcement`, {\n      method: 'POST',\n      headers: { ...headers },\n    })\n    if (!response.ok) {\n      throw new Error(response.statusText)\n    }\n    const data = await response.json()\n    return data\n  } catch (error: any) {\n    throw new Error(error)\n  }\n}\n"],"names":["_a","store","getState","fetchDefaults","baseURL","headers","fetch","concat","__assign","response","_b","sent","ok","Error","statusText","json","error_2","id","error_1","method","error_3"],"mappings":"gUA+BqB,6BADXA,EAAuBC,EAAKA,MAACC,WAAWC,cAAtCC,EAAOJ,EAAAI,QAAEC,EAAOL,EAAAK,QACP,CAAA,EAAMC,MAAM,GAAGC,OAAAH,gCAAqC,CACnEC,QAAOG,EAAAA,SAAA,CAAA,EAAOH,aAEhB,KAHMI,EAAWC,EAEfC,QACYC,GACZ,MAAM,IAAIC,MAAMJ,EAASK,YAEd,MAAA,CAAA,EAAML,EAASM,eAC5B,MAAA,CAAA,EADaL,EAAqBC,eAGlC,iBAAM,IAAIE,MAAMG,0BAEnB,0BAjCK,SAAgCC,iIAGjB,6BADXjB,EAAuBC,EAAKA,MAACC,WAAWC,cAAtCC,EAAOJ,EAAAI,QAAEC,EAAOL,EAAAK,QACP,CAAA,EAAMC,MAAM,GAAAC,OAAGH,EAAuC,iCAAAG,OAAAU,GAAM,CAC3EZ,QAAOG,EAAAA,SAAA,CAAA,EAAOH,aAEhB,KAHMI,EAAWC,EAEfC,QACYC,GACZ,MAAM,IAAIC,MAAMJ,EAASK,YAEd,MAAA,CAAA,EAAML,EAASM,eAC5B,MAAA,CAAA,EADaL,EAAqBC,eAGlC,iBAAM,IAAIE,MAAMK,0BAEnB,8KA2BoB,6BADXlB,EAAuBC,EAAKA,MAACC,WAAWC,cAAtCC,EAAOJ,EAAAI,QAAEC,EAAOL,EAAAK,QACP,CAAA,EAAMC,MAAM,GAAGC,OAAAH,kCAAuC,CACrEe,OAAQ,OACRd,QAAOG,EAAAA,SAAA,CAAA,EAAOH,aAEhB,KAJMI,EAAWC,EAGfC,QACYC,GACZ,MAAM,IAAIC,MAAMJ,EAASK,YAEd,MAAA,CAAA,EAAML,EAASM,eAC5B,MAAA,CAAA,EADaL,EAAqBC,eAGlC,iBAAM,IAAIE,MAAMO,0BAEnB"}