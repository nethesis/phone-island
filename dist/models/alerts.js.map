{"version":3,"file":"alerts.js","sources":["../../src/models/alerts.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\n\nconst defaultState: AlertsTypes = {\n  data: {\n    // Alerts that break calls\n    browser_permissions: {\n      active: false,\n      break: true,\n      message: \"No microphone or camera permissions.\",\n      type: 'browser_permissions',\n    },\n    user_permissions: {\n      active: false,\n      break: true,\n      message: 'You must accept audio and video permissions.',\n      type: 'user_permissions',\n    },\n    unknown_media_permissions: {\n      active: false,\n      break: true,\n      message: \"Unknown audio or camera permissions.\",\n      type: 'unknown_media_permissions',\n    },\n    webrtc_down: {\n      active: false,\n      break: true,\n      message: 'Web Phone connection is down.',\n      nethlink_message: 'NethLink connection is down.',\n      type: 'webrtc_down',\n    },\n    socket_down: {\n      active: false,\n      break: false,\n      message: 'Server connection is down.',\n      type: 'socket_down',\n    },\n    // Warning alerts\n    busy_camera: {\n      active: false,\n      message: 'Camera is already used.',\n      type: 'busy_camera',\n    },\n    // Success alerts\n    call_transfered: {\n      active: false,\n      success: true,\n      message: 'Call transferred successfully.',\n      type: 'call_transfered',\n    },\n  },\n  status: {\n    activeAlertsCount: 0,\n    breakActiveAlertsCount: 0,\n  },\n}\n\nexport const alerts = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    setAlert: (state, payload: AlertsKeys) => {\n      if (!state.data[payload].active) {\n        const newActiveAlertsCount = state.status.activeAlertsCount + 1\n        const newBreakActiveAlertsCount = state.data[payload].break\n          ? state.status.breakActiveAlertsCount + 1\n          : state.status.breakActiveAlertsCount\n\n        return {\n          ...state,\n          data: {\n            ...state.data,\n            [payload]: {\n              ...state.data[payload],\n              active: true,\n            },\n          },\n          status: {\n            ...state.status,\n            activeAlertsCount: newActiveAlertsCount,\n            breakActiveAlertsCount: newBreakActiveAlertsCount,\n          },\n        }\n      }\n    },\n    removeAlert: (state, payload: AlertsKeys) => {\n      if (state.data[payload].active) {\n        const newActiveAlertsCount = state.status.activeAlertsCount - 1\n        const newBreakActiveAlertsCount = state.data[payload].break\n          ? state.status.breakActiveAlertsCount - 1\n          : state.status.breakActiveAlertsCount\n\n        return {\n          data: {\n            ...state.data,\n            [payload]: {\n              ...state.data[payload],\n              active: false,\n              activeAlertsCount: newActiveAlertsCount,\n              breakActiveAlertsCount: newBreakActiveAlertsCount,\n            },\n          },\n          status: {\n            ...state.status,\n            activeAlertsCount: newActiveAlertsCount,\n            breakActiveAlertsCount: newBreakActiveAlertsCount,\n          },\n        }\n      }\n    },\n    //remove all alerts\n    removeAllAlerts: (state) => {\n      for (const key in state.data) {\n        state.data[key].active = false\n      }\n      state.status.activeAlertsCount = 0\n      state.status.breakActiveAlertsCount = 0\n    },\n  },\n})\n\nexport type AlertsTypes = {\n  data: { [key in AlertsKeys]: AlertTypes }\n  status: {\n    activeAlertsCount: number\n    breakActiveAlertsCount: number\n  }\n}\n\ntype AlertsKeys =\n  | 'browser_permissions'\n  | 'user_permissions'\n  | 'busy_camera'\n  | 'unknown_media_permissions'\n  | 'webrtc_down'\n  | 'socket_down'\n  | 'call_transfered'\n\nexport interface AlertTypes {\n  active: boolean\n  message: string\n  break?: boolean // This means that it brokes WebRTC audio calls or Socket connection\n  success?: boolean\n  type: string\n  nethlink_message?: string\n}\n"],"names":["alerts","createModel","state","data","browser_permissions","active","break","message","type","user_permissions","unknown_media_permissions","webrtc_down","nethlink_message","socket_down","busy_camera","call_transfered","success","status","activeAlertsCount","breakActiveAlertsCount","reducers","setAlert","payload","newActiveAlertsCount","newBreakActiveAlertsCount","__assign","_a","removeAlert","removeAllAlerts","key"],"mappings":"wHA4DaA,4DAAoBC,aAAXA,CAAyB,CAC7CC,MAvDgC,CAChCC,KAAM,CAEJC,oBAAqB,CACnBC,QAAQ,EACRC,OAAO,EACPC,QAAS,uCACTC,KAAM,uBAERC,iBAAkB,CAChBJ,QAAQ,EACRC,OAAO,EACPC,QAAS,+CACTC,KAAM,oBAERE,0BAA2B,CACzBL,QAAQ,EACRC,OAAO,EACPC,QAAS,uCACTC,KAAM,6BAERG,YAAa,CACXN,QAAQ,EACRC,OAAO,EACPC,QAAS,gCACTK,iBAAkB,+BAClBJ,KAAM,eAERK,YAAa,CACXR,QAAQ,EACRC,OAAO,EACPC,QAAS,6BACTC,KAAM,eAGRM,YAAa,CACXT,QAAQ,EACRE,QAAS,0BACTC,KAAM,eAGRO,gBAAiB,CACfV,QAAQ,EACRW,SAAS,EACTT,QAAS,iCACTC,KAAM,oBAGVS,OAAQ,CACNC,kBAAmB,EACnBC,uBAAwB,IAM1BC,SAAU,CACRC,SAAU,SAACnB,EAAOoB,SAChB,IAAKpB,EAAMC,KAAKmB,GAASjB,OAAQ,CAC/B,IAAMkB,EAAuBrB,EAAMe,OAAOC,kBAAoB,EACxDM,EAA4BtB,EAAMC,KAAKmB,GAAShB,MAClDJ,EAAMe,OAAOE,uBAAyB,EACtCjB,EAAMe,OAAOE,uBAEjB,OAAAM,EAAAA,SAAAA,EAAAA,SAAA,GACKvB,GAAK,CACRC,KAAIsB,WAAAA,EAAAA,SAAA,CAAA,EACCvB,EAAMC,OACRuB,EAAA,CAAA,EAAAA,EAAAJ,4BACIpB,EAAMC,KAAKmB,IAAQ,CACtBjB,QAAQ,IAAIqB,IAGhBT,OAAMQ,WAAAA,EAAAA,SAAA,CAAA,EACDvB,EAAMe,QACT,CAAAC,kBAAmBK,EACnBJ,uBAAwBK,KAG7B,CACF,EACDG,YAAa,SAACzB,EAAOoB,SACnB,GAAIpB,EAAMC,KAAKmB,GAASjB,OAAQ,CAC9B,IAAMkB,EAAuBrB,EAAMe,OAAOC,kBAAoB,EACxDM,EAA4BtB,EAAMC,KAAKmB,GAAShB,MAClDJ,EAAMe,OAAOE,uBAAyB,EACtCjB,EAAMe,OAAOE,uBAEjB,MAAO,CACLhB,KAAIsB,EAAAA,SAAAA,EAAAA,SAAA,CAAA,EACCvB,EAAMC,OAAIuB,EAAA,CAAA,EAAAA,EACZJ,GACIG,EAAAA,SAAAA,EAAAA,SAAA,GAAAvB,EAAMC,KAAKmB,IACd,CAAAjB,QAAQ,EACRa,kBAAmBK,EACnBJ,uBAAwBK,IAE3BE,IACDT,OACKQ,EAAAA,SAAAA,WAAA,CAAA,EAAAvB,EAAMe,QACT,CAAAC,kBAAmBK,EACnBJ,uBAAwBK,IAG7B,CACF,EAEDI,gBAAiB,SAAC1B,GAChB,IAAK,IAAM2B,KAAO3B,EAAMC,KACtBD,EAAMC,KAAK0B,GAAKxB,QAAS,EAE3BH,EAAMe,OAAOC,kBAAoB,EACjChB,EAAMe,OAAOE,uBAAyB,CACvC"}