{"version":3,"file":"currentCall.js","sources":["../../src/models/currentCall.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\nimport incomingRingtone from '../static/incoming_ringtone'\nimport { dispatchOutgoingCallStarted } from '../events/index'\nimport { eventDispatch } from '../utils'\nimport { PhonebookContact } from '../types/phonebook'\n\nconst defaultState = {\n  displayName: '',\n  username: '',\n  number: '',\n  incomingSocket: false,\n  incomingWebRTC: false,\n  incoming: false,\n  acceptedSocket: false,\n  acceptedWebRTC: false,\n  accepted: false,\n  outgoingSocket: false,\n  outgoingWebRTC: false,\n  parked: false,\n  outgoing: false,\n  startTime: '',\n  muted: false,\n  paused: false,\n  keypadValue: '',\n  conversationId: '',\n  transferring: false,\n  conferencing: false,\n  transferringName: '',\n  transferringNumber: '',\n  transferringStartTime: '',\n  transferSwitching: false,\n  transferCalls: new Array(),\n  ownerExtension: '',\n  isRecording: false,\n  isLocalVideoEnabled: false,\n  showRemoteVideoPlaceHolder: true,\n  hasVideoTrackAdded: false,\n  isStartingVideoCall: false,\n  streamingSourceNumber: '',\n  chDest: new Array(),\n  chSource: new Array(),\n}\n\nexport const currentCall = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    updateCurrentCall: (state, payload: CurrentCallTypes) => {\n      if (Number(payload.startTime) && state.startTime) {\n        // avoid updating startTime if it's already set (e.g. while switching to a video call)\n        delete payload.startTime\n      }\n\n      return {\n        ...state,\n        ...payload,\n        transferCalls: state.transferCalls,\n      }\n    },\n    updateKeypadValue: (state, payload: string) => {\n      return {\n        ...state,\n        keypadValue: payload,\n      }\n    },\n    updateTransferring: (state, payload: boolean) => {\n      return {\n        ...state,\n        transferring: payload,\n      }\n    },\n    updateTransferSwitching: (state, payload: boolean) => {\n      return {\n        ...state,\n        transferSwitching: payload,\n      }\n    },\n    addTransferCalls: (state, payload: TransferCallsTypes) => {\n      if (state.transferCalls.find((item) => item.number === payload.number)) {\n        return state\n      } else {\n        return {\n          ...state,\n          transferCalls: [...state.transferCalls, payload],\n        }\n      }\n    },\n    deleteTransferCalls: (state) => {\n      return {\n        ...state,\n        transferCalls: state.transferCalls.filter((item) => item.type !== 'transferred'),\n      }\n    },\n    setParked: (state, payload: boolean) => {\n      state.parked = payload\n      return state\n    },\n    updateRecordingStatus: (state, payload: boolean) => {\n      state.isRecording = payload\n      return state\n    },\n    updateStartTime: (state, payload: string) => {\n      state.startTime = payload\n      return state\n    },\n    updateIncoming: (state, payload: boolean) => {\n      state.incoming = payload\n      return state\n    },\n    reset: () => {\n      return defaultState\n    },\n    setLocalVideoEnabled: (state, payload: boolean) => {\n      state.isLocalVideoEnabled = payload\n      return state\n    },\n    setVideoTrackAdded: (state, payload: boolean) => {\n      state.hasVideoTrackAdded = payload\n      return state\n    },\n    updateConferencing: (state, payload: boolean) => {\n      return {\n        ...state,\n        conferencing: payload,\n      }\n    },\n  },\n  effects: (dispatch) => ({\n    checkIncomingUpdatePlay: (payload: CurrentCallTypes, rootState) => {\n      // Check call type and incoming confirmation source\n      if (\n        (rootState?.currentUser?.default_device?.type === 'webrtc' && payload?.incomingWebRTC) ||\n        (rootState?.currentUser?.default_device?.type === 'physical' && payload?.incomingSocket) ||\n        (rootState?.currentUser?.default_device?.type === 'nethlink' && payload?.incomingWebRTC)\n      ) {\n        payload.incoming = true\n\n        // Update local player and play the audio\n        dispatch.player.updateStartAudioPlayer({ src: incomingRingtone, loop: true })\n      }\n      // Update the current call values and set incoming\n      dispatch.currentCall.updateCurrentCall({\n        ...payload,\n      })\n    },\n    checkOutgoingUpdate: (payload: CurrentCallTypes, rootState) => {\n      // Check call type and outgoing confirmation source\n      if (\n        (rootState.currentUser.default_device?.type === 'webrtc' && payload.outgoingWebRTC) ||\n        (rootState.currentUser.default_device?.type === 'physical' && payload.outgoingSocket) ||\n        (rootState.currentUser.default_device?.type === 'nethlink' && payload.outgoingWebRTC)\n      ) {\n        payload.outgoing = true\n        // Dispatch an event for outgoing call\n        dispatchOutgoingCallStarted(payload.displayName, payload.number)\n      }\n      // Update the current call values and set outgoing\n      dispatch.currentCall.updateCurrentCall({\n        ...payload,\n      })\n    },\n    checkAcceptedUpdate: (payload: CurrentCallTypes, rootState) => {\n      // Check call type and accepted confirmation source\n      if (\n        (rootState.currentUser.default_device?.type === 'webrtc' && payload.acceptedWebRTC) ||\n        (rootState.currentUser.default_device?.type === 'physical' && payload.acceptedSocket) ||\n        (rootState.currentUser.default_device?.type === 'nethlink' && payload.acceptedWebRTC)\n      ) {\n        payload.accepted = true\n        eventDispatch('phone-island-call-answered', {})\n      }\n      // Update the current call values\n      dispatch.currentCall.updateCurrentCall({\n        ...payload,\n      })\n    },\n  }),\n})\n\nexport type TransferCallsTypes = {\n  type: 'transferred' | 'destination'\n  displayName: string\n  number: string\n  startTime: string\n}\n\nexport type chDestTypes = {\n  type: 'dest'\n  channel: string\n  callerNum: string\n  startTime: number\n  callerName: string\n  bridgedNum: string\n  bridgedName: string\n  inConference: boolean\n  channelStatus: string\n  bridgedChannel: string\n}\n\nexport type chSourceTypes = {\n  type: 'source'\n  channel: string\n  callerNum: string\n  startTime: number\n  callerName: string\n  bridgedNum: string\n  bridgedName: string\n  inConference: boolean\n  channelStatus: string\n  bridgedChannel: string\n}\n\nexport interface CurrentCallTypes {\n  displayName?: string\n  username?: string\n  number?: string\n  incomingSocket?: boolean\n  incomingWebRTC?: boolean\n  parked?: boolean\n  incoming?: boolean\n  acceptedSocket?: boolean\n  acceptedWebRTC?: boolean\n  accepted?: boolean\n  outgoingSocket?: boolean\n  outgoingWebRTC?: boolean\n  outgoing?: boolean\n  startTime?: string\n  muted?: boolean\n  paused?: boolean\n  conversationId?: string\n  transferring?: boolean\n  conferencing?: boolean\n  transferringName?: string\n  transferringNumber?: string\n  transferringStartTime?: string\n  transferSwitching?: boolean\n  transferCalls?: TransferCallsTypes[]\n  ownerExtension?: string\n  isRecording?: boolean\n  isLocalVideoEnabled?: boolean\n  hasVideoTrackAdded?: boolean\n  showRemoteVideoPlaceHolder?: boolean\n  isStartingVideoCall?: boolean\n  streamingSourceNumber?: string\n  chDest?: any\n  chSource?: any\n}\n"],"names":["defaultState","displayName","username","number","incomingSocket","incomingWebRTC","incoming","acceptedSocket","acceptedWebRTC","accepted","outgoingSocket","outgoingWebRTC","parked","outgoing","startTime","muted","paused","keypadValue","conversationId","transferring","conferencing","transferringName","transferringNumber","transferringStartTime","transferSwitching","transferCalls","Array","ownerExtension","isRecording","isLocalVideoEnabled","showRemoteVideoPlaceHolder","hasVideoTrackAdded","isStartingVideoCall","streamingSourceNumber","chDest","chSource","currentCall","createModel","state","reducers","updateCurrentCall","payload","Number","__assign","updateKeypadValue","updateTransferring","updateTransferSwitching","addTransferCalls","find","item","__spreadArray","deleteTransferCalls","filter","type","setParked","updateRecordingStatus","updateStartTime","updateIncoming","reset","setLocalVideoEnabled","setVideoTrackAdded","updateConferencing","effects","dispatch","checkIncomingUpdatePlay","rootState","_b","_a","currentUser","default_device","_d","_c","_f","_e","player","updateStartAudioPlayer","src","incomingRingtone","loop","checkOutgoingUpdate","dispatchOutgoingCallStarted","checkAcceptedUpdate","eventDispatch"],"mappings":"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"}