{"version":3,"file":"streaming.js","sources":["../../src/models/streaming.ts"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\n\ninterface VideoSourceType {\n  cmdOpen: string\n  description: string\n  extension: string\n  frameRate: string\n  id: string\n  password: string\n  url: string\n  user: string\n  image?: string\n}\n\ninterface StreamingStateType {\n  videoSources: Record<string, VideoSourceType>\n  sourceImages: Record<string, string>\n}\n\nconst defaultState: StreamingStateType = {\n  videoSources: {},\n  sourceImages: {},\n}\n\nexport const streaming = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    updateVideoSources: (state, payload: Record<string, VideoSourceType>) => {\n      return {\n        ...state,\n        videoSources: payload,\n      }\n    },\n    updateSourceImage: (state, payload: { source: string; image: string }) => {\n      const sourceId = payload.source\n\n      const updatedSourceImages = {\n        ...state.sourceImages,\n        [sourceId]: payload.image,\n      }\n\n      const updatedVideoSources = { ...state.videoSources }\n\n      if (Object.values(updatedVideoSources).some((source) => source.id === sourceId)) {\n        Object.keys(updatedVideoSources).forEach((key) => {\n          if (updatedVideoSources[key].id === sourceId) {\n            updatedVideoSources[key] = {\n              ...updatedVideoSources[key],\n              image: payload.image,\n            }\n          }\n        })\n      }\n\n      return {\n        ...state,\n        sourceImages: updatedSourceImages,\n        videoSources: updatedVideoSources,\n      }\n    },\n    clearSourceImages: (state) => {\n      return {\n        ...state,\n        sourceImages: {},\n      }\n    },\n    reset: () => {\n      return defaultState\n    },\n  },\n})\n"],"names":["defaultState","videoSources","sourceImages","streaming","createModel","state","reducers","updateVideoSources","payload","__assign","updateSourceImage","sourceId","source","updatedSourceImages","_a","image","updatedVideoSources","Object","values","some","id","keys","forEach","key","clearSourceImages","reset"],"mappings":"oLAuBMA,EAAmC,CACvCC,aAAc,CAAE,EAChBC,aAAc,CAAE,GAGLC,EAAYC,EAAWA,aAAXA,CAAyB,CAChDC,MAAOL,EACPM,SAAU,CACRC,mBAAoB,SAACF,EAAOG,GAC1B,OAAAC,EAAAA,SAAAA,EAAAA,SAAA,GACKJ,GAAK,CACRJ,aAAcO,GAEjB,EACDE,kBAAmB,SAACL,EAAOG,SACnBG,EAAWH,EAAQI,OAEnBC,EAAmBJ,EAAAA,SAAAA,EAAAA,SAAA,CAAA,EACpBJ,EAAMH,gBAAYY,EAAA,CAAA,GACpBH,GAAWH,EAAQO,MAAKD,IAGrBE,EAA2BP,EAAAA,SAAA,CAAA,EAAAJ,EAAMJ,cAavC,OAXIgB,OAAOC,OAAOF,GAAqBG,MAAK,SAACP,GAAW,OAAAA,EAAOQ,KAAOT,CAAQ,KAC5EM,OAAOI,KAAKL,GAAqBM,SAAQ,SAACC,GACpCP,EAAoBO,GAAKH,KAAOT,IAClCK,EAAoBO,GAAId,WAAAA,EAAAA,SAAA,CAAA,EACnBO,EAAoBO,IAAI,CAC3BR,MAAOP,EAAQO,QAGrB,IAIGN,WAAAA,EAAAA,SAAA,CAAA,EAAAJ,IACHH,aAAcW,EACdZ,aAAce,GAEjB,EACDQ,kBAAmB,SAACnB,GAClB,OAAAI,EAAAA,SAAAA,EAAAA,SAAA,GACKJ,GAAK,CACRH,aAAc,CAAE,GAEnB,EACDuB,MAAO,WACL,OAAOzB,CACR"}