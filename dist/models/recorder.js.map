{"version":3,"file":"recorder.js","sources":["../../src/models/recorder.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { RefObject } from 'react'\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\n\nconst defaultState: RecorderTypes = {\n  recording: false,\n  waiting: false,\n  incoming: false,\n  visibleContainerRef: null,\n  frequency: 0,\n  recorded: false,\n  playing: false,\n  paused: false,\n  currentTime: '00:00:00',\n  tempFileName: '',\n  startTime: '',\n}\n\nexport const recorder = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    setRecording: (state, payload: boolean) => {\n      state.recording = payload\n      return state\n    },\n    setWaiting: (state, payload: boolean) => {\n      state.waiting = payload\n      return state\n    },\n    setIncoming: (state, payload: boolean) => {\n      state.incoming = payload\n      return state\n    },\n    setVisibleContainerRef: (state, payload: RefObject<HTMLDivElement>) => {\n      state.visibleContainerRef = payload\n      return state\n    },\n    setFrequency: (state, payload: number) => {\n      state.frequency = payload\n      return state\n    },\n    setRecorded: (state, payload: boolean) => {\n      state.recorded = payload\n      return state\n    },\n    setPlaying: (state, payload: boolean) => {\n      state.playing = payload\n      return state\n    },\n    setPaused: (state, payload: boolean) => {\n      state.paused = payload\n      return state\n    },\n    setCurrentTime: (state, payload: string) => {\n      state.currentTime = payload\n      return state\n    },\n    resetRecorded: (state, _: void) => {\n      return {\n        ...defaultState,\n        visibleContainerRef: state.visibleContainerRef,\n      }\n    },\n    setTempFilename: (state, payload: string) => {\n      state.tempFileName = payload\n      return state\n    },\n    setStartTime: (state, payload: string) => {\n      state.startTime = payload\n      return state\n    },\n    reset: () => {\n      return defaultState\n    },\n  },\n})\n\ninterface RecorderTypes {\n  recording: boolean\n  waiting: boolean\n  incoming: boolean\n  visibleContainerRef: RefObject<HTMLDivElement> | null\n  frequency: number\n  recorded: boolean\n  playing: boolean\n  paused: boolean\n  currentTime: string\n  tempFileName: string\n  startTime: string\n}\n"],"names":["defaultState","recording","waiting","incoming","visibleContainerRef","frequency","recorded","playing","paused","currentTime","tempFileName","startTime","recorder","createModel","state","reducers","setRecording","payload","setWaiting","setIncoming","setVisibleContainerRef","setFrequency","setRecorded","setPlaying","setPaused","setCurrentTime","resetRecorded","_","__assign","setTempFilename","setStartTime","reset"],"mappings":"oLAOMA,EAA8B,CAClCC,WAAW,EACXC,SAAS,EACTC,UAAU,EACVC,oBAAqB,KACrBC,UAAW,EACXC,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,YAAa,WACbC,aAAc,GACdC,UAAW,IAGAC,EAAWC,EAAWA,aAAXA,CAAyB,CAC/CC,MAAOd,EACPe,SAAU,CACRC,aAAc,SAACF,EAAOG,GAEpB,OADAH,EAAMb,UAAYgB,EACXH,CACR,EACDI,WAAY,SAACJ,EAAOG,GAElB,OADAH,EAAMZ,QAAUe,EACTH,CACR,EACDK,YAAa,SAACL,EAAOG,GAEnB,OADAH,EAAMX,SAAWc,EACVH,CACR,EACDM,uBAAwB,SAACN,EAAOG,GAE9B,OADAH,EAAMV,oBAAsBa,EACrBH,CACR,EACDO,aAAc,SAACP,EAAOG,GAEpB,OADAH,EAAMT,UAAYY,EACXH,CACR,EACDQ,YAAa,SAACR,EAAOG,GAEnB,OADAH,EAAMR,SAAWW,EACVH,CACR,EACDS,WAAY,SAACT,EAAOG,GAElB,OADAH,EAAMP,QAAUU,EACTH,CACR,EACDU,UAAW,SAACV,EAAOG,GAEjB,OADAH,EAAMN,OAASS,EACRH,CACR,EACDW,eAAgB,SAACX,EAAOG,GAEtB,OADAH,EAAML,YAAcQ,EACbH,CACR,EACDY,cAAe,SAACZ,EAAOa,GACrB,OAAAC,EAAAA,SAAAA,WAAA,CAAA,EACK5B,GACH,CAAAI,oBAAqBU,EAAMV,qBAE9B,EACDyB,gBAAiB,SAACf,EAAOG,GAEvB,OADAH,EAAMJ,aAAeO,EACdH,CACR,EACDgB,aAAc,SAAChB,EAAOG,GAEpB,OADAH,EAAMH,UAAYM,EACXH,CACR,EACDiB,MAAO,WACL,OAAO/B,CACR"}