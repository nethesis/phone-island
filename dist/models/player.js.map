{"version":3,"file":"player.js","sources":["../../src/models/player.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\nimport { updateAudioPlayerSource } from '../lib/phone/audio'\nimport { dispatchAudioPlayerStarted } from '../events/PlayerEvents'\nimport { type TypeTypes } from '../types'\nimport { RefObject } from 'react'\n\nconst defaultState: PlayerTypes = {\n  audioPlayer: null,\n  audioPlayerPlaying: false,\n  audioPlayerPaused: false,\n  audioPlayerLoop: false,\n  audioPlayerTrackType: null,\n  audioPlayerTrackName: null,\n  audioPlayerTrackDuration: null,\n  localAudio: null,\n  remoteAudio: null,\n  localVideo: null,\n  largeRemoteVideo: null,\n  smallRemoteVideo: null,\n  localScreen: null,\n  remoteScreen: null,\n}\n\nexport const player = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    updatePlayer: (state, payload: PlayerTypes) => {\n      return {\n        ...state,\n        ...payload,\n      }\n    },\n    updateAudioPlayerTrackDuration: (state, payload: number) => {\n      return {\n        ...state,\n        audioPlayerTrackDuration: payload,\n      }\n    },\n    updateAudioPlayerSrc: (state, payload: string) => {\n      if (state.audioPlayer && state.audioPlayer.current) {\n        state.audioPlayer.current.src = payload\n      }\n      return state\n    },\n    stopAudioPlayer: (state) => {\n      if (state.audioPlayer && state.audioPlayer.current) {\n        // Pause audio\n        state.audioPlayer.current.pause()\n        state.audioPlayer.current.currentTime = 0\n        return {\n          ...state,\n          audioPlayerPlaying: false,\n        }\n      }\n    },\n    pauseAudioPlayer: (state) => {\n      if (state.audioPlayer && state.audioPlayer.current) {\n        state.audioPlayer.current.pause()\n        return {\n          ...state,\n          audioPlayerPaused: true,\n          audioPlayerPlaying: false,\n        }\n      }\n    },\n    setAudioPlayerPaused: (state, payload: boolean) => {\n      return {\n        ...state,\n        audioPlayerPaused: payload,\n      }\n    },\n    setAudioPlayerLoop: (state, payload: boolean) => ({\n      ...state,\n      audioPlayerLoop: payload,\n    }),\n    setAudioPlayerType: (state, payload: TypeTypes) => ({\n      ...state,\n      audioPlayerTrackType: payload,\n    }),\n    setAudioPlayerPlaying: (state, payload: boolean) => ({\n      ...state,\n      audioPlayerPlaying: payload,\n    }),\n    resetAudioPlayerType: (state) => ({\n      ...state,\n      audioPlayerTrackType: null,\n    }),\n    setAudioPlayerTrackName: (state, payload: string) => ({\n      ...state,\n      audioPlayerTrackName: payload,\n    }),\n    playRemoteAudio: (state) => {\n      state.remoteAudio && state.remoteAudio.current?.play()\n    },\n    pauseRemoteAudio: (state) => {\n      state.remoteAudio && state.remoteAudio.current?.pause()\n    },\n    setAudioPlayerCurrentTime: (state, payload: number) => {\n      if (state.audioPlayer && state.audioPlayer.current) {\n        state.audioPlayer.current.currentTime = payload\n      }\n    },\n    reset: () => {\n      return defaultState\n    },\n  },\n  effects: (dispatch) => ({\n    startAudioPlayer: (endedEventCallback: () => void, rootState) => {\n      if (rootState.player.audioPlayer && rootState.player.audioPlayer.current) {\n        // Check if is playing\n        if (rootState.player.audioPlayerPlaying) {\n          rootState.player.audioPlayer.current.pause()\n          rootState.player.audioPlayer.current.currentTime = 0\n        }\n        const endedCallback = () => {\n          dispatch.player.setAudioPlayerPlaying(false)\n          rootState.player!.audioPlayer!.current!.removeEventListener('ended', endedCallback)\n          endedEventCallback()\n        }\n        // Handle playing ended event\n        rootState.player.audioPlayer.current.addEventListener('ended', endedCallback)\n        // Play the audio\n        rootState.player.audioPlayer.current.play()\n        dispatch.player.setAudioPlayerPlaying(true)\n        dispatch.player.setAudioPlayerPaused(false)\n        // Dispatch the event\n        if (rootState.island.view === 'player') {\n          dispatchAudioPlayerStarted()\n        }\n      }\n    },\n    // This function is recommended for playing audio with base64 sources\n    updateStartAudioPlayer: async ({ src, loop = false }: { src: string; loop?: boolean }) => {\n      dispatch.player.setAudioPlayerLoop(loop)\n      // Update the audio source\n      await updateAudioPlayerSource(`data:audio/ogg;base64, ${src}`)\n      // Play the outgoing ringtone when ready\n      dispatch.player.startAudioPlayer(() => {})\n    },\n  }),\n})\n\ninterface PlayerTypes {\n  audioPlayer?: RefObject<HTMLAudioElement> | null\n  audioPlayerPlaying?: boolean\n  audioPlayerPaused?: boolean\n  audioPlayerLoop?: boolean\n  audioPlayerTrackType?: TypeTypes | null\n  audioPlayerTrackName?: string | null\n  audioPlayerTrackDuration?: number | null\n  localAudio?: RefObject<HTMLAudioElement> | null\n  remoteAudio?: RefObject<HTMLAudioElement> | null\n  localVideo?: RefObject<HTMLVideoElement> | null\n  largeRemoteVideo?: RefObject<HTMLVideoElement> | null\n  smallRemoteVideo?: RefObject<HTMLVideoElement> | null\n  localScreen?: RefObject<HTMLVideoElement> | null\n  remoteScreen?: RefObject<HTMLVideoElement> | null\n}\n"],"names":["defaultState","audioPlayer","audioPlayerPlaying","audioPlayerPaused","audioPlayerLoop","audioPlayerTrackType","audioPlayerTrackName","audioPlayerTrackDuration","localAudio","remoteAudio","localVideo","largeRemoteVideo","smallRemoteVideo","localScreen","remoteScreen","player","createModel","state","reducers","updatePlayer","payload","__assign","updateAudioPlayerTrackDuration","updateAudioPlayerSrc","current","src","stopAudioPlayer","pause","currentTime","pauseAudioPlayer","setAudioPlayerPaused","setAudioPlayerLoop","setAudioPlayerType","setAudioPlayerPlaying","resetAudioPlayerType","setAudioPlayerTrackName","playRemoteAudio","_a","play","pauseRemoteAudio","setAudioPlayerCurrentTime","reset","effects","dispatch","startAudioPlayer","endedEventCallback","rootState","endedCallback_1","removeEventListener","addEventListener","island","view","dispatchAudioPlayerStarted","updateStartAudioPlayer","_b","loop","updateAudioPlayerSource","concat","_c","sent"],"mappings":"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"}