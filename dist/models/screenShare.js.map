{"version":3,"file":"screenShare.js","sources":["../../src/models/screenShare.ts"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { createModel } from '@rematch/core'\nimport type { RootModel } from '.'\n\nexport interface ScreenShareTypes {\n  active?: boolean\n  plugin?: any\n  role?: 'publisher' | 'listener' | ''\n  room?: string\n  source?: string\n  remoteFeed?: any\n  localTracks?: any\n  remoteTracks?: any\n  localVideos?: number\n  remoteVideos?: number\n  localScreenStream?: MediaStream\n  remoteScreenStream?: MediaStream\n  isStartingScreenShare?: boolean\n  isJoiningScreenShare?: boolean\n  isLeavingScreenShare?: boolean\n}\n\nconst defaultState = {\n  active: false,\n  plugin: null as any,\n  role: '',\n  room: '',\n  source: '',\n  remoteFeed: null as any,\n  localTracks: null as any,\n  remoteTracks: null as any,\n  localVideos: 0,\n  remoteVideos: 0,\n  localScreenStream: null as MediaStream | null,\n  remoteScreenStream: null as MediaStream | null,\n  isStartingScreenShare: false,\n  isJoiningScreenShare: false,\n  isLeavingScreenShare: false,\n}\n\nexport const screenShare = createModel<RootModel>()({\n  state: defaultState,\n  reducers: {\n    update: (state, payload: ScreenShareTypes) => {\n      return {\n        ...state,\n        ...payload,\n      }\n    },\n  },\n})\n"],"names":["screenShare","createModel","state","active","plugin","role","room","source","remoteFeed","localTracks","remoteTracks","localVideos","remoteVideos","localScreenStream","remoteScreenStream","isStartingScreenShare","isJoiningScreenShare","isLeavingScreenShare","reducers","update","payload","__assign"],"mappings":"wHA0CaA,4DAAyBC,aAAXA,CAAyB,CAClDC,MAnBmB,CACnBC,QAAQ,EACRC,OAAQ,KACRC,KAAM,GACNC,KAAM,GACNC,OAAQ,GACRC,WAAY,KACZC,YAAa,KACbC,aAAc,KACdC,YAAa,EACbC,aAAc,EACdC,kBAAmB,KACnBC,mBAAoB,KACpBC,uBAAuB,EACvBC,sBAAsB,EACtBC,sBAAsB,GAKtBC,SAAU,CACRC,OAAQ,SAACjB,EAAOkB,GACd,OACKC,EAAAA,SAAAA,EAAAA,SAAA,CAAA,EAAAnB,GACAkB,EAEN"}