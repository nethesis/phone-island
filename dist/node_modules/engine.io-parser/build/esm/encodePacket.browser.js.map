{"version":3,"file":"encodePacket.browser.js","sources":["../../../../../node_modules/engine.io-parser/build/esm/encodePacket.browser.js"],"sourcesContent":["import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n"],"names":["withNativeBlob","Blob","Object","prototype","toString","call","withNativeArrayBuffer","ArrayBuffer","isView","obj","buffer","encodePacket","type","data","supportsBinary","callback","encodeBlobAsBase64","PACKET_TYPES","fileReader","FileReader","onload","content","result","split","readAsDataURL","toArray","Uint8Array","byteOffset","byteLength","TEXT_ENCODER","packet","arrayBuffer","then","encoded","TextEncoder","encode"],"mappings":"kGACA,MAAMA,EAAiC,mBAATC,MACT,oBAATA,MACqC,6BAAzCC,OAAOC,UAAUC,SAASC,KAAKJ,MACjCK,EAA+C,mBAAhBC,YAE/BC,EAAUC,GACyB,mBAAvBF,YAAYC,OACpBD,YAAYC,OAAOC,GACnBA,GAAOA,EAAIC,kBAAkBH,YAEjCI,EAAeA,EAAGC,OAAMC,QAAQC,EAAgBC,IAC9Cf,GAAkBa,aAAgBZ,KAC9Ba,EACOC,EAASF,GAGTG,EAAmBH,EAAME,GAG/BT,IACJO,aAAgBN,aAAeC,EAAOK,IACnCC,EACOC,EAASF,GAGTG,EAAmB,IAAIf,KAAK,CAACY,IAAQE,GAI7CA,EAASE,EAAAA,aAAaL,IAASC,GAAQ,KAE5CG,EAAqBA,CAACH,EAAME,KAC9B,MAAMG,EAAa,IAAIC,WAKvB,OAJAD,EAAWE,OAAS,WAChB,MAAMC,EAAUH,EAAWI,OAAOC,MAAM,KAAK,GAC7CR,EAAS,KAAOM,GAAW,MAExBH,EAAWM,cAAcX,EAAK,EAEzC,SAASY,EAAQZ,GACb,OAAIA,aAAgBa,WACTb,EAEFA,aAAgBN,YACd,IAAImB,WAAWb,GAGf,IAAIa,WAAWb,EAAKH,OAAQG,EAAKc,WAAYd,EAAKe,WAEjE,CACA,IAAIC,sDACG,SAA8BC,EAAQf,GACzC,OAAIf,GAAkB8B,EAAOjB,gBAAgBZ,KAClC6B,EAAOjB,KAAKkB,cAAcC,KAAKP,GAASO,KAAKjB,GAE/CT,IACJwB,EAAOjB,gBAAgBN,aAAeC,EAAOsB,EAAOjB,OAC9CE,EAASU,EAAQK,EAAOjB,YAEnCF,EAAamB,GAAQ,GAAQG,IACpBJ,IACDA,EAAe,IAAIK,aAEvBnB,EAASc,EAAaM,OAAOF,GAAS,GAE9C"}