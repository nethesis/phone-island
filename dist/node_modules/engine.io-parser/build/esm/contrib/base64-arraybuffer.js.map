{"version":3,"file":"base64-arraybuffer.js","sources":["../../../../../../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js"],"sourcesContent":["// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n"],"names":["chars","lookup","Uint8Array","i","charCodeAt","base64","encoded1","encoded2","encoded3","encoded4","bufferLength","length","len","p","arraybuffer","ArrayBuffer","bytes"],"mappings":"oEACA,MAAMA,EAAQ,mEAERC,EAA+B,oBAAfC,WAA6B,GAAK,IAAIA,WAAW,KACvE,IAAK,IAAIC,EAAI,EAAGA,EAAIH,GAAcG,IAC9BF,EAAOD,EAAMI,WAAWD,IAAMA,iBAkBXE,IACnB,IAA8DF,EAAUG,EAAUC,EAAUC,EAAUC,EAAlGC,EAA+B,IAAhBL,EAAOM,OAAeC,EAAMP,EAAOM,OAAWE,EAAI,EACnC,MAA9BR,EAAOA,EAAOM,OAAS,KACvBD,IACkC,MAA9BL,EAAOA,EAAOM,OAAS,IACvBD,KAGR,MAAMI,EAAc,IAAIC,YAAYL,GAAeM,EAAQ,IAAId,WAAWY,GAC1E,IAAKX,EAAI,EAAGA,EAAIS,EAAKT,GAAK,EACtBG,EAAWL,EAAOI,EAAOD,WAAWD,IACpCI,EAAWN,EAAOI,EAAOD,WAAWD,EAAI,IACxCK,EAAWP,EAAOI,EAAOD,WAAWD,EAAI,IACxCM,EAAWR,EAAOI,EAAOD,WAAWD,EAAI,IACxCa,EAAMH,KAAQP,GAAY,EAAMC,GAAY,EAC5CS,EAAMH,MAAoB,GAAXN,IAAkB,EAAMC,GAAY,EACnDQ,EAAMH,MAAoB,EAAXL,IAAiB,EAAiB,GAAXC,EAE1C,OAAOK,CAAW"}