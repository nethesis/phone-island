{"version":3,"file":"decodePacket.browser.js","sources":["../../../../../node_modules/engine.io-parser/build/esm/decodePacket.browser.js"],"sourcesContent":["import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n"],"names":["withNativeArrayBuffer","ArrayBuffer","decodeBase64Packet","data","binaryType","decoded","decode","mapBinary","base64","Blob","buffer","decodePacket","encodedPacket","type","charAt","substring","PACKET_TYPES_REVERSE","length","ERROR_PACKET"],"mappings":"+IAEA,MAAMA,EAA+C,mBAAhBC,YA4B/BC,EAAqBA,CAACC,EAAMC,KAC9B,GAAIJ,EAAuB,CACvB,MAAMK,EAAUC,SAAOH,GACvB,OAAOI,EAAUF,EAASD,EAC9B,CAEI,MAAO,CAAEI,QAAQ,EAAML,OAC3B,EAEEI,EAAYA,CAACJ,EAAMC,IAEZ,SADDA,EAEID,aAAgBM,KAETN,EAIA,IAAIM,KAAK,CAACN,IAIjBA,aAAgBF,YAETE,EAIAA,EAAKO,4BAvDAC,CAACC,EAAeR,KACxC,GAA6B,iBAAlBQ,EACP,MAAO,CACHC,KAAM,UACNV,KAAMI,EAAUK,EAAeR,IAGvC,MAAMS,EAAOD,EAAcE,OAAO,GAClC,GAAa,MAATD,EACA,MAAO,CACHA,KAAM,UACNV,KAAMD,EAAmBU,EAAcG,UAAU,GAAIX,IAI7D,OADmBY,uBAAqBH,GAIjCD,EAAcK,OAAS,EACxB,CACEJ,KAAMG,EAAoBA,qBAACH,GAC3BV,KAAMS,EAAcG,UAAU,IAEhC,CACEF,KAAMG,EAAoBA,qBAACH,IARxBK,cASN"}