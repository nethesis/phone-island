"use strict";function e(e,t){return!!e&&(!!t&&t.some((t=>t.contains(e))))}require("react");class t{get size(){return this.fastMap.size}getTreeNode(e){return this.fastMap.get(e)}addTreeNode(e,t,r){let o=this.fastMap.get(null!=t?t:null);if(!o)return;let i=new s({scopeRef:e});o.addChild(i),i.parent=o,this.fastMap.set(e,i),r&&(i.nodeToRestore=r)}addNode(e){this.fastMap.set(e.scopeRef,e)}removeTreeNode(t){if(null===t)return;let s=this.fastMap.get(t);if(!s)return;let r=s.parent;for(let t of this.traverse())t!==s&&s.nodeToRestore&&t.nodeToRestore&&s.scopeRef&&s.scopeRef.current&&e(t.nodeToRestore,s.scopeRef.current)&&(t.nodeToRestore=s.nodeToRestore);let o=s.children;r&&(r.removeChild(s),o.size>0&&o.forEach((e=>r&&r.addChild(e)))),this.fastMap.delete(s.scopeRef)}*traverse(e=this.root){if(null!=e.scopeRef&&(yield e),e.children.size>0)for(let t of e.children)yield*this.traverse(t)}clone(){var e;let s=new t;var r;for(let t of this.traverse())s.addTreeNode(t.scopeRef,null!==(r=null===(e=t.parent)||void 0===e?void 0:e.scopeRef)&&void 0!==r?r:null,t.nodeToRestore);return s}constructor(){this.fastMap=new Map,this.root=new s({scopeRef:null}),this.fastMap.set(null,this.root)}}class s{addChild(e){this.children.add(e),e.parent=this}removeChild(e){this.children.delete(e),e.parent=void 0}constructor(e){this.children=new Set,this.contain=!1,this.scopeRef=e.scopeRef}}new t;
//# sourceMappingURL=FocusScope.mjs.js.map
