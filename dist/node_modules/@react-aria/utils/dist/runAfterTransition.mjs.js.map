{"version":3,"file":"runAfterTransition.mjs.js","sources":["../../../../../node_modules/@react-aria/utils/dist/runAfterTransition.mjs"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We store a global list of elements that are currently transitioning,\n// mapped to a set of CSS properties that are transitioning for that element.\n// This is necessary rather than a simple count of transitions because of browser\n// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather\n// than one or the other. So we need to track what's actually transitioning so that\n// we can ignore these duplicate events.\nlet $bbed8b41f857bcc0$var$transitionsByElement = new Map();\n// A list of callbacks to call once there are no transitioning elements.\nlet $bbed8b41f857bcc0$var$transitionCallbacks = new Set();\nfunction $bbed8b41f857bcc0$var$setupGlobalEvents() {\n    if (typeof window === 'undefined') return;\n    function isTransitionEvent(event) {\n        return 'propertyName' in event;\n    }\n    let onTransitionStart = (e)=>{\n        if (!isTransitionEvent(e) || !e.target) return;\n        // Add the transitioning property to the list for this element.\n        let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!transitions) {\n            transitions = new Set();\n            $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);\n            // The transitioncancel event must be registered on the element itself, rather than as a global\n            // event. This enables us to handle when the node is deleted from the document while it is transitioning.\n            // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.\n            e.target.addEventListener('transitioncancel', onTransitionEnd, {\n                once: true\n            });\n        }\n        transitions.add(e.propertyName);\n    };\n    let onTransitionEnd = (e)=>{\n        if (!isTransitionEvent(e) || !e.target) return;\n        // Remove property from list of transitioning properties.\n        let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!properties) return;\n        properties.delete(e.propertyName);\n        // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.\n        if (properties.size === 0) {\n            e.target.removeEventListener('transitioncancel', onTransitionEnd);\n            $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);\n        }\n        // If no transitioning elements, call all of the queued callbacks.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {\n            for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();\n            $bbed8b41f857bcc0$var$transitionCallbacks.clear();\n        }\n    };\n    document.body.addEventListener('transitionrun', onTransitionStart);\n    document.body.addEventListener('transitionend', onTransitionEnd);\n}\nif (typeof document !== 'undefined') {\n    if (document.readyState !== 'loading') $bbed8b41f857bcc0$var$setupGlobalEvents();\n    else document.addEventListener('DOMContentLoaded', $bbed8b41f857bcc0$var$setupGlobalEvents);\n}\nfunction $bbed8b41f857bcc0$export$24490316f764c430(fn) {\n    // Wait one frame to see if an animation starts, e.g. a transition on mount.\n    requestAnimationFrame(()=>{\n        // If no transitions are running, call the function immediately.\n        // Otherwise, add it to a list of callbacks to run at the end of the animation.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();\n        else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);\n    });\n}\n\n\nexport {$bbed8b41f857bcc0$export$24490316f764c430 as runAfterTransition};\n//# sourceMappingURL=runAfterTransition.module.js.map\n"],"names":["$bbed8b41f857bcc0$var$transitionsByElement","Map","$bbed8b41f857bcc0$var$transitionCallbacks","Set","$bbed8b41f857bcc0$var$setupGlobalEvents","window","isTransitionEvent","event","onTransitionEnd","e","target","properties","get","delete","propertyName","size","removeEventListener","cb","clear","document","body","addEventListener","transitions","set","once","add","readyState"],"mappings":"aAkBA,IAAIA,EAAuB,IAAIC,IAG3BC,EAAsB,IAAIC,IAE9B,SAASC,IACP,GAAsB,oBAAXC,OACT,OAGF,SAASC,EAAkBC,GACzB,MAAO,iBAAkBA,CAC3B,CAEA,IAqBIC,EAAmBC,IACrB,IAAKH,EAAkBG,KAAOA,EAAEC,OAC9B,OAGF,IAAIC,EAAaX,EAAqBY,IAAIH,EAAEC,QAC5C,GAAKC,IAILA,EAAWE,OAAOJ,EAAEK,cAGI,IAApBH,EAAWI,OACbN,EAAEC,OAAOM,oBAAoB,mBAAoBR,GACjDR,EAAqBa,OAAOJ,EAAEC,SAIE,IAA9BV,EAAqBe,MAAY,CACnC,IAAK,IAAIE,KAAMf,EACbe,IAGFf,EAAoBgB,OACtB,GAGFC,SAASC,KAAKC,iBAAiB,iBAjDNZ,IACvB,IAAKH,EAAkBG,KAAOA,EAAEC,OAC9B,OAGF,IAAIY,EAActB,EAAqBY,IAAIH,EAAEC,QACxCY,IACHA,EAAc,IAAInB,IAClBH,EAAqBuB,IAAId,EAAEC,OAAQY,GAKnCb,EAAEC,OAAOW,iBAAiB,mBAAoBb,EAAiB,CAC7DgB,MAAM,KAIVF,EAAYG,IAAIhB,EAAEK,aAAY,IAgChCK,SAASC,KAAKC,iBAAiB,gBAAiBb,EAClD,CAEwB,oBAAbW,WACmB,YAAxBA,SAASO,WACXtB,IAEAe,SAASE,iBAAiB,mBAAoBjB"}