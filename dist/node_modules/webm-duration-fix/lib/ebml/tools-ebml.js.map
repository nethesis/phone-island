{"version":3,"file":"tools-ebml.js","sources":["../../../../../node_modules/webm-duration-fix/lib/ebml/tools-ebml.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tools_1 = require(\"./tools\");\nvar Tools = /** @class */ (function () {\n    function Tools() {\n    }\n    /**\n     * read variable length integer per\n     * https://www.matroska.org/technical/specs/index.html#EBML_ex\n     * @static\n     * @param {Buffer} buffer containing input\n     * @param {Number} [start=0] position in buffer\n     * @returns {{length: Number, value: number}}  value / length object\n     */\n    Tools.readVint = function (buffer, start) {\n        if (start === void 0) { start = 0; }\n        var length = 8 - Math.floor(Math.log2(buffer[start]));\n        if (length > 8) {\n            var number = Tools.readHexString(buffer, start, start + length);\n            throw new Error(\"Unrepresentable length: \".concat(length, \" \").concat(number));\n        }\n        if (start + length > buffer.length) {\n            return null;\n        }\n        var value = buffer[start] & ((1 << (8 - length)) - 1);\n        for (var i = 1; i < length; i += 1) {\n            if (i === 7) {\n                if (value >= Math.pow(2, 8) && buffer[start + 7] > 0) {\n                    return { length: length, value: -1 };\n                }\n            }\n            value *= Math.pow(2, 8);\n            value += buffer[start + i];\n        }\n        return { length: length, value: value };\n    };\n    /**\n     * write variable length integer\n     * @static\n     * @param {Number} value to store into buffer\n     * @returns {Buffer} containing the value\n     */\n    Tools.writeVint = function (value) {\n        if (value < 0 || value > Math.pow(2, 53)) {\n            throw new Error(\"Unrepresentable value: \".concat(value));\n        }\n        var length = 1;\n        for (length = 1; length <= 8; length += 1) {\n            if (value < Math.pow(2, (7 * length)) - 1) {\n                break;\n            }\n        }\n        var buffer = tools_1.Buffer.alloc(length);\n        var val = value;\n        for (var i = 1; i <= length; i += 1) {\n            var b = val & 0xff;\n            buffer[length - i] = b;\n            val -= b;\n            val /= Math.pow(2, 8);\n        }\n        buffer[0] |= 1 << (8 - length);\n        return buffer;\n    };\n    /**\n     * *\n     * concatenate two arrays of bytes\n     * @static\n     * @param {Buffer} a1  First array\n     * @param {Buffer} a2  Second array\n     * @returns  {Buffer} concatenated arrays\n     */\n    Tools.concatenate = function (a1, a2) {\n        // both null or undefined\n        if (!a1 && !a2) {\n            return tools_1.Buffer.from([]);\n        }\n        if (!a1 || a1.byteLength === 0) {\n            return a2;\n        }\n        if (!a2 || a2.byteLength === 0) {\n            return a1;\n        }\n        return tools_1.Buffer.from(__spreadArray(__spreadArray([], a1, true), a2, true));\n    };\n    /**\n     * get a hex text string from Buff[start,end)\n     * @param {Buffer} buff from which to read the string\n     * @param {Number} [start=0] starting point (default 0)\n     * @param {Number} [end=buff.byteLength] ending point (default the whole buffer)\n     * @returns {string} the hex string\n     */\n    Tools.readHexString = function (buff, start, end) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = buff.byteLength; }\n        return Array.from(buff.slice(start, end))\n            .map(function (q) { return Number(q).toString(16); })\n            .reduce(function (acc, current) { return \"\".concat(acc).concat(current.padStart(2, '0')); }, '');\n    };\n    /**\n     * tries to read out a UTF-8 encoded string\n     * @param  {Buffer} buff the buffer to attempt to read from\n     * @return {string|null}      the decoded text, or null if unable to\n     */\n    Tools.readUtf8 = function (buff) {\n        try {\n            return tools_1.Buffer.from(buff).toString('utf8');\n        }\n        catch (exception) {\n            return null;\n        }\n    };\n    /**\n     * get an unsigned number from a buffer\n     * @param {Buffer} buff from which to read variable-length unsigned number\n     * @returns {number|string} result (in hex for lengths > 6)\n     */\n    Tools.readUnsigned = function (buff) {\n        var b = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        switch (buff.byteLength) {\n            case 1:\n                return b.getUint8(0);\n            case 2:\n                return b.getUint16(0);\n            case 4:\n                return b.getUint32(0);\n            default:\n                break;\n        }\n        if (buff.byteLength <= 6) {\n            return buff.reduce(function (acc, current) { return acc * 256 + current; }, 0);\n        }\n        return Tools.readHexString(buff, 0, buff.byteLength);\n    };\n    /**\n     * get an signed number from a buffer\n     * @static\n     * @param {Buffer} buff from which to read variable-length signed number\n     * @returns {number} result\n     */\n    Tools.readSigned = function (buff) {\n        var b = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        switch (buff.byteLength) {\n            case 1:\n                return b.getInt8(0);\n            case 2:\n                return b.getInt16(0);\n            case 4:\n                return b.getInt32(0);\n            default:\n                return NaN;\n        }\n    };\n    /**\n     * get an floating-point number from a buffer\n     * @static\n     * @param {Buffer} buff from which to read variable-length floating-point number\n     * @returns {number} result\n     */\n    Tools.readFloat = function (buff) {\n        var b = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        switch (buff.byteLength) {\n            case 4:\n                return b.getFloat32(0);\n            case 8:\n                return b.getFloat64(0);\n            default:\n                return NaN;\n        }\n    };\n    /**\n     * get a date from a buffer\n     * @static\n     * @param  {Buffer} buff from which to read the date\n     * @return {Date}      result\n     */\n    Tools.readDate = function (buff) {\n        var b = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        switch (buff.byteLength) {\n            case 1:\n                return new Date(b.getUint8(0));\n            case 2:\n                return new Date(b.getUint16(0));\n            case 4:\n                return new Date(b.getUint32(0));\n            case 8:\n                return new Date(Number.parseInt(Tools.readHexString(buff), 16));\n            default:\n                return new Date(0);\n        }\n    };\n    /**\n     * Reads the data from a tag\n     * @static\n     * @param  {TagData} tagObj The tag object to be read\n     * @param  {Buffer} data Data to be transformed\n     * @return {Tag} result\n     */\n    Tools.readDataFromTag = function (tagObj, data) {\n        var type = tagObj.type, name = tagObj.name;\n        var track = tagObj.track;\n        var discardable = tagObj.discardable || false;\n        var keyframe = tagObj.keyframe || false;\n        var payload = null;\n        var value;\n        switch (type) {\n            case 'u':\n                value = Tools.readUnsigned(data);\n                break;\n            case 'f':\n                value = Tools.readFloat(data);\n                break;\n            case 'i':\n                value = Tools.readSigned(data);\n                break;\n            case 's':\n                value = String.fromCharCode.apply(String, data);\n                break;\n            case '8':\n                value = Tools.readUtf8(data);\n                break;\n            case 'd':\n                value = Tools.readDate(data);\n                break;\n            default:\n                break;\n        }\n        if (name === 'SimpleBlock' || name === 'Block') {\n            var p = 0;\n            var _a = Tools.readVint(data, p), length_1 = _a.length, trak = _a.value;\n            p += length_1;\n            track = trak;\n            value = Tools.readSigned(data.subarray(p, p + 2));\n            p += 2;\n            if (name === 'SimpleBlock') {\n                keyframe = Boolean(data[length_1 + 2] & 0x80);\n                discardable = Boolean(data[length_1 + 2] & 0x01);\n            }\n            p += 1;\n            payload = data.subarray(p);\n        }\n        return __assign(__assign({}, tagObj), { data: data, discardable: discardable, keyframe: keyframe, payload: payload, track: track, value: value });\n    };\n    return Tools;\n}());\nexports.default = Tools;\n"],"names":["__assign","this","commonjsGlobal","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","pack","ar","l","Array","slice","concat","defineProperty","toolsEbml","__exports","value","tools_1","require$$0","Tools","readVint","buffer","start","Math","floor","log2","number","readHexString","Error","pow","writeVint","Buffer","alloc","val","b","concatenate","a1","a2","byteLength","buff","end","map","q","Number","toString","reduce","acc","current","padStart","readUtf8","exception","readUnsigned","DataView","byteOffset","getUint8","getUint16","getUint32","readSigned","getInt8","getInt16","getInt32","NaN","readFloat","getFloat32","getFloat64","readDate","Date","parseInt","readDataFromTag","tagObj","data","type","name","track","discardable","keyframe","payload","String","fromCharCode","_a","length_1","subarray","Boolean","default"],"mappings":"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"}