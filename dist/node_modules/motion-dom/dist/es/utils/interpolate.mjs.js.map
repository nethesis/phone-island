{"version":3,"file":"interpolate.mjs.js","sources":["../../../../../../node_modules/motion-dom/dist/es/utils/interpolate.mjs"],"sourcesContent":["import { invariant, clamp, MotionGlobalConfig, noop, pipe, progress } from 'motion-utils';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || MotionGlobalConfig.mix || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && output[0] === output[1])\n        return () => output[1];\n    const isZeroDeltaRange = input[0] === input[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        if (isZeroDeltaRange && v < input[0])\n            return output[0];\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n"],"names":["input","output","clamp","isClamp","ease","mixer","inputLength","length","invariant","isZeroDeltaRange","reverse","mixers","customMixer","mixerFactory","MotionGlobalConfig","mix","numMixers","i","easingFunction","Array","isArray","noop","pipe","push","createMixers","interpolator","v","progressInRange","progress"],"mappings":"weAoCA,SAAqBA,EAAOC,GAAUC,MAAOC,GAAU,EAAIC,KAAEA,EAAIC,MAAEA,GAAU,IACzE,MAAMC,EAAcN,EAAMO,OAM1B,GALAC,EAAAA,UAAUF,IAAgBL,EAAOM,OAAQ,wDAKrB,IAAhBD,EACA,MAAO,IAAML,EAAO,GACxB,GAAoB,IAAhBK,GAAqBL,EAAO,KAAOA,EAAO,GAC1C,MAAO,IAAMA,EAAO,GACxB,MAAMQ,EAAmBT,EAAM,KAAOA,EAAM,GAExCA,EAAM,GAAKA,EAAMM,EAAc,KAC/BN,EAAQ,IAAIA,GAAOU,UACnBT,EAAS,IAAIA,GAAQS,WAEzB,MAAMC,EAlDV,SAAsBV,EAAQG,EAAMQ,GAChC,MAAMD,EAAS,GACTE,EAAeD,GAAeE,qBAAmBC,KAAOA,EAAAA,IACxDC,EAAYf,EAAOM,OAAS,EAClC,IAAK,IAAIU,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAChC,IAAIZ,EAAQQ,EAAaZ,EAAOgB,GAAIhB,EAAOgB,EAAI,IAC/C,GAAIb,EAAM,CACN,MAAMc,EAAiBC,MAAMC,QAAQhB,GAAQA,EAAKa,IAAMI,EAAIA,KAAGjB,EAC/DC,EAAQiB,EAAIA,KAACJ,EAAgBb,EACjC,CACAM,EAAOY,KAAKlB,EAChB,CACA,OAAOM,CACX,CAqCmBa,CAAavB,EAAQG,EAAMC,GACpCW,EAAYL,EAAOJ,OACnBkB,EAAgBC,IAClB,GAAIjB,GAAoBiB,EAAI1B,EAAM,GAC9B,OAAOC,EAAO,GAClB,IAAIgB,EAAI,EACR,GAAID,EAAY,EACZ,KAAOC,EAAIjB,EAAMO,OAAS,KAClBmB,EAAI1B,EAAMiB,EAAI,IADOA,KAKjC,MAAMU,EAAkBC,WAAS5B,EAAMiB,GAAIjB,EAAMiB,EAAI,GAAIS,GACzD,OAAOf,EAAOM,GAAGU,EAAgB,EAErC,OAAOxB,EACAuB,GAAMD,EAAavB,EAAKA,MAACF,EAAM,GAAIA,EAAMM,EAAc,GAAIoB,IAC5DD,CACV"}