{"version":3,"file":"color.mjs.js","sources":["../../../../../../../node_modules/motion-dom/dist/es/utils/mix/color.mjs"],"sourcesContent":["import { warning } from 'motion-utils';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { hslaToRgba } from '../../value/types/color/hsla-to-rgba.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { mixImmediate } from './immediate.mjs';\nimport { mixNumber } from './number.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"names":["mixLinearColor","from","to","v","fromExpo","expo","Math","sqrt","colorTypes","hex","rgba","hsla","asRGBA","color","type","find","test","warning","Boolean","model","parse","hslaToRgba","mixColor","fromRGBA","toRGBA","mixImmediate","blended","red","green","blue","alpha","mixNumber","transform"],"mappings":"+YAWMA,MAAAA,EAAiBA,CAACC,EAAMC,EAAIC,KAC9B,MAAMC,EAAWH,EAAOA,EAClBI,EAAOF,GAAKD,EAAKA,EAAKE,GAAYA,EACxC,OAAOC,EAAO,EAAI,EAAIC,KAAKC,KAAKF,EAAK,EAEnCG,EAAa,CAACC,EAAAA,IAAKC,EAAIA,KAAEC,EAAIA,MAEnC,SAASC,EAAOC,GACZ,MAAMC,GAFYX,EAEQU,EAFFL,EAAWO,MAAMD,GAASA,EAAKE,KAAKb,MAA1CA,MAIlB,GADAc,EAAOA,QAACC,QAAQJ,GAAO,IAAID,0EACtBK,QAAQJ,GACT,OAAO,EACX,IAAIK,EAAQL,EAAKM,MAAMP,GAKvB,OAJIC,IAASH,EAAAA,OAETQ,EAAQE,EAAAA,WAAWF,IAEhBA,CACX,kBACiBG,CAACrB,EAAMC,KACpB,MAAMqB,EAAWX,EAAOX,GAClBuB,EAASZ,EAAOV,GACtB,IAAKqB,IAAaC,EACd,OAAOC,EAAYA,aAACxB,EAAMC,GAE9B,MAAMwB,EAAU,IAAKH,GACrB,OAAQpB,IACJuB,EAAQC,IAAM3B,EAAeuB,EAASI,IAAKH,EAAOG,IAAKxB,GACvDuB,EAAQE,MAAQ5B,EAAeuB,EAASK,MAAOJ,EAAOI,MAAOzB,GAC7DuB,EAAQG,KAAO7B,EAAeuB,EAASM,KAAML,EAAOK,KAAM1B,GAC1DuB,EAAQI,MAAQC,EAAAA,UAAUR,EAASO,MAAON,EAAOM,MAAO3B,GACjDO,EAAIA,KAACsB,UAAUN,GACzB"}