{"version":3,"file":"index.mjs.js","sources":["../../../../../../node_modules/motion-dom/dist/es/value/index.mjs"],"sourcesContent":["import { warnOnce, SubscriptionManager, velocityPerSecond } from 'motion-utils';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"12.9.1\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev) {\n                this.events.change?.notify(this.current);\n            }\n            // Update render subscribers\n            if (render) {\n                this.events.renderRequest?.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.events.destroy?.notify();\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"names":["MotionValue","constructor","init","options","this","version","canTrackVelocity","events","updateAndNotify","v","render","currentTime","time","now","updatedAt","setPrevFrameValue","prev","current","setCurrent","change","notify","renderRequest","hasAnimated","owner","value","undefined","isNaN","parseFloat","prevFrameValue","prevUpdatedAt","onChange","subscription","process","env","NODE_ENV","warnOnce","on","eventName","callback","SubscriptionManager","unsubscribe","add","frame","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","delta","jump","endAnimation","get","getPrevious","getVelocity","Math","min","velocityPerSecond","start","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy"],"mappings":"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"}