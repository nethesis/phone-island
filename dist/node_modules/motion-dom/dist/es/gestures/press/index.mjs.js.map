{"version":3,"file":"index.mjs.js","sources":["../../../../../../../node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(targetOrSelector, onPressStart, options = {}) {\n    const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\n    const startPress = (startEvent) => {\n        const target = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(target))\n            return;\n        isPressing.add(target);\n        const onPressEnd = onPressStart(target, startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(target)) {\n                return;\n            }\n            isPressing.delete(target);\n            if (typeof onPressEnd === \"function\") {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, target === window ||\n                target === document ||\n                options.useGlobalTarget ||\n                isNodeOrChild(target, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    targets.forEach((target) => {\n        const pointerDownTarget = options.useGlobalTarget ? window : target;\n        pointerDownTarget.addEventListener(\"pointerdown\", startPress, eventOptions);\n        if (target instanceof HTMLElement) {\n            target.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions));\n            if (!isElementKeyboardAccessible(target) &&\n                !target.hasAttribute(\"tabindex\")) {\n                target.tabIndex = 0;\n            }\n        }\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"],"names":["isValidPressEvent","event","isPrimaryPointer","isDragActive","targetOrSelector","onPressStart","options","targets","eventOptions","cancelEvents","setupGesture","startPress","startEvent","target","currentTarget","isPressing","has","add","onPressEnd","onPointerEnd","endEvent","success","window","removeEventListener","onPointerUp","onPointerCancel","delete","upEvent","document","useGlobalTarget","isNodeOrChild","cancelEvent","addEventListener","forEach","HTMLElement","enableKeyboardPress","isElementKeyboardAccessible","hasAttribute","tabIndex"],"mappings":"+WAYA,SAASA,EAAkBC,GACvB,OAAOC,mBAAiBD,KAAWE,EAAYA,cACnD,eAoBA,SAAeC,EAAkBC,EAAcC,EAAU,CAAA,GACrD,MAAOC,EAASC,EAAcC,GAAgBC,eAAaN,EAAkBE,GACvEK,EAAcC,IAChB,MAAMC,EAASD,EAAWE,cAC1B,IAAKd,EAAkBY,IAAeG,EAAUA,WAACC,IAAIH,GACjD,OACJE,aAAWE,IAAIJ,GACf,MAAMK,EAAab,EAAaQ,EAAQD,GAClCO,EAAeA,CAACC,EAAUC,KAC5BC,OAAOC,oBAAoB,YAAaC,GACxCF,OAAOC,oBAAoB,gBAAiBE,GACvCzB,EAAkBoB,IAAcL,EAAAA,WAAWC,IAAIH,KAGpDE,aAAWW,OAAOb,GACQ,mBAAfK,GACPA,EAAWE,EAAU,CAAEC,YAC3B,EAEEG,EAAeG,IACjBR,EAAaQ,EAASd,IAAWS,QAC7BT,IAAWe,UACXtB,EAAQuB,iBACRC,EAAAA,cAAcjB,EAAQc,EAAQd,QAAQ,EAExCY,EAAmBM,IACrBZ,EAAaY,GAAa,EAAM,EAEpCT,OAAOU,iBAAiB,YAAaR,EAAahB,GAClDc,OAAOU,iBAAiB,gBAAiBP,EAAiBjB,EAAa,EAa3E,OAXAD,EAAQ0B,SAASpB,KACaP,EAAQuB,gBAAkBP,OAAST,GAC3CmB,iBAAiB,cAAerB,EAAYH,GAC1DK,aAAkBqB,cAClBrB,EAAOmB,iBAAiB,SAAU/B,GAAUkC,EAAAA,oBAAoBlC,EAAOO,KAClE4B,EAA2BA,4BAACvB,IAC5BA,EAAOwB,aAAa,cACrBxB,EAAOyB,SAAW,GAE1B,IAEG7B,CACX"}