{"version":3,"file":"floating-ui.core.mjs.js","sources":["../../../../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n"],"names":["computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","getSideAxis","alignmentAxis","getAlignmentAxis","alignLength","getAxisLength","side","getSide","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","getAlignment","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","padding","evaluate","paddingObject","getPaddingObject","element","clippingClientRect","rectToClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","getSideOffsets","overflow","isAnySideFullyClipped","sides","some","getBoundingRect","minX","min","map","minY","max","name","fn","middlewareData","axis","length","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","clamp","shouldAddOffset","arrow","alignmentOffset","data","centerOffset","reset","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","alignment","allowedPlacements","placements","autoAlignment","detectOverflowOptions","placements$1","undefined","filter","getOppositeAlignmentPlacement","getPlacementList","currentIndex","autoPlacement","index","currentPlacement","alignmentSides","getAlignmentSides","isRTL","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","d","slice","reduce","acc","v","sort","a","b","resetPlacement","every","config","middleware","validMiddleware","Boolean","getElementRects","statefulPlacement","resetCount","i","nextX","nextY","initialPlacement","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","isBasePlacement","getOppositePlacement","getExpandedPlacements","push","getOppositeAxisPlacements","overflowsData","flip","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","nativeClientRects","Array","from","getClientRects","clientRects","sortedRects","groups","prevRect","getRectsByLine","fallback","resetRects","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","getOppositeAxis","mainAxisCoord","crossAxisCoord","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","includes","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","convertValueToCoords","limiter","maxSide","limitedCoords","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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"}