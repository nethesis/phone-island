{"version":3,"file":"with-selector.development.js","sources":["../../../../../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"],"sourcesContent":["/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\nvar shim = require('use-sync-external-store/shim');\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar useSyncExternalStore = shim.useSyncExternalStore;\n\n// for CommonJS interop.\n\nvar useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n  // Use this to track the rendered snapshot.\n  var instRef = useRef(null);\n  var inst;\n\n  if (instRef.current === null) {\n    inst = {\n      hasValue: false,\n      value: null\n    };\n    instRef.current = inst;\n  } else {\n    inst = instRef.current;\n  }\n\n  var _useMemo = useMemo(function () {\n    // Track the memoized state using closure variables that are local to this\n    // memoized instance of a getSnapshot function. Intentionally not using a\n    // useRef hook, because that state would be shared across all concurrent\n    // copies of the hook/component.\n    var hasMemo = false;\n    var memoizedSnapshot;\n    var memoizedSelection;\n\n    var memoizedSelector = function (nextSnapshot) {\n      if (!hasMemo) {\n        // The first time the hook is called, there is no memoized result.\n        hasMemo = true;\n        memoizedSnapshot = nextSnapshot;\n\n        var _nextSelection = selector(nextSnapshot);\n\n        if (isEqual !== undefined) {\n          // Even if the selector has changed, the currently rendered selection\n          // may be equal to the new selection. We should attempt to reuse the\n          // current value if possible, to preserve downstream memoizations.\n          if (inst.hasValue) {\n            var currentSelection = inst.value;\n\n            if (isEqual(currentSelection, _nextSelection)) {\n              memoizedSelection = currentSelection;\n              return currentSelection;\n            }\n          }\n        }\n\n        memoizedSelection = _nextSelection;\n        return _nextSelection;\n      } // We may be able to reuse the previous invocation's result.\n\n\n      // We may be able to reuse the previous invocation's result.\n      var prevSnapshot = memoizedSnapshot;\n      var prevSelection = memoizedSelection;\n\n      if (objectIs(prevSnapshot, nextSnapshot)) {\n        // The snapshot is the same as last time. Reuse the previous selection.\n        return prevSelection;\n      } // The snapshot has changed, so we need to compute a new selection.\n\n\n      // The snapshot has changed, so we need to compute a new selection.\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n\n      // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n        return prevSelection;\n      }\n\n      memoizedSnapshot = nextSnapshot;\n      memoizedSelection = nextSelection;\n      return nextSelection;\n    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n    // Assigning this to a constant so that Flow knows it can't change.\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n    var getSnapshotWithSelector = function () {\n      return memoizedSelector(getSnapshot());\n    };\n\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n      return memoizedSelector(maybeGetServerSnapshot());\n    };\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n      getSelection = _useMemo[0],\n      getServerSelection = _useMemo[1];\n\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n  useEffect(function () {\n    inst.hasValue = true;\n    inst.value = value;\n  }, [value]);\n  useDebugValue(value);\n  return value;\n}\n\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n"],"names":["process","env","NODE_ENV","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","Error","React","require$$0","shim","require$$1","objectIs","Object","is","x","y","useSyncExternalStore","useRef","useEffect","useMemo","useDebugValue","withSelector_development","__exports","useSyncExternalStoreWithSelector","subscribe","getSnapshot","getServerSnapshot","selector","isEqual","inst","instRef","current","hasValue","value","_useMemo","memoizedSnapshot","memoizedSelection","hasMemo","memoizedSelector","nextSnapshot","_nextSelection","undefined","currentSelection","prevSelection","nextSelection","maybeGetServerSnapshot","getSelection","getServerSelection","registerInternalModuleStop"],"mappings":";;;;;;;;;+CAY6B,eAAzBA,QAAQC,IAAIC,UACd,WAM0C,oBAAnCC,gCAEL,mBADKA,+BAA+BC,6BAGtCD,+BAA+BC,4BAA4B,IAAIC,OAEvD,IAAIC,EAAQC,EAAAA,QAClBC,EAAOC,EAAAA,KAAAA,QAWX,IAAIC,EAAgC,mBAAdC,OAAOC,GAAoBD,OAAOC,GALxD,SAAYC,EAAGC,GACb,OAAOD,IAAMC,IAAY,IAAND,GAAW,EAAIA,GAAM,EAAIC,IAAMD,GAAMA,GAAKC,GAAMA,CAErE,EAIIC,EAAuBP,EAAKO,qBAI5BC,EAASV,EAAMU,OACfC,EAAYX,EAAMW,UAClBC,EAAUZ,EAAMY,QAChBC,EAAgBb,EAAMa,cA2GcC,EAAAC,UAAAC,iCAzGxC,SAA0CC,EAAWC,EAAaC,EAAmBC,EAAUC,GAE7F,IACIC,EADAC,EAAUb,EAAO,MAGG,OAApBa,EAAQC,SACVF,EAAO,CACLG,UAAU,EACVC,MAAO,MAETH,EAAQC,QAAUF,GAElBA,EAAOC,EAAQC,QAGjB,IAAIG,EAAWf,GAAQ,WAKrB,IACIgB,EACAC,EAFAC,GAAU,EAIVC,EAAmB,SAAUC,GAC/B,IAAKF,EAAS,CAEZA,GAAU,EACVF,EAAmBI,EAEnB,IAAIC,EAAiBb,EAASY,GAE9B,QAAgBE,IAAZb,GAIEC,EAAKG,SAAU,CACjB,IAAIU,EAAmBb,EAAKI,MAE5B,GAAIL,EAAQc,EAAkBF,GAE5B,OADAJ,EAAoBM,EACbA,CAEV,CAIH,OADAN,EAAoBI,EACbA,CACR,CAID,IACIG,EAAgBP,EAEpB,GAAIzB,EAHewB,EAGQI,GAEzB,OAAOI,EAKT,IAAIC,EAAgBjB,EAASY,GAS7B,YAAgBE,IAAZb,GAAyBA,EAAQe,EAAeC,GAC3CD,GAGTR,EAAmBI,EACnBH,EAAoBQ,EACbA,EACb,EAIQC,OAA+CJ,IAAtBf,EAAkC,KAAOA,EAStE,MAAO,CAPuB,WAC5B,OAAOY,EAAiBb,MAGqC,OAA3BoB,OAAkCJ,EAAY,WAChF,OAAOH,EAAiBO,MAG3B,GAAE,CAACpB,EAAaC,EAAmBC,EAAUC,IAC1CkB,EAAeZ,EAAS,GACxBa,EAAqBb,EAAS,GAE9BD,EAAQjB,EAAqBQ,EAAWsB,EAAcC,GAM1D,OALA7B,GAAU,WACRW,EAAKG,UAAW,EAChBH,EAAKI,MAAQA,CACjB,GAAK,CAACA,IACJb,EAAca,GACPA,CACT,EAK4C,oBAAnC7B,gCAEL,mBADKA,+BAA+B4C,4BAGtC5C,+BAA+B4C,2BAA2B,IAAI1C,MAG7D,CAtJD"}