{"version":3,"file":"socket.js","sources":["../../../../../node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"],"names":["RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","Emitter","constructor","io","nsp","opts","super","this","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","withError","emitWithAck","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","responseArgs","shift","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","some","String","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"mappings":"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"}