{"version":3,"file":"use-motion-ref.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n"],"names":["visualState","visualElement","externalRef","useCallback","instance","onMount","mount","unmount","isRefObject","current"],"mappings":"8JAOA,SAAsBA,EAAaC,EAAeC,GAC9C,OAAOC,EAAAA,aAAaC,IACZA,GACAJ,EAAYK,SAAWL,EAAYK,QAAQD,GAE3CH,IACIG,EACAH,EAAcK,MAAMF,GAGpBH,EAAcM,WAGlBL,IAC2B,mBAAhBA,EACPA,EAAYE,GAEPI,EAAAA,YAAYN,KACjBA,EAAYO,QAAUL,GAE9B,GAOJ,CAACH,GACL"}