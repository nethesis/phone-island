{"version":3,"file":"use-visual-state.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"sourcesContent":["import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n"],"names":["makeLatestValues","props","context","presenceContext","scrapeMotionValues","values","motionValues","key","resolveMotionValue","initial","animate","isControllingVariants$1","isControllingVariants","isVariantNode$1","isVariantNode","inherit","undefined","isInitialAnimationBlocked","variantToSet","isAnimationControls","list","Array","isArray","i","length","resolved","resolveVariantFromProps","transitionEnd","transition","target","valueTarget","config","isStatic","useContext","MotionContext","PresenceContext","make","scrapeMotionValuesFromProps","createRenderState","latestValues","renderState","makeState","useConstant"],"mappings":"keAsBA,SAASA,EAAiBC,EAAOC,EAASC,EAAiBC,GACvD,MAAMC,EAAS,CAAA,EACTC,EAAeF,EAAmBH,EAAO,CAAE,GACjD,IAAK,MAAMM,KAAOD,EACdD,EAAOE,GAAOC,EAAAA,mBAAmBF,EAAaC,IAElD,IAAIE,QAAEA,EAAOC,QAAEA,GAAYT,EAC3B,MAAMU,EAA0BC,wBAAsBX,GAChDY,EAAkBC,gBAAcb,GAClCC,GACAW,IACCF,IACiB,IAAlBV,EAAMc,eACUC,IAAZP,IACAA,EAAUP,EAAQO,cACNO,IAAZN,IACAA,EAAUR,EAAQQ,UAE1B,IAAIO,IAA4Bd,IACE,IAA5BA,EAAgBM,QAEtBQ,EAA4BA,IAAyC,IAAZR,EACzD,MAAMS,EAAeD,EAA4BP,EAAUD,EAC3D,GAAIS,GACwB,kBAAjBA,IACNC,EAAAA,oBAAoBD,GAAe,CACpC,MAAME,EAAOC,MAAMC,QAAQJ,GAAgBA,EAAe,CAACA,GAC3D,IAAK,IAAIK,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CAClC,MAAME,EAAWC,EAAAA,wBAAwBzB,EAAOmB,EAAKG,IACrD,GAAIE,EAAU,CACV,MAAME,cAAEA,EAAaC,WAAEA,KAAeC,GAAWJ,EACjD,IAAK,MAAMlB,KAAOsB,EAAQ,CACtB,IAAIC,EAAcD,EAAOtB,GACzB,GAAIc,MAAMC,QAAQQ,GAAc,CAQ5BA,EAAcA,EAHAb,EACRa,EAAYN,OAAS,EACrB,EAEV,CACoB,OAAhBM,IACAzB,EAAOE,GAAOuB,EAEtB,CACA,IAAK,MAAMvB,KAAOoB,EACdtB,EAAOE,GAAOoB,EAAcpB,EAEpC,CACJ,CACJ,CACA,OAAOF,CACX,4BA5D4B0B,GAAW,CAAC9B,EAAO+B,KAC3C,MAAM9B,EAAU+B,aAAWC,EAAAA,eACrB/B,EAAkB8B,aAAWE,EAAAA,iBAC7BC,EAAOA,IAVjB,UAAmBC,4BAAEA,EAA2BC,kBAAEA,GAAsBrC,EAAOC,EAASC,GAKpF,MAJc,CACVoC,aAAcvC,EAAiBC,EAAOC,EAASC,EAAiBkC,GAChEG,YAAaF,IAGrB,CAIuBG,CAAUV,EAAQ9B,EAAOC,EAASC,GACrD,OAAO6B,EAAWI,IAASM,EAAWA,YAACN,EAAK"}