{"version":3,"file":"MeasureLayout.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs"],"sourcesContent":["\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n"],"names":["MeasureLayoutWithContext","Component","componentDidMount","visualElement","layoutGroup","switchLayoutGroup","layoutId","this","props","projection","addScaleCorrector","defaultScaleCorrectors","group","add","register","root","didUpdate","addEventListener","safeToRemove","setOptions","options","onExitComplete","globalProjectionState","hasEverUpdated","getSnapshotBeforeUpdate","prevProps","layoutDependency","drag","isPresent","undefined","willUpdate","promote","relegate","frame","postRender","stack","getStack","members","length","componentDidUpdate","microtask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","render","borderRadius","correctBorderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","correctBoxShadow","usePresence","useContext","LayoutGroupContext","jsx","SwitchLayoutGroupContext"],"mappings":"8wBAYA,MAAMA,UAAiCC,EAAAA,UAMnCC,iBAAAA,GACI,MAAMC,cAAEA,EAAaC,YAAEA,EAAWC,kBAAEA,EAAiBC,SAAEA,GAAaC,KAAKC,OACnEC,WAAEA,GAAeN,EACvBO,EAAiBA,kBAACC,GACdF,IACIL,EAAYQ,OACZR,EAAYQ,MAAMC,IAAIJ,GACtBJ,GAAqBA,EAAkBS,UAAYR,GACnDD,EAAkBS,SAASL,GAE/BA,EAAWM,KAAKC,YAChBP,EAAWQ,iBAAiB,qBAAqB,KAC7CV,KAAKW,cAAc,IAEvBT,EAAWU,WAAW,IACfV,EAAWW,QACdC,eAAgBA,IAAMd,KAAKW,kBAGnCI,EAAqBA,sBAACC,gBAAiB,CAC3C,CACAC,uBAAAA,CAAwBC,GACpB,MAAMC,iBAAEA,EAAgBvB,cAAEA,EAAawB,KAAEA,EAAIC,UAAEA,GAAcrB,KAAKC,MAC5DC,EAAaN,EAAcM,WACjC,OAAKA,GASLA,EAAWmB,UAAYA,EACnBD,GACAF,EAAUC,mBAAqBA,QACVG,IAArBH,GACAD,EAAUG,YAAcA,EACxBnB,EAAWqB,aAGXvB,KAAKW,eAELO,EAAUG,YAAcA,IACpBA,EACAnB,EAAWsB,UAELtB,EAAWuB,YAMjBC,EAAKA,MAACC,YAAW,KACb,MAAMC,EAAQ1B,EAAW2B,WACpBD,GAAUA,EAAME,QAAQC,QACzB/B,KAAKW,cACT,KAIL,MApCI,IAqCf,CACAqB,kBAAAA,GACI,MAAM9B,WAAEA,GAAeF,KAAKC,MAAML,cAC9BM,IACAA,EAAWM,KAAKC,YAChBwB,EAASA,UAACN,YAAW,MACZzB,EAAWgC,kBAAoBhC,EAAWiC,UAC3CnC,KAAKW,cACT,IAGZ,CACAyB,oBAAAA,GACI,MAAMxC,cAAEA,EAAaC,YAAEA,EAAaC,kBAAmBuC,GAAoBrC,KAAKC,OAC1EC,WAAEA,GAAeN,EACnBM,IACAA,EAAWoC,4BACPzC,GAAeA,EAAYQ,OAC3BR,EAAYQ,MAAMkC,OAAOrC,GACzBmC,GAAkBA,EAAeG,YACjCH,EAAeG,WAAWtC,GAEtC,CACAS,YAAAA,GACI,MAAMA,aAAEA,GAAiBX,KAAKC,MAC9BU,GAAgBA,GACpB,CACA8B,MAAAA,GACI,OAAO,IACX,EAOJ,MAAMrC,EAAyB,CAC3BsC,aAAc,IACPC,EAAmBA,oBACtBC,QAAS,CACL,sBACA,uBACA,yBACA,4BAGRC,oBAAqBF,EAAmBA,oBACxCG,qBAAsBH,EAAmBA,oBACzCI,uBAAwBJ,EAAmBA,oBAC3CK,wBAAyBL,EAAmBA,oBAC5CM,UAAWC,EAAAA,wCAnBf,SAAuBjD,GACnB,MAAOoB,EAAWV,GAAgBwC,EAAWA,cACvCtD,EAAcuD,aAAWC,EAAAA,oBAC/B,OAAQC,EAAAA,WAAAA,QAAAA,IAAI7D,EAA0B,IAAKQ,EAAOJ,YAAaA,EAAaC,kBAAmBsD,EAAUA,WAACG,4BAA2BlC,UAAWA,EAAWV,aAAcA,GAC7K"}