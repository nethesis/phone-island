{"version":3,"file":"build-transform.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"names":["translateAlias","x","y","z","transformPerspective","numTransforms","transformPropOrder","length","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","getValueAsType","numberValueTypes","trim"],"mappings":"qUAEA,MAAMA,EAAiB,CACnBC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,qBAAsB,eAEpBC,EAAgBC,EAAkBA,mBAACC,8BAOzC,SAAwBC,EAAcC,EAAWC,GAE7C,IAAIC,EAAkB,GAClBC,GAAqB,EAKzB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAeQ,IAAK,CACpC,MAAMC,EAAMR,qBAAmBO,GACzBE,EAAQP,EAAaM,GAC3B,QAAcE,IAAVD,EACA,SACJ,IAAIE,GAAiB,EAOrB,GALIA,EADiB,iBAAVF,EACUA,KAAWD,EAAII,WAAW,SAAW,EAAI,GAGnB,IAAtBC,WAAWJ,IAE3BE,GAAkBP,EAAmB,CACtC,MAAMU,EAAcC,EAAAA,eAAeN,EAAOO,EAAAA,iBAAiBR,IAC3D,IAAKG,EAAgB,CACjBL,GAAqB,EAErBD,GAAmB,GADGX,EAAec,IAAQA,KACNM,KAC3C,CACIV,IACAD,EAAUK,GAAOM,EAEzB,CACJ,CAUA,OATAT,EAAkBA,EAAgBY,OAG9Bb,EACAC,EAAkBD,EAAkBD,EAAWG,EAAqB,GAAKD,GAEpEC,IACLD,EAAkB,QAEfA,CACX"}