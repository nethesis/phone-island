{"version":3,"file":"build-styles.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"sourcesContent":["import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"],"names":["state","latestValues","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","key","value","transformProps","has","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","startsWith","transform","buildTransform","originX","originY","originZ"],"mappings":"4dAGA,SAAyBA,EAAOC,EAAcC,GAC1C,MAAMC,MAAEA,EAAKC,KAAEA,EAAIC,gBAAEA,GAAoBL,EAEzC,IAAIM,GAAe,EACfC,GAAqB,EAOzB,IAAK,MAAMC,KAAOP,EAAc,CAC5B,MAAMQ,EAAQR,EAAaO,GAC3B,GAAIE,EAAcA,eAACC,IAAIH,GAEnBF,GAAe,OAGd,GAAIM,EAAAA,kBAAkBJ,GACvBJ,EAAKI,GAAOC,MAGX,CAED,MAAMI,EAAcC,EAAAA,eAAeL,EAAOM,EAAAA,iBAAiBP,IACvDA,EAAIQ,WAAW,WAEfT,GAAqB,EACrBF,EAAgBG,GACZK,GAGJV,EAAMK,GAAOK,CAErB,CACJ,CAiBA,GAhBKZ,EAAagB,YACVX,GAAgBJ,EAChBC,EAAMc,UAAYC,iBAAejB,EAAcD,EAAMiB,UAAWf,GAE3DC,EAAMc,YAKXd,EAAMc,UAAY,SAOtBV,EAAoB,CACpB,MAAMY,QAAEA,EAAU,MAAKC,QAAEA,EAAU,MAAKC,QAAEA,EAAU,GAAOhB,EAC3DF,EAAME,gBAAkB,GAAGc,KAAWC,KAAWC,GACrD,CACJ"}