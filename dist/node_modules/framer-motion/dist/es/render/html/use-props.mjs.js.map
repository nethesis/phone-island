{"version":3,"file":"use-props.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/render/html/use-props.mjs"],"sourcesContent":["import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n"],"names":["copyRawValuesOnly","target","source","props","key","isMotionValue","isForcedMotionValue","useStyle","visualState","style","Object","assign","transformTemplate","useMemo","state","createHtmlRenderState","buildHTMLStyles","vars","useInitialMotionValues","htmlProps","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","undefined","tabIndex","onTap","onTapStart","whileTap"],"mappings":"wSAMA,SAASA,EAAkBC,EAAQC,EAAQC,GACvC,IAAK,MAAMC,KAAOF,EACTG,EAAAA,cAAcH,EAAOE,KAAUE,EAAmBA,oBAACF,EAAKD,KACzDF,EAAOG,GAAOF,EAAOE,GAGjC,CAQA,SAASG,EAASJ,EAAOK,GACrB,MACMC,EAAQ,CAAA,EAMd,OAFAT,EAAkBS,EALAN,EAAMM,OAAS,GAKGN,GACpCO,OAAOC,OAAOF,EAdlB,UAAgCG,kBAAEA,GAAqBJ,GACnD,OAAOK,EAAOA,SAAC,KACX,MAAMC,EAAQC,EAAAA,wBAEd,OADAC,EAAAA,gBAAgBF,EAAON,EAAaI,GAC7BF,OAAOC,OAAO,CAAE,EAAEG,EAAMG,KAAMH,EAAML,MAAM,GAClD,CAACD,GACR,CAQyBU,CAAuBf,EAAOK,IAC5CC,CACX,kDACA,SAAsBN,EAAOK,GAEzB,MAAMW,EAAY,CAAA,EACZV,EAAQF,EAASJ,EAAOK,GAoB9B,OAnBIL,EAAMiB,OAA+B,IAAvBjB,EAAMkB,eAEpBF,EAAUG,WAAY,EAEtBb,EAAMc,WACFd,EAAMe,iBACFf,EAAMgB,mBACF,OAEZhB,EAAMiB,aACa,IAAfvB,EAAMiB,KACA,OACA,QAAsB,MAAfjB,EAAMiB,KAAe,IAAM,WAEzBO,IAAnBxB,EAAMyB,WACLzB,EAAM0B,OAAS1B,EAAM2B,YAAc3B,EAAM4B,YAC1CZ,EAAUS,SAAW,GAEzBT,EAAUV,MAAQA,EACXU,CACX"}