{"version":3,"file":"build-attrs.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"],"names":["state","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","transformTemplate","buildHTMLStyles","style","viewBox","attrs","transform","transformOrigin","transformBox","undefined","x","y","scale","buildSVGPath"],"mappings":"2KAMA,SAAuBA,GAAOC,MAAEA,EAAKC,MAAEA,EAAKC,UAAEA,EAASC,WAAEA,EAAUC,YAAEA,EAAc,EAACC,WAAEA,EAAa,KAEhGC,GAAUC,EAAUC,GAMnB,GALAC,EAAAA,gBAAgBV,EAAOO,EAAQE,GAK3BD,EAIA,YAHIR,EAAMW,MAAMC,UACZZ,EAAMa,MAAMD,QAAUZ,EAAMW,MAAMC,UAI1CZ,EAAMa,MAAQb,EAAMW,MACpBX,EAAMW,MAAQ,GACd,MAAME,MAAEA,EAAKF,MAAEA,GAAUX,EAKrBa,EAAMC,YACNH,EAAMG,UAAYD,EAAMC,iBACjBD,EAAMC,YAEbH,EAAMG,WAAaD,EAAME,mBACzBJ,EAAMI,gBAAkBF,EAAME,iBAAmB,iBAC1CF,EAAME,iBAEbJ,EAAMG,YAKNH,EAAMK,aAAe,kBACdH,EAAMG,mBAGHC,IAAVhB,IACAY,EAAMK,EAAIjB,QACAgB,IAAVf,IACAW,EAAMM,EAAIjB,QACIe,IAAdd,IACAU,EAAMO,MAAQjB,QAECc,IAAfb,GACAiB,EAAYA,aAACR,EAAOT,EAAYC,EAAaC,GAAY,EAEjE"}