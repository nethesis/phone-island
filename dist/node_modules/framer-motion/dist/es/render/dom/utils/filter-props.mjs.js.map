{"version":3,"file":"filter-props.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs"],"sourcesContent":["import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n"],"names":["shouldForward","key","isValidMotionProp","loadExternalIsValidProp","isValidProp","startsWith","require","default","props","isDom","forwardMotionProps","filteredProps","values"],"mappings":"6HAEA,IAAIA,EAAiBC,IAASC,EAAiBA,kBAACD,GAChD,SAASE,EAAwBC,GACxBA,IAGLJ,EAAiBC,GAAQA,EAAII,WAAW,OAASH,EAAAA,kBAAkBD,GAAOG,EAAYH,GAC1F,CAcA,IAMIE,EAAwBG,QAAQ,0BAA0BC,QAC9D,CACA,MACI,qBAEJ,SAAqBC,EAAOC,EAAOC,GAC/B,MAAMC,EAAgB,CAAA,EACtB,IAAK,MAAMV,KAAOO,EAQF,WAARP,GAA4C,iBAAjBO,EAAMI,SAEjCZ,EAAcC,KACU,IAAvBS,GAA+BR,EAAAA,kBAAkBD,KAChDQ,IAAUP,EAAAA,kBAAkBD,IAE7BO,EAAiB,WACdP,EAAII,WAAW,aACnBM,EAAcV,GACVO,EAAMP,IAGlB,OAAOU,CACX"}