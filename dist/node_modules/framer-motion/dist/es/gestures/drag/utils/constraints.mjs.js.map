{"version":3,"file":"constraints.mjs.js","sources":["../../../../../../../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs"],"sourcesContent":["import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n"],"names":["calcRelativeAxisConstraints","axis","min","max","undefined","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","point","elastic","mixNumber","Math","source","target","origin","sourceLength","calcLength","targetLength","progress","clamp","layoutBox","top","left","bottom","right","x","y","constraintsBox","layout","constraints","relativeConstraints"],"mappings":"mVA6BA,SAASA,EAA4BC,EAAMC,EAAKC,GAC5C,MAAO,CACHD,SAAaE,IAARF,EAAoBD,EAAKC,IAAMA,OAAME,EAC1CD,SAAaC,IAARD,EACCF,EAAKE,IAAMA,GAAOF,EAAKE,IAAMF,EAAKC,UAClCE,EAEd,CAcA,SAASC,EAA4BC,EAAYC,GAC7C,IAAIL,EAAMK,EAAgBL,IAAMI,EAAWJ,IACvCC,EAAMI,EAAgBJ,IAAMG,EAAWH,IAO3C,OAJII,EAAgBJ,IAAMI,EAAgBL,IACtCI,EAAWH,IAAMG,EAAWJ,OAC3BA,EAAKC,GAAO,CAACA,EAAKD,IAEhB,CAAEA,MAAKC,MAClB,CAuCMK,MAAAA,EAAiB,IAgBvB,SAASC,EAAmBC,EAAaC,EAAUC,GAC/C,MAAO,CACHV,IAAKW,EAAoBH,EAAaC,GACtCR,IAAKU,EAAoBH,EAAaE,GAE9C,CACA,SAASC,EAAoBH,EAAaI,GACtC,MAA8B,iBAAhBJ,EACRA,EACAA,EAAYI,IAAU,CAChC,0BApHA,SAA0BC,GAAOb,IAAEA,EAAGC,IAAEA,GAAOa,GAa3C,YAZYZ,IAARF,GAAqBa,EAAQb,EAE7Ba,EAAQC,EACFC,YAAUf,EAAKa,EAAOC,EAAQd,KAC9BgB,KAAKf,IAAIY,EAAOb,QAETE,IAARD,GAAqBY,EAAQZ,IAElCY,EAAQC,EACFC,YAAUd,EAAKY,EAAOC,EAAQb,KAC9Be,KAAKhB,IAAIa,EAAOZ,IAEnBY,CACX,qBAmDA,SAAoBI,EAAQC,GACxB,IAAIC,EAAS,GACb,MAAMC,EAAeC,aAAWJ,GAC1BK,EAAeD,aAAWH,GAOhC,OANII,EAAeF,EACfD,EAASI,EAAAA,SAASL,EAAOlB,IAAKkB,EAAOjB,IAAMmB,EAAcH,EAAOjB,KAE3DoB,EAAeE,IACpBH,EAASI,EAAAA,SAASN,EAAOjB,IAAKiB,EAAOhB,IAAMqB,EAAcJ,EAAOlB,MAE7DwB,QAAM,EAAG,EAAGL,EACvB,wEA5CA,SAAiCM,GAAWC,IAAEA,EAAGC,KAAEA,EAAIC,OAAEA,EAAMC,MAAEA,IAC7D,MAAO,CACHC,EAAGhC,EAA4B2B,EAAUK,EAAGH,EAAME,GAClDE,EAAGjC,EAA4B2B,EAAUM,EAAGL,EAAKE,GAEzD,wEAkBA,SAAiCH,EAAWO,GACxC,MAAO,CACHF,EAAG3B,EAA4BsB,EAAUK,EAAGE,EAAeF,GAC3DC,EAAG5B,EAA4BsB,EAAUM,EAAGC,EAAeD,GAEnE,yDAoBA,SAA+BE,EAAQC,GACnC,MAAMC,EAAsB,CAAA,EAO5B,YANwBjC,IAApBgC,EAAYlC,MACZmC,EAAoBnC,IAAMkC,EAAYlC,IAAMiC,EAAOjC,UAE/BE,IAApBgC,EAAYjC,MACZkC,EAAoBlC,IAAMiC,EAAYjC,IAAMgC,EAAOjC,KAEhDmC,CACX,0DAKA,SAA4B3B,EAAcF,KAOtC,OANoB,IAAhBE,EACAA,EAAc,GAEO,IAAhBA,IACLA,EAAcF,GAEX,CACHwB,EAAGvB,EAAmBC,EAAa,OAAQ,SAC3CuB,EAAGxB,EAAmBC,EAAa,MAAO,UAElD"}