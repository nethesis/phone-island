{"version":3,"file":"stack.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"names":["constructor","this","members","add","node","addUniqueItem","scheduleRender","remove","removeItem","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","resumingFrom","onExitComplete","removeLeadSnapshot"],"mappings":"wJAEA,MACIA,WAAAA,GACIC,KAAKC,QAAU,EACnB,CACAC,GAAAA,CAAIC,GACAC,EAAAA,cAAcJ,KAAKC,QAASE,GAC5BA,EAAKE,gBACT,CACAC,MAAAA,CAAOH,GAKH,GAJAI,EAAAA,WAAWP,KAAKC,QAASE,GACrBA,IAASH,KAAKQ,WACdR,KAAKQ,cAAWC,GAEhBN,IAASH,KAAKU,KAAM,CACpB,MAAMF,EAAWR,KAAKC,QAAQD,KAAKC,QAAQU,OAAS,GAChDH,GACAR,KAAKY,QAAQJ,EAErB,CACJ,CACAK,QAAAA,CAASV,GACL,MAAMW,EAAcd,KAAKC,QAAQc,WAAWC,GAAWb,IAASa,IAChE,GAAoB,IAAhBF,EACA,OAAO,EAIX,IAAIN,EACJ,IAAK,IAAIS,EAAIH,EAAaG,GAAK,EAAGA,IAAK,CACnC,MAAMD,EAAShB,KAAKC,QAAQgB,GAC5B,IAAyB,IAArBD,EAAOE,UAAqB,CAC5BV,EAAWQ,EACX,KACJ,CACJ,CACA,QAAIR,IACAR,KAAKY,QAAQJ,IACN,EAKf,CACAI,OAAAA,CAAQT,EAAMgB,GACV,MAAMX,EAAWR,KAAKU,KACtB,GAAIP,IAASK,IAEbR,KAAKQ,SAAWA,EAChBR,KAAKU,KAAOP,EACZA,EAAKiB,OACDZ,GAAU,CACVA,EAASa,UAAYb,EAASH,iBAC9BF,EAAKE,iBACLF,EAAKmB,WAAad,EACdW,IACAhB,EAAKmB,WAAWC,iBAAkB,GAElCf,EAASgB,WACTrB,EAAKqB,SAAWhB,EAASgB,SACzBrB,EAAKqB,SAASC,aACVjB,EAASkB,iBAAmBlB,EAASiB,cAEzCtB,EAAKwB,MAAQxB,EAAKwB,KAAKC,aACvBzB,EAAK0B,eAAgB,GAEzB,MAAMC,UAAEA,GAAc3B,EAAK4B,SACT,IAAdD,GACAtB,EAASwB,MAcjB,CACJ,CACAC,qBAAAA,GACIjC,KAAKC,QAAQiC,SAAS/B,IAClB,MAAM4B,QAAEA,EAAOI,aAAEA,GAAiBhC,EAClC4B,EAAQK,gBAAkBL,EAAQK,iBAC9BD,GACAA,EAAaJ,QAAQK,gBACjBD,EAAaJ,QAAQK,gBAC7B,GAER,CACA/B,cAAAA,GACIL,KAAKC,QAAQiC,SAAS/B,IAClBA,EAAKkB,UAAYlB,EAAKE,gBAAe,EAAM,GAEnD,CAKAgC,kBAAAA,GACQrC,KAAKU,MAAQV,KAAKU,KAAKc,WACvBxB,KAAKU,KAAKc,cAAWf,EAE7B"}