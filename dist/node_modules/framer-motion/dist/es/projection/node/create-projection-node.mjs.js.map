{"version":3,"file":"create-projection-node.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { statsBuffer, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"names":["transformAxes","hiddenVisibility","visibility","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","getOptimisedAppearId","window","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","frame","parent","updateLayout","node","notifyLayoutUpdate","snapshot","resumeFrom","isLead","hasListeners","layoutBox","measuredBox","measuredLayout","animationType","isShared","source","eachAxis","axis","axisSnapshot","length","calcLength","min","max","shouldAnimatePositionOnly","relativeTarget","currentAnimation","isProjectionDirty","layoutDelta","createDelta","calcBoxDelta","visualDelta","applyTransform","hasLayoutChanged","isDeltaZero","hasRelativeLayoutChanged","relativeParent","getClosestProjectingParent","parentSnapshot","parentLayout","relativeSnapshot","createBox","calcRelativePosition","relativeLayout","boxEqualsRounded","layoutRoot","relativeTargetOrigin","notifyListeners","delta","onExitComplete","transition","undefined","propagateDirtyNodes","isProjecting","isSharedProjectionDirty","Boolean","isTransformDirty","cleanDirtyNodes","clearSnapshot","clearMeasurements","clearIsLayoutDirty","isLayoutDirty","resetTransformStyle","getProps","onBeforeLayoutMeasure","notify","resetTransform","finishAnimation","targetDelta","target","resolveTargetDelta","calcProjection","resetSkewAndRotation","removeLeadSnapshots","stack","removeLeadSnapshot","mixAxisDelta","output","p","translate","mixNumber","scale","origin","originPoint","mixAxis","from","to","mixBox","x","y","hasOpacityCrossfade","animationValues","opacityExit","defaultLayoutTransition","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","noop","roundAxis","isNear","aspectRatio","checkNodeWasScrollRoot","scroll","wasRoot","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","constructor","this","animationId","children","Set","isTreeAnimating","isAnimationBlocked","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","FlatTree","addEventListener","name","handler","has","set","SubscriptionManager","get","add","args","subscriptionManager","mount","instance","isSVGElement","current","cancelDelay","resizeUnblockUpdate","delay","globalProjectionState","hasAnimatedSinceResize","registerSharedNode","animate","newLayout","isTreeAnimationBlocked","layoutTransition","getDefaultTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumingFrom","setAnimationOrigin","animationOptions","getValueTransition","onPlay","onComplete","shouldReduceMotion","type","startAnimation","unmount","willUpdate","remove","getStack","delete","cancelFrame","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","getTransformTemplate","transformTemplate","shouldNotifyListeners","updateScroll","prevTransformTemplateValue","updateSnapshot","now","time","frameData","clamp","timestamp","isProcessing","frameSteps","process","preRender","render","didUpdate","microtask","read","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","phase","needsMeasurement","layoutScroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","hasTransform","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","box","measureViewportBox","some","translateAxis","boxWithoutScroll","copyBoxInto","transformOnly","withTransforms","transformBox","boxWithoutTransform","hasScale","sourceBox","nodeBox","removeBoxTransforms","setTargetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","forceRecalculation","lead","getLead","attemptToResolveRelativeTarget","targetWithTransforms","calcRelativeBox","applyBoxDelta","has2DTranslate","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","prevProjectionDelta","copyAxisDeltaInto","createProjectionDeltas","axisDeltaEquals","hide","show","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","prevRelativeTarget","mixTargetDelta","latest","progress","boxEquals","mixValues","stop","activeAnimations","animateSingleValue","onUpdate","onStop","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","xLength","yLength","NodeStack","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","getProjectionStyles","styleProp","styles","opacity","pointerEvents","resolveMotionValue","transform","emptyStyles","valuesToRender","buildProjectionTransform","transformOrigin","scaleCorrectors","correct","applyTo","isCSSVariable","corrected","num","renderState","vars","resetTree","clear"],"mappings":"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"}