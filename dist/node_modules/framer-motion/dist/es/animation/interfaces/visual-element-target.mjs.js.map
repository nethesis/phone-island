{"version":3,"file":"visual-element-target.mjs.js","sources":["../../../../../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"names":["shouldBlockAnimation","protectedKeys","needsAnimating","key","shouldBlock","hasOwnProperty","visualElement","targetAndTransition","delay","transitionOverride","type","transition","getDefaultTransition","transitionEnd","target","animations","animationTypeState","animationState","getState","value","getValue","latestValues","valueTarget","undefined","valueTransition","getValueTransition","currentValue","get","isAnimating","Array","isArray","velocity","isHandoff","window","MotionHandoffAnimation","appearId","getOptimisedAppearId","startTime","frame","addValueToWillChange","start","animateMotionValue","shouldReduceMotion","positionalKeys","has","animation","push","Promise","all","then","update","setTarget"],"mappings":"kgBAYA,SAASA,GAAqBC,cAAEA,EAAaC,eAAEA,GAAkBC,GAC7D,MAAMC,EAAcH,EAAcI,eAAeF,KAAgC,IAAxBD,EAAeC,GAExE,OADAD,EAAeC,IAAO,EACfC,CACX,uBACA,SAAuBE,EAAeC,GAAqBC,MAAEA,EAAQ,EAACC,mBAAEA,EAAkBC,KAAEA,GAAS,IACjG,IAAIC,WAAEA,EAAaL,EAAcM,uBAAsBC,cAAEA,KAAkBC,GAAWP,EAClFE,IACAE,EAAaF,GACjB,MAAMM,EAAa,GACbC,EAAqBN,GACvBJ,EAAcW,gBACdX,EAAcW,eAAeC,WAAWR,GAC5C,IAAK,MAAMP,KAAOW,EAAQ,CACtB,MAAMK,EAAQb,EAAcc,SAASjB,EAAKG,EAAce,aAAalB,IAAQ,MACvEmB,EAAcR,EAAOX,GAC3B,QAAoBoB,IAAhBD,GACCN,GACGhB,EAAqBgB,EAAoBb,GAC7C,SAEJ,MAAMqB,EAAkB,CACpBhB,WACGiB,qBAAmBd,GAAc,CAAE,EAAER,IAKtCuB,EAAeP,EAAMQ,MAC3B,QAAqBJ,IAAjBG,IACCP,EAAMS,cACNC,MAAMC,QAAQR,IACfA,IAAgBI,IACfF,EAAgBO,SACjB,SAMJ,IAAIC,GAAY,EAChB,GAAIC,OAAOC,uBAAwB,CAC/B,MAAMC,EAAWC,uBAAqB9B,GACtC,GAAI6B,EAAU,CACV,MAAME,EAAYJ,OAAOC,uBAAuBC,EAAUhC,EAAKmC,EAAAA,OAC7C,OAAdD,IACAb,EAAgBa,UAAYA,EAC5BL,GAAY,EAEpB,CACJ,CACAO,uBAAqBjC,EAAeH,GACpCgB,EAAMqB,MAAMC,qBAAmBtC,EAAKgB,EAAOG,EAAahB,EAAcoC,oBAAsBC,EAAAA,eAAeC,IAAIzC,GACzG,CAAEO,MAAM,GACRc,EAAiBlB,EAAe0B,IACtC,MAAMa,EAAY1B,EAAM0B,UACpBA,GACA9B,EAAW+B,KAAKD,EAExB,CAQA,OAPIhC,GACAkC,QAAQC,IAAIjC,GAAYkC,MAAK,KACzBX,EAAKA,MAACY,QAAO,KACTrC,GAAiBsC,EAASA,UAAC7C,EAAeO,EAAc,GAC1D,IAGHE,CACX"}