{"version":3,"file":"index.js","sources":["../../../../node_modules/reselect/es/index.js"],"sourcesContent":["import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};"],"names":["createSelectorCreator","memoize","_len","arguments","length","memoizeOptionsFromArgs","Array","_key","_len2","funcs","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","undefined","resultFunc","pop","Error","_directlyPassedOption2","finalMemoizeOptions","isArray","dependencies","every","dep","dependencyTypes","map","name","join","getDependencies","memoizedResultFunc","apply","concat","selector","params","i","push","Object","assign","lastResult","recomputations","resetRecomputations","createSelector","defaultMemoize","selectors","selectorCreator","objectKeys","keys","resultSelector","key","_len3","values","_key3","reduce","composition","value","index"],"mappings":"yGAkBO,SAASA,EAAsBC,GACpC,IAAK,IAAIC,EAAOC,UAAUC,OAAQC,EAAyB,IAAIC,MAAMJ,EAAO,EAAIA,EAAO,EAAI,GAAIK,EAAO,EAAGA,EAAOL,EAAMK,IACpHF,EAAuBE,EAAO,GAAKJ,UAAUI,GAiF/C,OA9EqB,WACnB,IAAK,IAAIC,EAAQL,UAAUC,OAAQK,EAAQ,IAAIH,MAAME,GAAQE,EAAQ,EAAGA,EAAQF,EAAOE,IACrFD,EAAMC,GAASP,UAAUO,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBC,GAGdC,EAAaP,EAAMQ,MAQvB,GAN0B,iBAAfD,IACTH,EAAwBG,EAExBA,EAAaP,EAAMQ,OAGK,mBAAfD,EACT,MAAM,IAAIE,MAAM,qFAAuFF,EAAa,KAKtH,IACIG,EADwBN,EACuBC,eAC/CA,OAA4C,IAA3BK,EAAoCd,EAAyBc,EAM9EC,EAAsBd,MAAMe,QAAQP,GAAkBA,EAAiB,CAACA,GACxEQ,EA3DR,SAAyBb,GACvB,IAAIa,EAAehB,MAAMe,QAAQZ,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKa,EAAaC,OAAM,SAAUC,GAChC,MAAsB,mBAARA,CAChB,IAAI,CACF,IAAIC,EAAkBH,EAAaI,KAAI,SAAUF,GAC/C,MAAsB,mBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC3F,IAAGI,KAAK,MACR,MAAM,IAAIV,MAAM,kGAAoGO,EAAkB,IACxI,CAEA,OAAOH,CACT,CA8CuBO,CAAgBpB,GAC/BqB,EAAqB7B,EAAQ8B,WAAM,EAAQ,CAAC,WAG9C,OAFAnB,IAEOI,EAAWe,MAAM,KAAM5B,aAC7B6B,OAAOZ,IAENa,EAAWhC,GAAQ,WAIrB,IAHA,IAAIiC,EAAS,GACT9B,EAASkB,EAAalB,OAEjB+B,EAAI,EAAGA,EAAI/B,EAAQ+B,IAG1BD,EAAOE,KAAKd,EAAaa,GAAGJ,MAAM,KAAM5B,YAK1C,OADAQ,EAAcmB,EAAmBC,MAAM,KAAMG,EAE/C,IAeA,OAdAG,OAAOC,OAAOL,EAAU,CACtBjB,WAAYA,EACZc,mBAAoBA,EACpBR,aAAcA,EACdiB,WAAY,WACV,OAAO5B,CACR,EACD6B,eAAgB,WACd,OAAO5B,CACR,EACD6B,oBAAqB,WACnB,OAAO7B,EAAkB,CAC3B,IAEKqB,CACT,CAIF,KACWS,EAAgC1C,EAAsB2C,wMAE3B,SAAkCC,EAAWC,GAKjF,QAJwB,IAApBA,IACFA,EAAkBH,GAGK,iBAAdE,EACT,MAAM,IAAI1B,MAAM,gIAAwI0B,GAG1J,IAAIE,EAAaT,OAAOU,KAAKH,GACzBI,EAAiBH,EACrBC,EAAWpB,KAAI,SAAUuB,GACvB,OAAOL,EAAUK,EAClB,KAAG,WACF,IAAK,IAAIC,EAAQ/C,UAAUC,OAAQ+C,EAAS,IAAI7C,MAAM4C,GAAQE,EAAQ,EAAGA,EAAQF,EAAOE,IACtFD,EAAOC,GAASjD,UAAUiD,GAG5B,OAAOD,EAAOE,QAAO,SAAUC,EAAaC,EAAOC,GAEjD,OADAF,EAAYR,EAAWU,IAAUD,EAC1BD,CACR,GAAE,CAAE,EACP,IACA,OAAON,CACT"}