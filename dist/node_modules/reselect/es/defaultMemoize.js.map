{"version":3,"file":"defaultMemoize.js","sources":["../../../../node_modules/reselect/es/defaultMemoize.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","createCacheKeyComparator","equalityCheck","prev","next","length","i","func","equalityCheckOrOptions","equals","entry","providedOptions","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","cache","get","key","value","put","getEntries","clear","undefined","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache"],"mappings":"oEAEA,IAAIA,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACf,EACO,SAASC,EAAyBC,GACvC,OAAO,SAAoCC,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKJ,EAAcC,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,EAEX,0FAGO,SAAwBC,EAAMC,GACnC,IAtG4BC,EACxBC,EAqGAC,EAAoD,iBAA3BH,EAAsCA,EAAyB,CAC1FN,cAAeM,GAEbI,EAAwBD,EAAgBT,cACxCA,OAA0C,IAA1BU,EAAmCd,EAAuBc,EAC1EC,EAAwBF,EAAgBG,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBJ,EAAgBI,oBACtCC,EAAaf,EAAyBC,GACtCe,EAAoB,IAAZH,GA/GgBL,EA+GqBO,EA7G1C,CACLE,IAAK,SAAaC,GAChB,OAAIT,GAASD,EAAOC,EAAMS,IAAKA,GACtBT,EAAMU,MAGRvB,CACR,EACDwB,IAAK,SAAaF,EAAKC,GACrBV,EAAQ,CACNS,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOZ,EAAQ,CAACA,GAAS,EAC1B,EACDa,MAAO,WACLb,OAAQc,CACV,IAIJ,SAAwBV,EAASL,GAC/B,IAAIgB,EAAU,GAEd,SAASP,EAAIC,GACX,IAAIO,EAAaD,EAAQE,WAAU,SAAUjB,GAC3C,OAAOD,EAAOU,EAAKT,EAAMS,QAG3B,GAAIO,GAAc,EAAG,CACnB,IAAIhB,EAAQe,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQnB,IAGXA,EAAMU,KACd,CAGD,OAAOvB,CACT,CAwBA,MAAO,CACLqB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAAStB,IAEf4B,EAAQI,QAAQ,CACdV,IAAKA,EACLC,MAAOA,IAGLK,EAAQpB,OAASS,GACnBW,EAAQK,MAGd,EAaER,WAXF,WACE,OAAOG,CACT,EAUEF,MARF,WACEE,EAAU,EACZ,EAQF,CAmCiEM,CAAejB,EAASE,GAEvF,SAASgB,IACP,IAAIZ,EAAQH,EAAMC,IAAIe,WAEtB,GAAIb,IAAUvB,EAAW,CAIvB,GAFAuB,EAAQb,EAAK2B,MAAM,KAAMD,WAErBlB,EAAqB,CACvB,IACIoB,EADUlB,EAAMK,aACQc,MAAK,SAAU1B,GACzC,OAAOK,EAAoBL,EAAMU,MAAOA,EAC1C,IAEIe,IACFf,EAAQe,EAAcf,MAE1B,CAEAH,EAAMI,IAAIY,UAAWb,EACvB,CAEA,OAAOA,CACT,CAMA,OAJAY,EAASK,WAAa,WACpB,OAAOpB,EAAMM,SAGRS,CACT"}