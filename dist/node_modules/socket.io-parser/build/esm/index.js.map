{"version":3,"file":"index.js","sources":["../../../../../node_modules/socket.io-parser/build/esm/index.js"],"sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"names":["RESERVED_EVENTS","PacketType","isObject","value","Object","prototype","toString","call","Decoder","Emitter","constructor","reviver","super","this","add","obj","packet","reconstructor","Error","decodeString","isBinaryEvent","type","BINARY_EVENT","BINARY_ACK","EVENT","ACK","BinaryReconstructor","attachments","emitReserved","isBinary","base64","takeBinaryData","str","i","p","Number","charAt","undefined","start","length","buf","substring","nsp","next","c","id","payload","tryParse","substr","isPayloadValid","data","JSON","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","indexOf","destroy","finishedReconstruction","buffers","reconPack","binData","push","reconstructPacket","replacer","encode","hasBinary","encodeAsString","encodeAsBinary","stringify","deconstruction","deconstructPacket","pack","unshift"],"mappings":"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"}