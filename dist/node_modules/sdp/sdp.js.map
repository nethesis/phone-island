{"version":3,"file":"sdp.js","sources":["../../../node_modules/sdp/sdp.js"],"sourcesContent":["/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n"],"names":["SDPUtils","Math","random","toString","substring","localCName","generateIdentifier","splitLines","blob","trim","split","map","line","splitSections","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","parts","candidate","foundation","component","protocol","toLowerCase","priority","parseInt","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","undefined","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","id","direction","uri","attributes","slice","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","profile","rtpmapline","fmtps","wildcardRtcpFb","find","existingFeedback","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","stream","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","media","sctp","output","generateSessionId","substr","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports"],"mappings":"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"}