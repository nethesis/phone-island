{"version":3,"file":"websocket.js","sources":["../../../../../../node_modules/engine.io-client/build/esm/transports/websocket.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n"],"names":["isReactNative","navigator","product","toLowerCase","WS","Transport","constructor","opts","super","this","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","pick","extraHeaders","headers","ws","usingBrowserWebSocket","WebSocket","err","emitReserved","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onClose","description","context","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","i","length","packet","lastPacket","encodePacket","send","nextTick","setTimeoutFn","doClose","close","schema","secure","query","timestampRequests","timestampParam","yeast","b64","createUri"],"mappings":"uaAMA,MAAMA,EAAqC,oBAAdC,WACI,iBAAtBA,UAAUC,SACmB,gBAApCD,UAAUC,QAAQC,cACf,MAAMC,UAAWC,EAAAA,UAOpBC,WAAAA,CAAYC,GACRC,MAAMD,GACNE,KAAKC,gBAAkBH,EAAKI,WAChC,CACA,QAAIC,GACA,MAAO,WACX,CACAC,MAAAA,GACI,IAAKJ,KAAKK,QAEN,OAEJ,MAAMC,EAAMN,KAAKM,MACXC,EAAYP,KAAKF,KAAKS,UAEtBT,EAAOP,EACP,CAAA,EACAiB,EAAIA,KAACR,KAAKF,KAAM,QAAS,oBAAqB,MAAO,MAAO,aAAc,OAAQ,KAAM,UAAW,qBAAsB,eAAgB,kBAAmB,SAAU,aAAc,SAAU,uBAChME,KAAKF,KAAKW,eACVX,EAAKY,QAAUV,KAAKF,KAAKW,cAE7B,IACIT,KAAKW,GACDC,0BAA0BrB,EACpBgB,EACI,IAAIM,EAASA,UAACP,EAAKC,GACnB,IAAIM,EAAAA,UAAUP,GAClB,IAAIO,EAASA,UAACP,EAAKC,EAAWT,EAC3C,CACD,MAAOgB,GACH,OAAOd,KAAKe,aAAa,QAASD,EACtC,CACAd,KAAKW,GAAGK,WAAahB,KAAKiB,OAAOD,WACjChB,KAAKkB,mBACT,CAMAA,iBAAAA,GACIlB,KAAKW,GAAGQ,OAAS,KACTnB,KAAKF,KAAKsB,WACVpB,KAAKW,GAAGU,QAAQC,QAEpBtB,KAAKuB,QAAQ,EAEjBvB,KAAKW,GAAGa,QAAWC,GAAezB,KAAK0B,QAAQ,CAC3CC,YAAa,8BACbC,QAASH,IAEbzB,KAAKW,GAAGkB,UAAaC,GAAO9B,KAAK+B,OAAOD,EAAGE,MAC3ChC,KAAKW,GAAGsB,QAAWC,GAAMlC,KAAKmC,QAAQ,kBAAmBD,EAC7D,CACAE,KAAAA,CAAMC,GACFrC,KAAKsC,UAAW,EAGhB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,MAAME,EAASJ,EAAQE,GACjBG,EAAaH,IAAMF,EAAQG,OAAS,EAC1CG,EAAAA,aAAaF,EAAQzC,KAAKC,gBAAiB+B,IAmBvC,IACQpB,yBAEAZ,KAAKW,GAAGiC,KAAKZ,EAKrB,CACA,MAAOE,GACP,CACIQ,GAGAG,EAAAA,UAAS,KACL7C,KAAKsC,UAAW,EAChBtC,KAAKe,aAAa,QAAQ,GAC3Bf,KAAK8C,aACZ,GAER,CACJ,CACAC,OAAAA,QAC2B,IAAZ/C,KAAKW,KACZX,KAAKW,GAAGqC,QACRhD,KAAKW,GAAK,KAElB,CAMAL,GAAAA,GACI,MAAM2C,EAASjD,KAAKF,KAAKoD,OAAS,MAAQ,KACpCC,EAAQnD,KAAKmD,OAAS,GAS5B,OAPInD,KAAKF,KAAKsD,oBACVD,EAAMnD,KAAKF,KAAKuD,gBAAkBC,EAAKA,SAGtCtD,KAAKC,iBACNkD,EAAMI,IAAM,GAETvD,KAAKwD,UAAUP,EAAQE,EAClC,CAOA9C,KAAAA,GACI,QAASQ,EAAAA,SACb"}