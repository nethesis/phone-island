{"version":3,"file":"socket.js","sources":["../../../../../node_modules/engine.io-client/build/esm/socket.js"],"sourcesContent":["import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts = {}) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\n            \"polling\",\n            \"websocket\",\n            \"webtransport\",\n        ];\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", (reason) => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this.upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            this.resetPingTimeout();\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n"],"names":["Socket","Emitter","constructor","uri","opts","super","this","binaryType","defaultBinaryType","writeBuffer","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","createTransport","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","readyState","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","resetPingTimeout","onHandshake","JSON","sendPacket","code","filterUpgrades","maxPayload","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","payloadSize","byteLength","slice","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"mappings":"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"}