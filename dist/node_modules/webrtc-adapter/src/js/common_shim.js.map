{"version":3,"file":"common_shim.js","sources":["../../../../../node_modules/webrtc-adapter/src/js/common_shim.js"],"sourcesContent":["/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substring(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      for (const key in parsedCandidate) {\n        if (!(key in nativeCandidate)) {\n          Object.defineProperty(nativeCandidate, key,\n            {value: parsedCandidate[key]});\n        }\n      }\n\n      // Override serializer to not serialize the extra attributes.\n      nativeCandidate.toJSON = function toJSON() {\n        return {\n          candidate: nativeCandidate.candidate,\n          sdpMid: nativeCandidate.sdpMid,\n          sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n          usernameFragment: nativeCandidate.usernameFragment,\n        };\n      };\n      return nativeCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimRTCIceCandidateRelayProtocol(window) {\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'relayProtocol' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      const parsedCandidate = SDPUtils.parseCandidate(e.candidate.candidate);\n      if (parsedCandidate.type === 'relay') {\n        // This is a libwebrtc-specific mapping of local type preference\n        // to relayProtocol.\n        e.candidate.relayProtocol = {\n          0: 'tls',\n          1: 'tcp',\n          2: 'udp',\n        }[parsedCandidate.priority >> 24];\n      }\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substring(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n          this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n          this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n"],"names":["window","browserDetails","RTCPeerConnection","browser","version","nativeSRD","prototype","setRemoteDescription","desc","sdp","indexOf","split","filter","line","trim","join","RTCSessionDescription","arguments","type","apply","this","nativeAddIceCandidate","addIceCandidate","length","candidate","Promise","resolve","proto","Object","defineProperty","get","completed","checking","iceConnectionState","enumerable","configurable","_onconnectionstatechange","set","cb","removeEventListener","addEventListener","forEach","method","origMethod","_connectionstatechangepoly","e","pc","target","_lastConnectionState","connectionState","newEvent","Event","dispatchEvent","_sctp","origSetRemoteDescription","sdpSemantics","getConfiguration","description","sections","SDPUtils","splitSections","shift","some","mediaSection","mLine","parseMLine","kind","protocol","sctpInDescription","isFirefox","match","parseInt","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","maxMessageSize","matchPrefix","substring","getMaxMessageSize","Number","POSITIVE_INFINITY","Math","max","min","sctp","nativeSetLocalDescription","setLocalDescription","signalingState","createOffer","createAnswer","then","d","RTCIceCandidate","NativeRTCIceCandidate","args","JSON","parse","stringify","nativeCandidate","parsedCandidate","parseCandidate","key","value","toJSON","sdpMid","sdpMLineIndex","usernameFragment","utils","writable","relayProtocol","priority","wrapDcSend","dc","origDataChannelSend","send","data","size","byteLength","readyState","TypeError","origCreateDataChannel","createDataChannel","dataChannel","channel"],"mappings":"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"}