{"version":3,"file":"useCommittedRef.js","sources":["../../../src/utils/customHooks/useCommittedRef.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { useEffect, useRef } from 'react'\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef<TValue>(value: TValue): React.MutableRefObject<TValue> {\n  const ref = useRef(value)\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref\n}\n\nexport default useCommittedRef\n"],"names":["value","ref","useRef","useEffect","current"],"mappings":"2GAcA,SAAiCA,GAC/B,IAAMC,EAAMC,SAAOF,GAInB,OAHAG,EAAAA,WAAU,WACRF,EAAIG,QAAUJ,CAChB,GAAG,CAACA,IACGC,CACT"}