{"version":3,"file":"index.js","sources":["../../../src/components/KeypadView/index.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useEffect, useRef } from 'react'\nimport { Button } from '../Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState } from '../../store'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport Actions from './Actions'\nimport { sendDTMF } from '../../lib/webrtc/messages'\nimport { backToPreviousView } from '../../lib/island/island'\nimport { playDtmfAudio } from '../../lib/phone/call'\nimport { useTranslation } from 'react-i18next'\nimport { isWebRTC } from '../../lib/user/default_device'\nimport { sendPhysicalDTMF } from '../../services/astproxy'\nimport { useEventListener, eventDispatch } from '../../utils'\nimport { CustomThemedTooltip } from '../CustomThemedTooltip'\n\nconst DTMF_KEYS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#']\n\nconst KeypadView: FC<KeypadViewTypes> = () => {\n  const dispatch = useDispatch<Dispatch>()\n  const { keypadValue } = useSelector((state: RootState) => state.currentCall)\n  const { isOpen } = useSelector((state: RootState) => state.island)\n  const keypadValueRef = useRef<typeof keypadValue>(keypadValue)\n\n  function sendKey(key: string) {\n    dispatch.currentCall.updateKeypadValue(`${keypadValueRef.current}${key}`)\n    keypadValueRef.current = `${keypadValueRef.current}${key}`\n    playDtmfAudio(key)\n    if (isWebRTC()) {\n      sendDTMF(key)\n    } else {\n      sendPhysicalDTMF(key)\n    }\n\n    eventDispatch('phone-island-call-keypad-sent', {})\n  }\n  useEventListener('phone-island-call-keypad-send', (data: KeypadTypes) => {\n    sendKey(data.key)\n  })\n\n  useEffect(() => {\n    function handlePhysicalKeydown(event) {\n      if (DTMF_KEYS.includes(event.key)) {\n        sendKey(event.key)\n      }\n    }\n    window.addEventListener('keydown', handlePhysicalKeydown)\n    return () => window.removeEventListener('keydown', handlePhysicalKeydown)\n  }, [])\n\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {isOpen ? (\n        <div className='pi-flex pi-flex-col pi-gap-7'>\n          <div className='pi-flex pi-gap-4'>\n            <Button\n              variant='transparent'\n              onClick={backToPreviousView}\n              data-tooltip-id='keyboard-tooltip'\n              data-tooltip-content={t('Tooltip.Back to call') || ''}\n            >\n              <FontAwesomeIcon size='xl' icon={faArrowLeft} />\n            </Button>\n            <input\n              data-stop-propagation={true}\n              type='text'\n              readOnly\n              placeholder={t('Common.Enter a phone number') || ''}\n              value={keypadValue}\n              autoFocus\n              className='pi-w-full pi-rounded-full dark:pi-bg-gray-950 pi-bg-gray-50 pi-border-2 pi-border-emerald-500 dark:pi-border-emerald-200 active:pi-border-emerald-500 dark:active:focus:pi-border-emerald-200 focus:pi-border-emerald-500 dark:focus:pi-border-emerald-200 pi-text-gray-900 dark:pi-text-gray-50 pi-font-light pi-text-xl pi-text-center pi-px-2 focus:pi-outline-0 focus:pi-ring-0 pi-placeholder-gray-400 dark:pi-placeholder-gray-500 pi-font-[inherit]'\n            />\n          </div>\n          <Actions keyCallback={sendKey} />\n        </div>\n      ) : (\n        <div className='pi-font-medium pi-text-base'>Keypad</div>\n      )}\n      <CustomThemedTooltip className='pi-z-1000' id='keyboard-tooltip' place='right' />\n    </>\n  )\n}\n\nexport default KeypadView\n\nexport interface KeypadViewTypes {}\n\ninterface KeypadTypes {\n  key: string\n}\n"],"names":["DTMF_KEYS","dispatch","useDispatch","keypadValue","useSelector","state","currentCall","isOpen","island","keypadValueRef","useRef","sendKey","key","updateKeypadValue","concat","current","playDtmfAudio","isWebRTC","sendDTMF","sendPhysicalDTMF","eventDispatch","useEventListener","data","useEffect","handlePhysicalKeydown","event","includes","window","addEventListener","removeEventListener","t","useTranslation","React","createElement","Fragment","className","Button","variant","onClick","backToPreviousView","FontAwesomeIcon","size","icon","faArrowLeft","type","readOnly","placeholder","value","autoFocus","Actions","keyCallback","CustomThemedTooltip","id","place"],"mappings":"q8CAmBMA,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,qBAElC,WACtC,IAAMC,EAAWC,EAAAA,cACTC,EAAgBC,eAAY,SAACC,GAAqB,OAAAA,EAAMC,2BACxDC,EAAWH,eAAY,SAACC,GAAqB,OAAAA,EAAMG,iBACrDC,EAAiBC,SAA2BP,GAElD,SAASQ,EAAQC,GACfX,EAASK,YAAYO,kBAAkB,GAAAC,OAAGL,EAAeM,SAAOD,OAAGF,IACnEH,EAAeM,QAAU,GAAGD,OAAAL,EAAeM,SAAOD,OAAGF,GACrDI,EAAaA,cAACJ,GACVK,EAAQA,WACVC,EAAQA,SAACN,GAETO,EAAgBA,iBAACP,GAGnBQ,gBAAc,gCAAiC,CAAA,EAChD,CACDC,mBAAiB,iCAAiC,SAACC,GACjDX,EAAQW,EAAKV,IACf,IAEAW,EAAAA,WAAU,WACR,SAASC,EAAsBC,GACzBzB,EAAU0B,SAASD,EAAMb,MAC3BD,EAAQc,EAAMb,IAEjB,CAED,OADAe,OAAOC,iBAAiB,UAAWJ,GAC5B,WAAM,OAAAG,OAAOE,oBAAoB,UAAWL,GACpD,GAAE,IAEK,IAAAM,EAAMC,qBAEd,OACEC,UAAAC,cAAAD,EAAA,QAAAE,SAAA,KACG3B,EACCyB,EAAK,QAAAC,cAAA,MAAA,CAAAE,UAAU,gCACbH,EAAAA,QAAKC,cAAA,MAAA,CAAAE,UAAU,oBACbH,EAAAA,QAAAC,cAACG,EAAAA,OACC,CAAAC,QAAQ,cACRC,QAASC,EAAkBA,mBAAA,kBACX,mBACM,uBAAAT,EAAE,yBAA2B,IAEnDE,UAACC,cAAAO,EAAAA,gBAAgB,CAAAC,KAAK,KAAKC,KAAMC,EAAWA,eAE9CX,UACyBC,cAAA,QAAA,CAAA,yBAAA,EACvBW,KAAK,OACLC,UACA,EAAAC,YAAahB,EAAE,gCAAkC,GACjDiB,MAAO5C,EACP6C,WAAS,EACTb,UAAU,gcAGdH,EAAA,QAAAC,cAACgB,EAAO,QAAC,CAAAC,YAAavC,KAGxBqB,EAAA,QAAAC,cAAA,MAAA,CAAKE,UAAU,yCAEjBH,EAAAA,QAAAC,cAACkB,sBAAoB,CAAAhB,UAAU,YAAYiB,GAAG,mBAAmBC,MAAM,UAG7E"}