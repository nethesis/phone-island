{"version":3,"file":"TransferButton.js","sources":["../../src/components/TransferButton.tsx"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\nimport React, { type FC } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState, store } from '../store'\nimport { Button } from './Button'\nimport { eventDispatch } from '../utils'\nimport { isWebRTC } from '../lib/user/default_device'\nimport { sendDTMF } from '../lib/webrtc/messages'\nimport { sendPhysicalDTMF } from '../services/astproxy'\nimport outgoingRingtone from '../static/outgoing_ringtone'\nimport { faArrowDownUpAcrossLine, faArrowRightArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { t } from 'i18next'\nimport { PlacesType, Tooltip } from 'react-tooltip'\nimport { forceHangupConversation} from '../lib/phone/call'\n\ninterface TransferButtonProps {\n  tooltipPlace?: PlacesType\n}\n\nexport const TransferButton: FC<TransferButtonProps> = ({ tooltipPlace = 'bottom' }) => {\n  const { view, sideViewIsVisible } = useSelector((state: RootState) => state.island)\n  const dispatch = useDispatch<Dispatch>()\n  const transferring = useSelector((state: RootState) => state.currentCall.transferring)\n  const intrudeListenStatus = useSelector((state: RootState) => state.listen)\n\n  function transfer() {\n    // Open the transfer view\n\n    dispatch.island.setIslandView(view !== 'transfer' ? 'transfer' : 'call')\n    // Check if sideView is visible and close it\n    if (sideViewIsVisible) {\n      eventDispatch('phone-island-sideview-close', {})\n    }\n    eventDispatch('phone-island-call-transfer-opened', {})\n  }\n\n  // Cancels the current transfer through dtmfs\n  function cancelTransfer() {\n    forceHangupConversation()\n\n    const { audioPlayerPlaying } = store.getState().player\n    // Check if the local audio is already playing and start playing\n    if (!audioPlayerPlaying) {\n      dispatch.player.updateStartAudioPlayer({\n        src: outgoingRingtone,\n        loop: true,\n      })\n    }\n    setTimeout(() => {\n      if (isWebRTC()) {\n        sendDTMF('1')\n      } else {\n        sendPhysicalDTMF('1')\n      }\n\n      dispatch.player.stopAudioPlayer()\n      // The workaround to disable transfer because of the wrong conv.connection value from ws\n      if (transferring) {\n        setTimeout(() => {\n          dispatch.currentCall.updateTransferring(false)\n        }, 500)\n      }\n\n      eventDispatch('phone-island-call-transfer-canceled', {})\n    }, 500)\n  }\n\n  return (\n    <>\n      {!(intrudeListenStatus.isIntrude || intrudeListenStatus.isListen) && (\n        <>\n          <Button\n            active={transferring}\n            onClick={transferring ? cancelTransfer : transfer}\n            variant='default'\n            data-tooltip-id='tooltip-transfer'\n            data-tooltip-content={\n              transferring ? `${t('Tooltip.Cancel transfer')}` : `${t('Tooltip.Transfer')}`\n            }\n          >\n            {transferring ? (\n              <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={faArrowDownUpAcrossLine} />\n            ) : (\n              <FontAwesomeIcon\n                className='pi-rotate-90 pi-h-6 pi-w-6'\n                icon={faArrowRightArrowLeft}\n              />\n            )}\n          </Button>\n          <Tooltip className='pi-z-20' id='tooltip-transfer' place={tooltipPlace} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default TransferButton\n"],"names":["TransferButton","_a","_b","tooltipPlace","_c","useSelector","state","island","view","sideViewIsVisible","dispatch","useDispatch","transferring","currentCall","intrudeListenStatus","listen","React","createElement","Fragment","isIntrude","isListen","Button","active","onClick","forceHangupConversation","store","getState","player","audioPlayerPlaying","updateStartAudioPlayer","src","outgoingRingtone","loop","setTimeout","isWebRTC","sendDTMF","sendPhysicalDTMF","stopAudioPlayer","updateTransferring","eventDispatch","setIslandView","variant","concat","t","FontAwesomeIcon","className","icon","faArrowDownUpAcrossLine","faArrowRightArrowLeft","Tooltip","id","place"],"mappings":"k7BAqBaA,EAA0C,SAACC,GAAE,IAAAC,EAAAD,EAAAE,aAAAA,OAAe,IAAAD,EAAA,SAAQA,EACzEE,EAA8BC,EAAAA,aAAY,SAACC,GAAqB,OAAAA,EAAMC,MAAM,IAA1EC,SAAMC,sBACRC,EAAWC,EAAAA,cACXC,EAAeP,eAAY,SAACC,GAAqB,OAAAA,EAAMO,YAAYD,YAAlB,IACjDE,EAAsBT,EAAWA,aAAC,SAACC,GAAqB,OAAAA,EAAMS,MAAN,IA4C9D,OACEC,EAAAA,QAAAC,cAAAD,EAAAA,QAAAE,SAAA,OACKJ,EAAoBK,WAAaL,EAAoBM,WACtDJ,EAAAA,QAAAC,cAAAD,EAAAA,QAAAE,SAAA,KACEF,UAAAC,cAACI,EAAMA,OACL,CAAAC,OAAQV,EACRW,QAASX,EApCnB,WACEY,EAAAA,0BAE+BC,EAAKA,MAACC,WAAWC,OAAMC,oBAGpDlB,EAASiB,OAAOE,uBAAuB,CACrCC,IAAKC,EAAgB,QACrBC,MAAM,IAGVC,YAAW,WACLC,EAAQA,WACVC,EAAQA,SAAC,KAETC,EAAgBA,iBAAC,KAGnB1B,EAASiB,OAAOU,kBAEZzB,GACFqB,YAAW,WACTvB,EAASG,YAAYyB,oBAAmB,EACzC,GAAE,KAGLC,gBAAc,sCAAuC,CAAA,EACtD,GAAE,IACJ,EAxCD,WAGE7B,EAASH,OAAOiC,cAAuB,aAAThC,EAAsB,WAAa,QAE7DC,GACF8B,gBAAc,8BAA+B,CAAA,GAE/CA,gBAAc,oCAAqC,CAAA,EACpD,EAwCSE,QAAQ,UACQ,kBAAA,mBAEd,uBAAe,GAAGC,OAAlB9B,EAAkB+B,IAAE,2BAAkCA,EAAAA,EAAE,sBAGzD/B,EACCI,EAAAA,QAAAC,cAAC2B,kBAAgB,CAAAC,UAAU,gBAAgBC,KAAMC,EAAuBA,0BAExE/B,EAAAA,sBAAC4B,kBAAe,CACdC,UAAU,6BACVC,KAAME,2BAIZhC,EAAAA,QAAAC,cAACgC,UAAQ,CAAAJ,UAAU,UAAUK,GAAG,mBAAmBC,MAAOhD,KAKpE"}