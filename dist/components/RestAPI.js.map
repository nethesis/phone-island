{"version":3,"file":"RestAPI.js","sources":["../../src/components/RestAPI.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type ReactNode, type FC, useEffect, useLayoutEffect } from 'react'\nimport { getCurrentUserInfo, getVideoSources } from '../services/user'\nimport { retrieveAvatars } from '../lib/avatars/avatars'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState } from '../store'\nimport { getAllExtensions } from '../services/astproxy'\nimport { getAllUsersEndpoints } from '../services/user'\nimport { getExtensionsList } from '../lib/user/extensions'\n\nexport const RestAPI: FC<RestAPIProps> = ({ hostName, username, authToken, children }) => {\n  const dispatch = useDispatch<Dispatch>()\n  const { fetchReady } = useSelector((state: RootState) => state.fetchDefaults)\n\n  useEffect(() => {\n    if (username && authToken && hostName) {\n      // Initialize API defaults\n      dispatch.fetchDefaults.updateFetchBaseURL(`https://${hostName}/webrest`)\n      dispatch.fetchDefaults.updateFetchHeaders({\n        Authorization: `${username}:${authToken}`,\n      })\n      dispatch.fetchDefaults.setFetchReady()\n    }\n  }, [username, authToken, hostName])\n\n  useEffect(() => {\n    // Get all extensions info and set to store\n    async function initExtensions() {\n      const extensions = await getAllExtensions()\n      if (extensions) {\n        dispatch.users.updateExtensions(extensions)\n        // Update the current user conversations\n        const currentUserExtensionsList = getExtensionsList()\n        const extensionsData = Object.values(extensions).filter((extension) =>\n          currentUserExtensionsList.includes(extension.exten),\n        )\n        // Update the user conversations to store\n        extensionsData.forEach((extension) => dispatch.currentUser.updateConversations(extension))\n      }\n    }\n    // Get users info and set to store\n    async function initCurrentUser() {\n      const userInfo = await getCurrentUserInfo()\n      if (userInfo) {\n        dispatch.currentUser.updateCurrentUser(userInfo)\n        dispatch.currentUser.setCurrentUserReady(true)\n\n        // Update open param URL type if it exists in paramurl store\n        if (userInfo.settings && userInfo.settings.open_param_url) {\n          dispatch.paramUrl.setOpenParamUrlType(userInfo.settings.open_param_url);\n        } else {\n          dispatch.paramUrl.setOpenParamUrlType('never');\n        }\n\n        // Inizialize all extensions after user initialization\n        initExtensions()\n      }\n    }\n    // Get all users and endpoints info and set to store\n    async function initUsersEndpoints() {\n      const usersEndpoints = await getAllUsersEndpoints()\n      if (usersEndpoints) {\n        dispatch.users.updateEndpoints(usersEndpoints)\n      }\n    }\n    // Get all streaming source info and set to store\n    async function initVideoSources() {\n      const videoSources: any = await getVideoSources()\n      if (videoSources) {\n        dispatch.streaming.updateVideoSources(videoSources)\n      }\n    }\n    // Call the needed APIs on startup\n    if (fetchReady) {\n      initCurrentUser()\n      initUsersEndpoints()\n      initVideoSources()\n    }\n  }, [fetchReady])\n\n  useLayoutEffect(() => {\n    // Initialize avatars request it or get from storage\n    if (username && fetchReady) {\n      retrieveAvatars(username)\n    }\n  }, [fetchReady, username])\n\n  return <>{fetchReady && children}</>\n}\n\ninterface RestAPIProps {\n  children: ReactNode\n  hostName: string\n  username: string\n  authToken: string\n}\n"],"names":["_a","hostName","username","authToken","children","dispatch","useDispatch","fetchReady","useSelector","state","fetchDefaults","useEffect","updateFetchBaseURL","concat","updateFetchHeaders","Authorization","setFetchReady","getCurrentUserInfo","userInfo","sent","currentUser","updateCurrentUser","setCurrentUserReady","settings","open_param_url","paramUrl","setOpenParamUrlType","getAllExtensions","extensions","users","updateExtensions","currentUserExtensionsList_1","getExtensionsList","Object","values","filter","extension","includes","exten","forEach","updateConversations","initExtensions","initCurrentUser","getAllUsersEndpoints","usersEndpoints","updateEndpoints","initUsersEndpoints","getVideoSources","videoSources","streaming","updateVideoSources","initVideoSources","useLayoutEffect","retrieveAvatars","React","createElement","Fragment"],"mappings":"2jBAYyC,SAACA,OAAEC,EAAQD,EAAAC,SAAEC,EAAQF,EAAAE,SAAEC,EAASH,EAAAG,UAAEC,EAAQJ,EAAAI,SAC3EC,EAAWC,EAAAA,cACTC,EAAeC,eAAY,SAACC,GAAqB,OAAAA,EAAMC,4BA2E/D,OAzEAC,EAAAA,WAAU,WACJT,GAAYC,GAAaF,IAE3BI,EAASK,cAAcE,mBAAmB,WAAWC,OAAAZ,EAAkB,aACvEI,EAASK,cAAcI,mBAAmB,CACxCC,cAAe,GAAAF,OAAGX,EAAQ,KAAAW,OAAIV,KAEhCE,EAASK,cAAcM,gBAE1B,GAAE,CAACd,EAAUC,EAAWF,IAEzBU,EAAAA,WAAU,WAgDJJ,IAhCJ,0HACmB,MAAM,CAAA,EAAAU,EAAAA,oCAAjBC,EAAWlB,EAA0BmB,UAEzCd,EAASe,YAAYC,kBAAkBH,GACvCb,EAASe,YAAYE,qBAAoB,GAGrCJ,EAASK,UAAYL,EAASK,SAASC,eACzCnB,EAASoB,SAASC,oBAAoBR,EAASK,SAASC,gBAExDnB,EAASoB,SAASC,oBAAoB,SAxB5C,4HACqB,MAAM,CAAA,EAAAC,EAAAA,kCAAnBC,EAAa5B,EAAwBmB,UAEzCd,EAASwB,MAAMC,iBAAiBF,GAE1BG,EAA4BC,EAAiBA,oBAC5BC,OAAOC,OAAON,GAAYO,QAAO,SAACC,GACvD,OAAAL,EAA0BM,SAASD,EAAUE,MAA7C,IAGaC,SAAQ,SAACH,GAAc,OAAA/B,EAASe,YAAYoB,oBAAoBJ,EAAzC,eAEzC,CAgBGK,cAEH,CAiBCC,GAfF,0HACyB,MAAM,CAAA,EAAAC,EAAAA,sCAAvBC,EAAiB5C,EAA4BmB,SAEjDd,EAASwB,MAAMgB,gBAAgBD,aAElC,CAWCE,GATF,0HAC4B,MAAM,CAAA,EAAAC,EAAAA,iCAA1BC,EAAoBhD,EAAuBmB,SAE/Cd,EAAS4C,UAAUC,mBAAmBF,aAEzC,CAKCG,GAEJ,GAAG,CAAC5C,IAEJ6C,EAAAA,iBAAgB,WAEVlD,GAAYK,GACd8C,EAAeA,gBAACnD,EAEpB,GAAG,CAACK,EAAYL,IAEToD,EAAAA,QAAGC,cAAAD,EAAA,QAAAE,SAAA,KAAAjD,GAAcH,EAC1B"}