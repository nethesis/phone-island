{"version":3,"file":"index.js","sources":["../../../src/components/CallView/index.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useMemo, useCallback, memo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState, Dispatch } from '../../store'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faPhone,\n  faEarListen,\n  faHandPointUp,\n  faArrowLeft,\n  faCircle,\n  faUnlock,\n} from '@fortawesome/free-solid-svg-icons'\nimport { Button } from '../'\nimport Timer from './Timer'\nimport Number from './Number'\nimport DisplayName from './DisplayName'\nimport { AudioBars } from '../'\nimport { answerIncomingCall } from '../../lib/phone/call'\nimport Avatar from './Avatar'\nimport Actions from './Actions'\nimport Hangup from '../Hangup'\nimport { useTranslation } from 'react-i18next'\nimport { faOfficePhone } from '@nethesis/nethesis-solid-svg-icons'\nimport { isPhysical } from '../../lib/user/default_device'\nimport { CustomThemedTooltip } from '../CustomThemedTooltip'\nimport StreamingImage from '../StreamingImage'\nimport VideoStreamingSkeleton from '../VideoStreamingSkeleton'\nimport VideoStreamingEmptyState from '../VideoStreamingEmptyState'\nimport { handleStreamingUnlock } from '../../utils'\nimport { useDispatch } from 'react-redux'\n\nfunction isAnswerVisible(outgoing: boolean, accepted: boolean): boolean {\n  return !outgoing && !accepted\n}\n\nconst Details = memo(({ children }: { children: React.ReactNode }) => (\n  <div className='pi-grid pi-self-center pi-gap-1 pi-grid-cols-1 pi-grid-rows-2'>{children}</div>\n))\nDetails.displayName = 'Details'\n\n/**\n * The main view to manage calls, the starting point for calls actions flows\n */\nconst CallView: FC<CallViewProps> = () => {\n  const { t } = useTranslation()\n\n  const currentCall = useSelector((state: RootState) => state.currentCall)\n  const {\n    incoming,\n    accepted,\n    outgoing,\n    startTime,\n    paused,\n    number,\n    isRecording,\n    username,\n    streamingSourceNumber,\n  } = currentCall\n\n  const { isOpen, isFromStreaming } = useSelector((state: RootState) => state.island)\n  const { remoteAudioStream } = useSelector((state: RootState) => state.webrtc)\n  const listenState = useSelector((state: RootState) => state.listen)\n  const { isListen, isIntrude, isListenExtension, isIntrudeExtension } = listenState\n  const { data: alertsData } = useSelector((state: RootState) => state.alerts)\n  const currentUser = useSelector((state: RootState) => state.currentUser)\n  const { videoSources, sourceImages } = useSelector((state: RootState) => state.streaming)\n\n  const activeAlerts = useMemo(\n    () => Object.values(alertsData).filter((alert: any) => alert.active),\n    [alertsData],\n  )\n\n  const latestAlert = useMemo(\n    () => (activeAlerts.length > 0 ? activeAlerts[activeAlerts.length - 1] : null),\n    [activeAlerts],\n  )\n\n  const shouldShowStreamingImage = useMemo(\n    () => isFromStreaming && streamingSourceNumber && !accepted,\n    [isFromStreaming, streamingSourceNumber, accepted],\n  )\n\n  // Check if unlock button should be shown and get tooltip text\n  const unlockData = useMemo(() => {\n    if (!streamingSourceNumber || !videoSources) return { canUnlock: false, tooltipText: '' }\n\n    const source = Object.values(videoSources).find(\n      (source) => source?.extension === streamingSourceNumber,\n    )\n\n    const canUnlock = Boolean(source?.cmdOpen && source?.cmdOpen.trim() !== '')\n    const tooltipText = canUnlock && source ? `${t('VideoStreaming.Open')}: ${source?.description}` : ''\n\n    return { canUnlock, tooltipText }\n  }, [streamingSourceNumber, videoSources, t])\n\n  const hasValidUsername = useMemo(() => username !== '' && username !== 'undefined', [username])\n\n  const renderLandlinePhoneDiv = useCallback(\n    () => (\n      <div className='pi-text-gray-600 dark:pi-text-gray-300 pi-font-normal pi-text-sm pi-flex pi-items-center pi-truncate'>\n        <FontAwesomeIcon size='sm' icon={faOfficePhone} className='pi-mr-1' />\n        <span className='pi-max-w-16 pi-truncate'>\n          {currentUser?.default_device?.description || t('Common.Physical phone')}\n        </span>\n      </div>\n    ),\n    [currentUser?.default_device?.description, t],\n  )\n\n  const renderPulseIcon = useCallback(\n    (color: string) => {\n      const sizeClasses = !isOpen ? 'pi-h-6 pi-w-6' : 'pi-h-12 pi-w-12'\n      const innerSizeClasses = !isOpen ? 'pi-h-4 pi-w-4 pi-rounded-full' : 'pi-h-8'\n      const animationSizeClasses = !isOpen ? 'pi-h-6 pi-w-6' : 'pi-w-8 pi-h-8'\n      const colorClasses = color === 'red' ? 'pi-bg-red-400' : 'pi-bg-green-400'\n      const textColorClasses = color === 'red' ? 'pi-text-red-500' : 'pi-text-green-500'\n\n      return (\n        <div className={`${sizeClasses} pi-flex pi-justify-center pi-items-center`}>\n          <div\n            className={`${innerSizeClasses} pi-w-fit pi-flex pi-justify-center pi-items-center pi-gap-1 pi-overflow-hidden`}\n          >\n            <span\n              className={`${animationSizeClasses} pi-animate-ping pi-absolute pi-inline-flex pi-rounded-full ${colorClasses} pi-opacity-75`}\n            ></span>\n            <FontAwesomeIcon\n              className={`pi-w-4 pi-h-6 pi-rotate-45 ${textColorClasses}`}\n              icon={faCircle}\n            />\n          </div>\n        </div>\n      )\n    },\n    [isOpen],\n  )\n\n  const callViewClasses = useMemo(() => {\n    let baseClasses = 'pi-grid pi-items-center'\n\n    if (isOpen) {\n      baseClasses = 'pi-grid pi-items-start'\n\n      if (accepted) {\n        baseClasses += ' pi-grid-rows-[72px_1fr]'\n      } else if (incoming) {\n        baseClasses += ' pi-grid-cols-[256px_114px]'\n      } else if (outgoing) {\n        baseClasses += ' pi-grid-cols-[1fr_84px]'\n      }\n    }\n\n    return shouldShowStreamingImage ? 'pi-flex pi-flex-col' : baseClasses\n  }, [isOpen, accepted, incoming, outgoing, shouldShowStreamingImage])\n\n  const topContentClasses = useMemo(() => {\n    let columns = ''\n\n    if (isOpen && !accepted && outgoing) {\n      columns = 'pi-grid-cols-[48px_1fr]'\n    } else if (isOpen && !accepted && incoming) {\n      columns = 'pi-grid-cols-[48px_1fr_1px]'\n    } else if (isOpen && accepted) {\n      columns = 'pi-grid-cols-[48px_164px_48px]'\n    } else if (!isOpen && !accepted) {\n      columns = 'pi-grid-cols-[24px_102px]'\n    } else {\n      columns = 'pi-grid-cols-[24px_66px_24px]'\n    }\n\n    return `pi-grid ${columns} pi-gap-${isOpen ? '5' : '3'} pi-items-${isOpen ? 'start' : 'center'\n      } pi-justify-center pi-w-full`\n  }, [isOpen, accepted, incoming, outgoing])\n\n  const getGridClasses = useMemo(() => {\n    if (shouldShowStreamingImage) return 'pi-grid-cols-3'\n    if (isAnswerVisible(outgoing, accepted)) return 'pi-grid-cols-2'\n    if (accepted) return 'pi-grid-cols-1 pi-justify-items-center'\n    return 'pi-grid-cols-1 pi-justify-items-end'\n  }, [shouldShowStreamingImage, outgoing, accepted])\n\n  const renderStatusIcon = useCallback(() => {\n    const iconSizeClass = isOpen\n      ? 'pi-relative pi-z-30 pi-h-12 pi-w-12 pi-rounded-sm pi-bg-cover'\n      : 'pi-relative pi-z-30 pi-h-6 pi-w-6 pi-rounded-sm pi-bg-cover'\n\n    if (isListen) {\n      return <FontAwesomeIcon className={iconSizeClass} icon={faEarListen} />\n    }\n\n    if (isIntrude) {\n      return <FontAwesomeIcon className={iconSizeClass} icon={faHandPointUp} />\n    }\n\n    if (number !== '' && hasValidUsername) {\n      return <Avatar />\n    }\n\n    if (incoming && !hasValidUsername) {\n      return <FontAwesomeIcon className={`${iconSizeClass} pi--rotate-45`} icon={faArrowLeft} />\n    }\n\n    if (accepted && !outgoing && !hasValidUsername) {\n      return <FontAwesomeIcon className={`${iconSizeClass} pi--rotate-45`} icon={faArrowLeft} />\n    }\n\n    if (outgoing && !hasValidUsername) {\n      return (\n        <FontAwesomeIcon className={`${iconSizeClass} pi-rotate-[135deg]`} icon={faArrowLeft} />\n      )\n    }\n\n    return null\n  }, [isOpen, isListen, isIntrude, number, hasValidUsername, incoming, outgoing, accepted])\n\n  const renderDetails = useCallback(() => {\n    if (!isOpen) return null\n\n    if (isIntrude) {\n      return (\n        <Details>\n          <span className='pi-justify-center pi-w-fit pi-relative pi-inline-block pi-font-bold pi-text-base'>\n            {t('Common.Intrude')}\n            {isIntrudeExtension ? ` - ${isIntrudeExtension}` : ''}\n          </span>\n          {accepted ? (\n            !isPhysical() ? (\n              <Timer startTime={startTime} isNotAlwaysWhite />\n            ) : (\n              renderLandlinePhoneDiv()\n            )\n          ) : isIntrudeExtension ? (\n            `${isIntrudeExtension}`\n          ) : (\n            ''\n          )}\n        </Details>\n      )\n    }\n\n    if (isListen) {\n      return (\n        <Details>\n          <span className='pi-justify-center pi-w-fit pi-relative pi-inline-block pi-font-bold pi-text-base'>\n            {t('Common.Listen')}\n            {isListenExtension ? ` - ${isListenExtension}` : ''}\n          </span>\n          {accepted ? (\n            !isPhysical() ? (\n              <Timer startTime={startTime} isNotAlwaysWhite />\n            ) : (\n              renderLandlinePhoneDiv()\n            )\n          ) : isListenExtension ? (\n            `${isListenExtension}`\n          ) : (\n            ''\n          )}\n        </Details>\n      )\n    }\n\n    return (\n      <Details>\n        <DisplayName />\n        {accepted ? (\n          !isPhysical() ? (\n            <Timer startTime={startTime} isNotAlwaysWhite />\n          ) : (\n            renderLandlinePhoneDiv()\n          )\n        ) : (\n          <Number />\n        )}\n      </Details>\n    )\n  }, [\n    isOpen,\n    isIntrude,\n    isListen,\n    accepted,\n    startTime,\n    isIntrudeExtension,\n    isListenExtension,\n    t,\n    renderLandlinePhoneDiv,\n  ])\n\n  const renderAudioIndicator = useCallback(() => {\n    if (accepted && isRecording) {\n      return renderPulseIcon('red')\n    }\n\n    if (accepted && remoteAudioStream && !isPhysical()) {\n      return (\n        <AudioBars\n          audioStream={remoteAudioStream}\n          paused={paused}\n          size={isOpen ? 'large' : 'small'}\n        />\n      )\n    }\n\n    if (accepted && isPhysical()) {\n      return renderPulseIcon('green')\n    }\n\n    return null\n  }, [accepted, isRecording, remoteAudioStream, isOpen, paused, renderPulseIcon])\n\n  if (latestAlert !== null) {\n    return null\n  }\n\n  // Initialize useDispatch\n  const dispatch = useDispatch<Dispatch>()\n\n  const setVideoStreamingAnswer = () => {\n    answerIncomingCall()\n    // Set view as video streaming answer with a small delay\n    setTimeout(() => {\n      dispatch.island.setIslandView('streamingAnswer')\n    }, 200)\n  }\n\n  const renderStreamingContent = useCallback(() => {\n    // Show skeleton while videoSources are loading or if streaming source number is not set yet\n    if (!videoSources || Object.keys(videoSources).length === 0 || !streamingSourceNumber) {\n      return <VideoStreamingSkeleton className=\"pi-w-full pi-h-40 pi-mt-4\" />\n    }\n\n    // Find the streaming source\n    const source = Object.values(videoSources).find(\n      (source) => source.extension === streamingSourceNumber,\n    )\n\n    // If source doesn't exist, show empty state\n    if (!source) {\n      return <VideoStreamingEmptyState className=\"pi-w-full pi-h-40 pi-mt-4\" />\n    }\n\n    // Check if image is available\n    const hasImage = sourceImages[source.id] || source.image\n\n    // If no image available, show empty state\n    if (!hasImage) {\n      return <VideoStreamingEmptyState className=\"pi-w-full pi-h-40 pi-mt-4\" />\n    }\n\n    // If we have an image, show StreamingImage component\n    return <StreamingImage />\n  }, [streamingSourceNumber, videoSources, sourceImages])\n\n  return (\n    <div className='pi-bg-red pi-content-center pi-justify-center'>\n      <div className={callViewClasses}>\n        {shouldShowStreamingImage ? (\n          <>\n            <div className='pi-flex pi-items-center pi-justify-between'>\n              <div className='pi-flex pi-items-center pi-gap-4'>\n                {renderStatusIcon()}\n                <div className='pi-flex pi-flex-col pi-justify-center pi-space-y-2'>\n                  <DisplayName />\n                  <Number />\n                </div>\n              </div>\n\n              <div className='pi-flex pi-gap-2'>\n                <Hangup description={t('Tooltip.Hangup')} />\n                {!outgoing && (\n                  <Button\n                    onClick={() => setVideoStreamingAnswer()}\n                    variant='green'\n                    data-tooltip-id='tooltip-answer'\n                    data-tooltip-content={t('Tooltip.Answer') || ''}\n                  >\n                    <FontAwesomeIcon className='pi-w-5 pi-h-5' icon={faPhone} />\n                  </Button>\n                )}\n                {/* Open door button - only show if cmdOpen is valid */}\n                {unlockData?.canUnlock && (\n                  <Button\n                    variant='default'\n                    onClick={handleStreamingUnlock}\n                    data-tooltip-id='tooltip-unlock'\n                    data-tooltip-content={unlockData?.tooltipText}\n                  >\n                    <FontAwesomeIcon className='pi-w-5 pi-h-5' icon={faUnlock} />\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {renderStreamingContent()}\n          </>\n        ) : (\n          <>\n            <div className={topContentClasses}>\n              {renderStatusIcon()}\n              {renderDetails()}\n\n              {!isOpen && !accepted && <DisplayName />}\n              {!isOpen && accepted && <Timer startTime={startTime} isNotAlwaysWhite />}\n\n              {renderAudioIndicator()}\n            </div>\n\n            {isOpen && (\n              <>\n                <div className={`${!(isListen || isIntrude) ? 'pi-grid pi-gap-y-5' : ''}`}>\n                  {accepted && <Actions />}\n                  <div className={`pi-grid ${getGridClasses} pi-gap-3.5`}>\n                    <Hangup description={t('Tooltip.Hangup and transfer')} />\n\n                    {isAnswerVisible(outgoing, accepted) && (\n                      <Button\n                        onClick={answerIncomingCall}\n                        variant='green'\n                        data-tooltip-id='tooltip-answer-left'\n                        data-tooltip-content={t('Tooltip.Answer') || ''}\n                      >\n                        <FontAwesomeIcon className='pi-w-6 pi-h-6' icon={faPhone} />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </>\n            )}\n          </>\n        )}\n      </div>\n      <CustomThemedTooltip id='tooltip-answer-left' place='left' />\n      <CustomThemedTooltip id='tooltip-answer' place='left' />\n      <CustomThemedTooltip id='tooltip-unlock' place='left' />\n    </div>\n  )\n}\n\nexport default memo(CallView)\n\nexport interface CallViewProps { }\n"],"names":["isAnswerVisible","outgoing","accepted","Details","memo","_a","children","React","className","displayName","t","useTranslation","currentCall","useSelector","state","incoming","startTime","paused","number","isRecording","username","streamingSourceNumber","_b","island","isOpen","isFromStreaming","remoteAudioStream","webrtc","listenState","listen","isListen","isIntrude","isListenExtension","isIntrudeExtension","alertsData","alerts","currentUser","_c","streaming","videoSources","sourceImages","activeAlerts","useMemo","Object","values","filter","alert","active","latestAlert","length","shouldShowStreamingImage","unlockData","canUnlock","tooltipText","source","find","extension","Boolean","cmdOpen","trim","concat","description","hasValidUsername","renderLandlinePhoneDiv","useCallback","createElement","FontAwesomeIcon","size","icon","faOfficePhone","default_device","renderPulseIcon","color","sizeClasses","innerSizeClasses","animationSizeClasses","colorClasses","textColorClasses","faCircle","callViewClasses","baseClasses","topContentClasses","getGridClasses","renderStatusIcon","iconSizeClass","faEarListen","faHandPointUp","Avatar","faArrowLeft","renderDetails","isPhysical","Timer","isNotAlwaysWhite","DisplayName","Number","renderAudioIndicator","AudioBars","audioStream","dispatch","useDispatch","renderStreamingContent","keys","VideoStreamingSkeleton","id","image","StreamingImage","VideoStreamingEmptyState","Fragment","Hangup","Button","onClick","answerIncomingCall","setTimeout","setIslandView","variant","faPhone","handleStreamingUnlock","faUnlock","Actions","CustomThemedTooltip","place"],"mappings":"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"}