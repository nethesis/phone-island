{"version":3,"file":"BarsGroup.js","sources":["../../../src/components/RecorderView/BarsGroup.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useEffect, useRef, useCallback, useState } from 'react'\nimport { Bar } from './Bar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState } from '../../store'\n\n// The number in percent of the width of the group bars\n// ...by which the leftward transaction occurs\n// ...so it defines the speed of the animation\nconst BARS_ANIMATION_SPEED: number = 0.4\n// The number of bars to be shown for for every group\n// ...it defines the lenght of every group\nconst BARS_COUNT: number = 55\n// A value that rapresents the window size in samples\n// ...that is used when performing a fast fourier transform\n// ...to get frequency domain data\n// ...a higher number result in more details in frequency and fewer in amplitude\nconst AUDIO_FFT_VALUE: number = 32\n\nfunction getTranslateXPercent(element: HTMLDivElement) {\n  const transformValue = element.style.transform\n  const translateXMatch = transformValue.match(/translateX\\(([-0-9.]+)%\\)/)\n  if (translateXMatch && translateXMatch[1]) {\n    return parseFloat(translateXMatch[1])\n  }\n  return 0\n}\n\nexport const BarsGroup: FC<BarsGroupProps> = ({ index, startAnimation, audioStream }) => {\n  const barsContainerRef = useRef<HTMLDivElement>(null)\n  const animationRequestRef = useRef<number>(0)\n  const lastTranslateRef = useRef<number>(0)\n  const visibleContainerRef = useSelector((state: RootState) => state.recorder.visibleContainerRef)\n  const dispatch = useDispatch<Dispatch>()\n  const analyser = useRef<AnalyserNode | null>(null)\n  const [showBars, setShowBars] = useState<boolean>()\n\n  // The animation of the bars groups\n  const barsGroupAnimation = useCallback(() => {\n    if (barsContainerRef.current) {\n      // Retrieve the last translate value\n      const lastTranslateValue = lastTranslateRef.current\n        ? lastTranslateRef.current\n        : getTranslateXPercent(barsContainerRef.current)\n      // Calculate the new translate value\n      const newTranslateValue = lastTranslateValue - BARS_ANIMATION_SPEED\n      const finalTranslateValue = newTranslateValue <= -100 ? 100 : newTranslateValue\n      barsContainerRef.current.style.transform = `translateX(${finalTranslateValue}%)`\n      // Update the translate ref value\n      lastTranslateRef.current = finalTranslateValue\n    }\n    animationRequestRef.current = requestAnimationFrame(barsGroupAnimation)\n  }, [lastTranslateRef])\n\n  function retrieveFrequency() {\n    const frequencyData = analyser.current && new Uint8Array(analyser.current.frequencyBinCount)\n    frequencyData && analyser.current?.getByteFrequencyData(frequencyData)\n    const values = (frequencyData && Object.values(frequencyData)) || []\n    // Save the higher frequency to recorder state\n    // ...using a number from 0 to 1\n    dispatch.recorder.setFrequency(values[0] / 255)\n    requestAnimationFrame(retrieveFrequency)\n  }\n\n  // Retrieve frequency\n  useEffect(() => {\n    if (audioStream) {\n      const context = new AudioContext()\n      analyser.current = context.createAnalyser()\n      analyser.current.fftSize = AUDIO_FFT_VALUE\n      // Connect the source to the analyser\n      const source = audioStream && context.createMediaStreamSource(audioStream)\n      // Connect the audio source to the analyser\n      source.connect(analyser.current)\n      // Request the animation to perform\n      requestAnimationFrame(retrieveFrequency)\n    }\n  }, [audioStream])\n\n  // Manage animation start\n  useEffect(() => {\n    if (startAnimation) {\n      animationRequestRef.current = requestAnimationFrame(barsGroupAnimation)\n    }\n    return () => {\n      animationRequestRef.current && cancelAnimationFrame(animationRequestRef.current)\n    }\n  }, [startAnimation])\n\n  useEffect(() => {\n    if (barsContainerRef?.current) {\n      setShowBars(true)\n    }\n  }, [])\n\n  return (\n    <div\n      id={`${index}`}\n      style={{\n        transform: `translateX(${100 * index}%)`,\n      }}\n      className='pi-absolute pi-flex pi-w-fit pi-h-6 pi-gap-1 pi-items-center pi-px-0.5'\n      ref={barsContainerRef}\n    >\n      {/* Create a custom number of bars */}\n      {showBars && (\n        <>\n          {Array.from(Array(BARS_COUNT).keys()).map((_, i) => (\n            <Bar key={i} visibleContainer={visibleContainerRef?.current || null} />\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n\ninterface BarsGroupProps {\n  index: number\n  startAnimation: boolean\n  audioStream: MediaStream | null\n}\n"],"names":["_a","index","startAnimation","audioStream","barsContainerRef","useRef","animationRequestRef","lastTranslateRef","visibleContainerRef","useSelector","state","recorder","dispatch","useDispatch","analyser","_b","useState","showBars","setShowBars","barsGroupAnimation","useCallback","current","newTranslateValue","element","translateXMatch","style","transform","match","parseFloat","finalTranslateValue","concat","requestAnimationFrame","retrieveFrequency","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","values","Object","setFrequency","useEffect","context","AudioContext","createAnalyser","fftSize","createMediaStreamSource","connect","cancelAnimationFrame","React","id","className","ref","createElement","Fragment","Array","from","keys","map","_","i","Bar","key","visibleContainer"],"mappings":"wZA8B6C,SAACA,GAAE,IAAAC,UAAOC,EAAcF,EAAAE,eAAEC,EAAWH,EAAAG,YAC1EC,EAAmBC,SAAuB,MAC1CC,EAAsBD,SAAe,GACrCE,EAAmBF,SAAe,GAClCG,EAAsBC,eAAY,SAACC,GAAqB,OAAAA,EAAMC,SAASH,mBAAf,IACxDI,EAAWC,EAAAA,cACXC,EAAWT,SAA4B,MACvCU,EAA0BC,aAAzBC,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAGtBI,EAAqBC,EAAAA,aAAY,WACrC,GAAIhB,EAAiBiB,QAAS,CAE5B,IAIMC,GAJqBf,EAAiBc,QACxCd,EAAiBc,SAvBGE,EAwBCnB,EAAiBiB,SAtBxCG,EADiBD,EAAQE,MAAMC,UACEC,MAAM,+BACtBH,EAAgB,GAC9BI,WAAWJ,EAAgB,IAE7B,IAhB4B,GAqCzBK,EAAsBP,IAAsB,IAAM,IAAMA,EAC9DlB,EAAiBiB,QAAQI,MAAMC,UAAY,cAAAI,OAAcD,EAAmB,MAE5EtB,EAAiBc,QAAUQ,CAC5B,CA/BL,IAA8BN,EAEtBC,EA8BJlB,EAAoBe,QAAUU,sBAAsBZ,EACtD,GAAG,CAACZ,IAEJ,SAASyB,UACDC,EAAgBnB,EAASO,SAAW,IAAIa,WAAWpB,EAASO,QAAQc,mBAC1EF,IAAmC,QAAlBjC,EAAAc,EAASO,eAAS,IAAArB,GAAAA,EAAAoC,qBAAqBH,IACxD,IAAMI,EAAUJ,GAAiBK,OAAOD,OAAOJ,IAAmB,GAGlErB,EAASD,SAAS4B,aAAaF,EAAO,GAAK,KAC3CN,sBAAsBC,EACvB,CAiCD,OA9BAQ,EAAAA,WAAU,WACR,GAAIrC,EAAa,CACf,IAAMsC,EAAU,IAAIC,aACpB5B,EAASO,QAAUoB,EAAQE,iBAC3B7B,EAASO,QAAQuB,QApDS,IAsDXzC,GAAesC,EAAQI,wBAAwB1C,IAEvD2C,QAAQhC,EAASO,SAExBU,sBAAsBC,EACvB,CACH,GAAG,CAAC7B,IAGJqC,EAAAA,WAAU,WAIR,OAHItC,IACFI,EAAoBe,QAAUU,sBAAsBZ,IAE/C,WACLb,EAAoBe,SAAW0B,qBAAqBzC,EAAoBe,QAC1E,CACF,GAAG,CAACnB,IAEJsC,EAAAA,WAAU,YACJpC,eAAAA,EAAkBiB,UACpBH,GAAY,EAEf,GAAE,IAGD8B,+BACEC,GAAI,UAAGhD,GACPwB,MAAO,CACLC,UAAW,cAAAI,OAAc,IAAM7B,EAAS,OAE1CiD,UAAU,yEACVC,IAAK/C,GAGJa,GACC+B,EAAAA,QAAAI,cAAAJ,UAAAK,SAAA,KACGC,MAAMC,KAAKD,MA/FK,IA+FaE,QAAQC,KAAI,SAACC,EAAGC,GAAM,OAClDX,EAAA,QAAAI,cAACQ,EAAAA,IAAG,CAACC,IAAKF,EAAGG,kBAAkBtD,aAAA,EAAAA,EAAqBa,UAAW,MADb,KAO9D"}