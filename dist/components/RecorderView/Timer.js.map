{"version":3,"file":"Timer.js","sources":["../../../src/components/RecorderView/Timer.tsx"],"sourcesContent":["//\n// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n//\n\nimport React, { memo, FC } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Moment from 'react-moment'\nimport { RootState, Dispatch } from '../../store'\n\nconst Timer: FC<TimerProps> = () => {\n  const { startTime, currentTime, recording } = useSelector((state: RootState) => ({\n    recording: state.recorder.recording,\n    startTime: state.recorder.startTime,\n    currentTime: state.recorder.currentTime,\n  }))\n\n  const dispatch = useDispatch<Dispatch>()\n\n  function handleTimerChanged(time: string) {\n    dispatch.recorder.setCurrentTime(time)\n  }\n\n  return (\n    <>\n      {startTime && recording ? (\n        <Moment\n          date={startTime}\n          interval={1000}\n          format='hh:mm:ss'\n          trim={false}\n          onChange={handleTimerChanged}\n          unix\n          durationFromNow\n        />\n      ) : (\n        currentTime\n      )}\n    </>\n  )\n}\n\nexport default memo(Timer)\n\ninterface TimerProps {}\n"],"names":["memo","_a","useSelector","state","recording","recorder","startTime","currentTime","dispatch","useDispatch","React","createElement","Moment","date","interval","format","trim","onChange","time","setCurrentTime","unix","durationFromNow"],"mappings":"2aA0CeA,EAAAA,EAAAA,MAhCe,WACtB,IAAAC,EAAwCC,EAAAA,aAAY,SAACC,GAAqB,MAAC,CAC/EC,UAAWD,EAAME,SAASD,UAC1BE,UAAWH,EAAME,SAASC,UAC1BC,YAAaJ,EAAME,SAASE,gBAHtBD,EAASL,EAAAK,UAAEC,EAAWN,EAAAM,YAAEH,EAASH,EAAAG,UAMnCI,EAAWC,EAAAA,cAMjB,OACEC,gDACGJ,GAAaF,EACZM,EAAA,QAAAC,cAACC,EAAM,QACL,CAAAC,KAAMP,EACNQ,SAAU,IACVC,OAAO,WACPC,MAAM,EACNC,SAZR,SAA4BC,GAC1BV,EAASH,SAASc,eAAeD,EAClC,EAWOE,MAAI,EACJC,iBACA,IAEF,EAIR"}