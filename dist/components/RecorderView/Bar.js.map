{"version":3,"file":"Bar.js","sources":["../../../src/components/RecorderView/Bar.tsx"],"sourcesContent":["//\n// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n//\n\nimport React, { type FC, useRef, memo } from 'react'\nimport useIntersectionObserver from '../../utils/customHooks/useIntersectionObserver'\nimport { store } from '../../store'\n\nexport const Bar: FC<BarProps> = memo(({ visibleContainer }) => {\n  const barRef = useRef<HTMLDivElement>(null)\n  const intersectionEntry: any = useIntersectionObserver(barRef, { root: visibleContainer || null })\n\n  const { frequency } = store.getState().recorder\n  if (barRef.current && intersectionEntry?.isIntersecting) {\n    barRef.current.style.height = `${frequency > 0.1 ? frequency * 100 : 10}%`\n  }\n\n  return (\n    <div\n      ref={barRef}\n      className='pi-h-1 pi-bg-emerald-700 dark:pi-bg-emerald-500'\n      style={{ width: '0.125rem', height: '10%' }}\n    />\n  )\n})\n\ninterface BarProps {\n  visibleContainer: HTMLDivElement | null\n}\n"],"names":["Bar","memo","_a","visibleContainer","barRef","useRef","intersectionEntry","useIntersectionObserver","root","frequency","store","getState","recorder","current","isIntersecting","style","height","concat","React","ref","className","width"],"mappings":"gRASaA,EAAoBC,EAAAA,MAAK,SAACC,GAAE,IAAAC,EAAgBD,EAAAC,iBACjDC,EAASC,SAAuB,MAChCC,EAAyBC,EAAAA,QAAwBH,EAAQ,CAAEI,KAAML,GAAoB,OAEnFM,EAAcC,EAAKA,MAACC,WAAWC,SAAQH,UAK/C,OAJIL,EAAOS,UAAWP,aAAiB,EAAjBA,EAAmBQ,kBACvCV,EAAOS,QAAQE,MAAMC,OAAS,GAAGC,OAAAR,EAAY,GAAkB,IAAZA,EAAkB,GAAE,MAIvES,EAAAA,6BACEC,IAAKf,EACLgB,UAAU,kDACVL,MAAO,CAAEM,MAAO,WAAYL,OAAQ,QAG1C"}