{"version":3,"file":"AudioView.js","sources":["../../../src/components/SettingsView/AudioView.tsx"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState, store } from '../../store'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck, faVolumeHigh } from '@fortawesome/free-solid-svg-icons'\nimport { eventDispatch, setJSONItem, useEventListener } from '../../utils'\nimport { SettingsHeader } from './SettingsHeader'\nimport { useTranslation } from 'react-i18next'\nimport { getCurrentAudioOutputDeviceId } from '../../lib/devices/devices'\n\nconst AudioView = () => {\n  const remoteAudioElement: any = useSelector((state: RootState) => state.player.remoteAudio)\n\n  const { t } = useTranslation()\n  const audioOutputDevices = store.select.mediaDevices.audioOutputDevices(store.getState())\n  const [selectedAudioOutput, setSelectedAudioOutput] = useState<string | null>(\n    getCurrentAudioOutputDeviceId() || null,\n  )\n  const handleClickAudioOutput = (audioOutputDevice: string) => {\n    setSelectedAudioOutput(audioOutputDevice)\n\n    remoteAudioElement?.current\n      .setSinkId(audioOutputDevice)\n      .then(function () {\n        console.info('Audio output device switch success!')\n        // set device to localstorage\n        setJSONItem('phone-island-audio-output-device', { deviceId: audioOutputDevice })\n\n        // dispatch event\n        eventDispatch('phone-island-call-audio-output-switched', {})\n      })\n      .catch(function (err) {\n        console.error('Audio output device switch error:', err)\n      })\n  }\n  useEventListener('phone-island-call-audio-output-switch', (data: DeviceInputOutputTypes) => {\n    handleClickAudioOutput(data.deviceId)\n  })\n\n  const [hoveredDevice, setHoveredDevice] = useState<string | null>(null)\n\n  return (\n    <div className='pi-flex pi-flex-col pi-w-full'>\n      {/* Title */}\n      <SettingsHeader title={t('Settings.Speakers')} tooltipPrefix='audio' />\n      {/* Audio List */}\n      <div className='pi-flex pi-flex-col pi-mt-2 pi-space-y-1 pi-max-h-48 pi-overflow-y-auto pi-scrollbar-thin pi-scrollbar-thumb-gray-400 pi-dark:scrollbar-thumb-gray-400 pi-scrollbar-thumb-rounded-full pi-scrollbar-thumb-opacity-50 dark:pi-scrollbar-track-gray-900 pi-scrollbar-track-gray-200 pi-dark:scrollbar-track-gray-900 pi-scrollbar-track-rounded-full pi-scrollbar-track-opacity-25'>\n        {audioOutputDevices.map((audioDevice, index) => (\n          <div\n            key={index}\n            className='pi-flex pi-items-center pi-justify-between pi-px-4 pi-py-3 pi-text-base pi-font-normal pi-leading-6 dark:pi-text-gray-200 pi-text-gray-700 hover:pi-bg-gray-200 dark:hover:pi-bg-gray-700 dark:pi-bg-gray-950 pi-bg-gray-50 pi-rounded-md pi-cursor-pointer'\n            onClick={() => handleClickAudioOutput(audioDevice?.deviceId)}\n            onMouseEnter={() => setHoveredDevice(audioDevice?.deviceId)}\n            onMouseLeave={() => setHoveredDevice(null)}\n          >\n            <div className='pi-flex pi-items-center'>\n              <FontAwesomeIcon icon={faVolumeHigh} className='pi-mr-2 pi-w-5 pi-h-5' />\n              <span>{audioDevice?.label || `Input device ${index + 1}`}</span>\n            </div>\n            <div className='pi-flex pi-items-center'>\n              {selectedAudioOutput === audioDevice?.deviceId && (\n                <FontAwesomeIcon\n                  icon={faCheck}\n                  className={`${\n                    hoveredDevice === audioDevice?.deviceId\n                      ? 'pi-text-gray-700 dark:pi-text-gray-200'\n                      : 'pi-text-emerald-700 dark:pi-text-emerald-500'\n                  } pi-w-5 pi-h-5`}\n                />\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\ninterface DeviceInputOutputTypes {\n  deviceId: string\n}\n\nexport default AudioView\n"],"names":["remoteAudioElement","useSelector","state","player","remoteAudio","t","useTranslation","audioOutputDevices","store","select","mediaDevices","getState","_a","useState","getCurrentAudioOutputDeviceId","selectedAudioOutput","setSelectedAudioOutput","handleClickAudioOutput","audioOutputDevice","current","setSinkId","then","console","info","setJSONItem","deviceId","eventDispatch","catch","err","error","useEventListener","data","_b","hoveredDevice","setHoveredDevice","React","createElement","className","SettingsHeader","title","tooltipPrefix","map","audioDevice","index","key","onClick","onMouseEnter","onMouseLeave","FontAwesomeIcon","icon","faVolumeHigh","label","faCheck","concat"],"mappings":"4uCAakB,WAChB,IAAMA,EAA0BC,eAAY,SAACC,GAAqB,OAAAA,EAAMC,OAAOC,WAAb,IAE1DC,EAAMC,qBACRC,EAAqBC,EAAKA,MAACC,OAAOC,aAAaH,mBAAmBC,EAAKA,MAACG,YACxEC,EAAgDC,EAAQA,SAC5DC,mCAAmC,MAD9BC,EAAmBH,EAAA,GAAEI,OAGtBC,EAAyB,SAACC,GAC9BF,EAAuBE,GAEvBlB,SAAAA,EAAoBmB,QACjBC,UAAUF,GACVG,MAAK,WACJC,QAAQC,KAAK,uCAEbC,EAAAA,YAAY,mCAAoC,CAAEC,SAAUP,IAG5DQ,gBAAc,0CAA2C,CAAA,EAC3D,IACCC,OAAM,SAAUC,GACfN,QAAQO,MAAM,oCAAqCD,EACrD,GACJ,EACAE,mBAAiB,yCAAyC,SAACC,GACzDd,EAAuBc,EAAKN,SAC9B,IAEM,IAAAO,EAAoCnB,EAAAA,SAAwB,MAA3DoB,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEtC,OACEG,EAAA,QAAAC,cAAA,MAAA,CAAKC,UAAU,iCAEbF,UAAAC,cAACE,EAAcA,eAAA,CAACC,MAAOlC,EAAE,qBAAsBmC,cAAc,UAE7DL,EAAAA,QAAAC,cAAA,MAAA,CAAKC,UAAU,oXACZ9B,EAAmBkC,KAAI,SAACC,EAAaC,GAAU,OAC9CR,EAAAA,QACEC,cAAA,MAAA,CAAAQ,IAAKD,EACLN,UAAU,8PACVQ,QAAS,WAAM,OAAA5B,EAAuByB,aAAA,EAAAA,EAAajB,SAAS,EAC5DqB,aAAc,WAAM,OAAAZ,EAAiBQ,aAAW,EAAXA,EAAajB,SAA9B,EACpBsB,aAAc,WAAM,OAAAb,EAAiB,QAErCC,EAAAA,QAAKC,cAAA,MAAA,CAAAC,UAAU,2BACbF,EAAC,QAAAC,cAAAY,mBAAgBC,KAAMC,eAAcb,UAAU,0BAC/CF,EAAA,QAAAC,cAAA,OAAA,MAAOM,eAAAA,EAAaS,QAAS,uBAAgBR,EAAQ,KAEvDR,EAAA,QAAAC,cAAA,MAAA,CAAKC,UAAU,2BACZtB,KAAwB2B,eAAAA,EAAajB,WACpCU,EAAAA,QAAAC,cAACY,EAAAA,gBAAe,CACdC,KAAMG,EAAOA,QACbf,UAAW,GACTgB,OAAApB,KAAkBS,aAAW,EAAXA,EAAajB,UAC3B,yCACA,+CACU,qBAKzB,KAIT"}