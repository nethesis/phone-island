{"version":3,"file":"index.js","sources":["../../../src/components/PhysicalRecorderView/index.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useRef, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState, store } from '../../store'\nimport { useTranslation } from 'react-i18next'\nimport Hangup from '../Hangup'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\nimport { useEventListener, eventDispatch } from '../../utils'\nimport { startAnnouncementRecording } from '../../services/offhour'\nimport { dispatchPhysicalRecordingSave } from '../../events'\nimport PhysicalRecordingTimer from './PhysicalRecordingTimer'\n\nexport const PhysicalRecorderView: FC<PhysicalRecorderViewProps> = () => {\n  const { isOpen } = useSelector((state: RootState) => state.island)\n  const { recording } = useSelector((state: RootState) => ({\n    recording: state.physicalRecorder.recording,\n  }))\n\n  const { username } = store.getState().currentUser\n  const visibleContainerRef = useRef<HTMLDivElement>(null)\n\n  // Initialize state dispatch\n  const dispatch = useDispatch<Dispatch>()\n\n  // Handle view close and reset state\n  useEffect(() => {\n    // Set visible container reference to recorder state\n    dispatch.recorder.setVisibleContainerRef(visibleContainerRef)\n\n    return () => {\n      dispatch.recorder.reset()\n    }\n  }, [])\n\n  const { t } = useTranslation()\n\n  async function handleStart() {\n    // Update the recorder state\n    dispatch.physicalRecorder.setRecording(true)\n    // Call the api to start the recording call\n    const data: { tempFilename: string } | null = await startAnnouncementRecording()\n    // Set the returned temp file name to the store\n    if (data.tempFilename) dispatch.physicalRecorder.setTempFilename(data.tempFilename)\n    eventDispatch('phone-island-recording-started', {})\n  }\n\n  // Save recording inside store and make api request\n  useEventListener('phone-island-physical-recording-open', () => {\n    handleStart()\n  })\n\n  const { recordingTempVariable } = store.getState().physicalRecorder\n  // recording true and conversation not empty recording is started\n  // recording true and conversation empty recording is stopped\n  useEventListener('phone-island-conversations', (data: { [key: string]: any }) => {\n    const keys = Object.keys(data)\n\n    keys.forEach((key) => {\n      if (key === username) {\n        let conversations = data[key]?.conversations\n\n        if (conversations) {\n          const conversationKeys = Object.keys(conversations)\n          if (\n            conversationKeys.length > 0 &&\n            conversations[conversationKeys[0]].counterpartName === 'REC'\n          ) {\n            // Set the start time of recording\n            dispatch.physicalRecorder.setStartTime(`${Date.now() / 1000}`)\n            let firstConversationKey = conversationKeys[0]\n            let userRecordingData = conversations[firstConversationKey]\n            if (userRecordingData) {\n              if (userRecordingData.chSource) {\n                let recordingCallInformation = {\n                  conversationId: userRecordingData.id,\n                  endpointId: userRecordingData.chSource.callerNum,\n                }\n                dispatch.physicalRecorder.setCallRecordingInformations({\n                  recordingCallInformation,\n                })\n              }\n            }\n          }\n          if (conversationKeys.length === 0 && recording && !recordingTempVariable) {\n            // close physical recording phone island view\n            dispatchPhysicalRecordingSave()\n            dispatch.island.setIslandView(null)\n            dispatch.physicalRecorder.setRecording(false)\n          }\n        }\n      }\n    })\n  })\n\n  return (\n    <>\n      {isOpen ? (\n        <div className=''>\n          {recordingTempVariable && (\n            <div className='pi-flex pi-w-full pi-justify-center pi-items-center pi-pt-4 pi-pb-9'>\n              <div className='pi-font-medium pi-text-4xl pi-w-fit pi-h-fit dark:pi-text-white'>\n                <PhysicalRecordingTimer />\n              </div>\n            </div>\n          )}\n          <div className='pi-flex pi-w-full pi-justify-center pi-items-center'>\n            {recordingTempVariable ? (\n              <div className='pi-sans pi-text-sm pi-w-fit pi-h-fit dark:pi-text-white'>\n                {t('Common.Close the call to stop recording')}\n              </div>\n            ) : (\n              <div className='pi-mt-12 pi-font-regular pi-text-lg pi-w-fit pi-h-fit dark:pi-text-white'>\n                {t('Common.Answer phone to start recording')}\n              </div>\n            )}\n          </div>\n          <div className='pi-grid pi-pt-2 pi-mt-8'>\n            <div className='pi-grid pi-justify-items-center'>\n              <Hangup description={t('Tooltip.Interrupt recording')} isPhysicalRecording />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className='pi-flex pi-justify-between pi-items-center'>\n          <div className='pi-font-medium pi-text-base'>{t('Common.Recording')}</div>\n          <div\n            className={`${\n              !isOpen ? 'pi-h-6 pi-w-6' : 'pi-h-12 pi-w-12'\n            } pi-flex pi-justify-center pi-items-center`}\n          >\n            <div\n              className={`${\n                !isOpen ? 'pi-h-4 pi-w-4 pi-rounded-full' : 'pi-h-8'\n              } pi-w-fit pi-flex pi-justify-center pi-items-center pi-gap-1 pi-overflow-hidden`}\n            >\n              <span\n                className={`${\n                  !isOpen ? 'pi-h-6 pi-w-6' : 'pi-w-8 pi-h-8'\n                } pi-animate-ping pi-absolute pi-inline-flex pi-rounded-full pi-bg-red-400 pi-opacity-75 `}\n              ></span>\n              <FontAwesomeIcon\n                className='pi-w-4 pi-h-6 pi-rotate-45 pi-text-red-500'\n                icon={faCircle}\n              ></FontAwesomeIcon>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport interface PhysicalRecorderViewProps {}\n"],"names":["isOpen","useSelector","state","island","recording","physicalRecorder","username","store","getState","currentUser","visibleContainerRef","useRef","dispatch","useDispatch","useEffect","recorder","setVisibleContainerRef","reset","t","useTranslation","useEventListener","setRecording","startAnnouncementRecording","data","_a","sent","tempFilename","setTempFilename","eventDispatch","handleStart","recordingTempVariable","Object","keys","forEach","key","conversations","conversationKeys","length","counterpartName","setStartTime","concat","Date","now","userRecordingData","chSource","recordingCallInformation","conversationId","id","endpointId","callerNum","setCallRecordingInformations","dispatchPhysicalRecordingSave","setIslandView","React","createElement","Fragment","className","PhysicalRecordingTimer","Hangup","description","isPhysicalRecording","FontAwesomeIcon","icon","faCircle"],"mappings":"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"}