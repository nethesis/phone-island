{"version":3,"file":"useSideViewLogic.js","sources":["../../../../src/components/SideView/hooks/useSideViewLogic.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState, store } from '../../../store'\nimport { getAvailableDevices } from '../../../utils/deviceUtils'\nimport JanusLib from '../../../lib/webrtc/janus.js'\nimport { isFromTrunk } from '../../../lib/user/extensions'\nimport { checkWebCamPermission } from '../../../lib/devices/devices'\nimport { eventDispatch } from '../../../utils'\n\nexport const useSideViewLogic = (uaType?: string) => {\n  const dispatch = useDispatch<Dispatch>()\n  const userInformation = useSelector((state: RootState) => state.currentUser)\n  const allUsersInformation = useSelector((state: RootState) => state.users)\n  const paramUrlData = useSelector((state: RootState) => state.paramUrl)\n  const videoInputDevices = store.select.mediaDevices.videoInputDevices(store.getState())\n  const janus = useRef<any>(JanusLib)\n  const conversations = useSelector((state: RootState) => state.currentUser.conversations)\n\n  const [availableDevices, setAvailableDevices] = useState([])\n  const [isVideoCallButtonVisible, setIsVideoCallButtonVisible] = useState(true)\n\n  const closeSideViewAndLaunchEvent = useCallback(\n    (viewType: any) => {\n      dispatch.island.toggleSideViewVisible(false)\n      if (viewType === 'openUrl') {\n        const activeConversation = Object.values(conversations).find(\n          (conv) => Object.keys(conv).length > 0,\n        )\n        const conversationData = activeConversation ? Object.values(activeConversation)[0] : null\n\n        if (conversationData?.connected && conversationData?.direction === 'in') {\n          const eventData = {\n            counterpartNum: conversationData.counterpartNum,\n            counterpartName: conversationData.counterpartName,\n            owner: conversationData.owner,\n            uniqueId: conversationData.uniqueId,\n            throughQueue: conversationData.throughQueue,\n            throughTrunk: conversationData.throughTrunk,\n            direction: conversationData.direction,\n            connected: conversationData.connected,\n          }\n          eventDispatch('phone-island-url-parameter-opened', eventData)\n        }\n      } else if (viewType !== null) {\n        dispatch.island.setIslandView(viewType)\n      }\n    },\n    [dispatch.island, conversations],\n  )\n\n  const checkCameraPermission = useCallback(async () => {\n    if (videoInputDevices.length > 0) {\n      const isWebCamAccepted = await checkWebCamPermission()\n      setIsVideoCallButtonVisible(isWebCamAccepted)\n      return isWebCamAccepted\n    } else {\n      setIsVideoCallButtonVisible(false)\n      return false\n    }\n  }, [videoInputDevices.length])\n\n  const goToVideoCall = useCallback(async () => {\n    const cameraPermission = await checkCameraPermission()\n    if (cameraPermission) {\n      closeSideViewAndLaunchEvent('video')\n      store.dispatch.currentCall.updateCurrentCall({\n        isLocalVideoEnabled: true,\n        isStartingVideoCall: true,\n      })\n    }\n  }, [checkCameraPermission, closeSideViewAndLaunchEvent])\n\n  const goToScreenSharing = useCallback(() => {\n    closeSideViewAndLaunchEvent('video')\n    store.dispatch.screenShare.update({\n      isStartingScreenShare: true,\n    })\n  }, [closeSideViewAndLaunchEvent])\n\n  const permissions = useMemo(\n    () => userInformation?.profile?.macro_permissions || {},\n    [userInformation?.profile?.macro_permissions],\n  )\n\n  const userCapabilities = useMemo(\n    () => ({\n      canRecord: permissions?.settings?.permissions?.recording?.value || false,\n      canShareScreen:\n        janus.current.webRTCAdapter.browserDetails.browser !== 'safari' &&\n        (permissions?.nethvoice_cti?.permissions?.screen_sharing?.value || false),\n      canSwitchDevice: availableDevices?.length > 0,\n    }),\n    [\n      permissions?.settings?.permissions?.recording?.value,\n      permissions?.nethvoice_cti?.permissions?.screen_sharing?.value,\n      availableDevices?.length,\n      userInformation?.default_device?.type,\n      uaType,\n    ],\n  )\n\n  const isUrlButtonEnabled = useMemo(() => {\n    const activeConversation = Object.values(conversations).find(\n      (conv) => Object.keys(conv).length > 0,\n    )\n    const conversationData = activeConversation ? Object.values(activeConversation)[0] : null\n\n    // If param url type is 'never', return false\n    if (paramUrlData.openParamUrlType === 'never') {\n      return false\n    }\n\n    if (!conversationData?.connected || conversationData?.direction !== 'in') {\n      return false\n    }\n\n    // open param url type is set to 'button'\n    if (paramUrlData.openParamUrlType === 'button') {\n      if (paramUrlData.onlyQueues && conversationData?.throughQueue) {\n        return true\n      } else if (\n        !paramUrlData.onlyQueues &&\n        (isFromTrunk(conversationData.counterpartNum) || conversationData?.throughQueue)\n      ) {\n        return true\n      }\n    }\n\n    return false\n  }, [conversations, paramUrlData.onlyQueues, paramUrlData.openParamUrlType])\n\n  useEffect(() => {\n    if (userInformation && allUsersInformation) {\n      const devices = getAvailableDevices(userInformation, allUsersInformation)\n      setAvailableDevices(devices)\n    }\n  }, [userInformation, allUsersInformation])\n\n  return {\n    userInformation,\n    availableDevices,\n    videoInputDevices,\n    isVideoCallButtonVisible,\n    isUrlButtonEnabled,\n    hasValidUrl: paramUrlData.hasValidUrl,\n    ...userCapabilities,\n    goToVideoCall,\n    goToScreenSharing,\n    closeSideViewAndLaunchEvent,\n  }\n}\n"],"names":["uaType","dispatch","useDispatch","userInformation","useSelector","state","currentUser","allUsersInformation","users","paramUrlData","paramUrl","videoInputDevices","store","select","mediaDevices","getState","janus","useRef","JanusLib","conversations","_j","useState","availableDevices","setAvailableDevices","_k","isVideoCallButtonVisible","setIsVideoCallButtonVisible","closeSideViewAndLaunchEvent","useCallback","viewType","island","toggleSideViewVisible","activeConversation","Object","values","find","conv","keys","length","conversationData","connected","direction","eventData","counterpartNum","counterpartName","owner","uniqueId","throughQueue","throughTrunk","eventDispatch","setIslandView","checkCameraPermission","__awaiter","checkWebCamPermission","isWebCamAccepted","_a","sent","goToVideoCall","currentCall","updateCurrentCall","isLocalVideoEnabled","isStartingVideoCall","goToScreenSharing","screenShare","update","isStartingScreenShare","permissions","useMemo","profile","macro_permissions","userCapabilities","canRecord","_c","settings","_b","recording","value","canShareScreen","current","webRTCAdapter","browserDetails","browser","_f","_e","nethvoice_cti","_d","screen_sharing","canSwitchDevice","_g","_h","default_device","type","isUrlButtonEnabled","openParamUrlType","onlyQueues","isFromTrunk","useEffect","devices","getAvailableDevices","__assign","hasValidUrl"],"mappings":"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"}