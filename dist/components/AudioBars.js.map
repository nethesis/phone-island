{"version":3,"file":"AudioBars.js","sources":["../../src/components/AudioBars.tsx"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useEffect, useRef, useCallback } from 'react'\nimport { ContextSourceType } from '../models/audioBars'\nimport { useDispatch } from 'react-redux'\nimport { store } from '../store'\nimport { Dispatch } from '../store'\n\n// The map for the large versione of the audio bars\nconst BARS_CONFIG = {\n  large: {\n    0: 4,\n    1: 3,\n    2: 2,\n    3: 1,\n    4: 1,\n    5: 2,\n    6: 3,\n    7: 4,\n  },\n  // The map for the small versione of the audio bars\n\n  small: {\n    0: 2,\n    1: 1,\n    2: 1,\n    3: 2,\n  },\n}\n\ninterface AudioBarsProps {\n  audioStream?: MediaStream | null\n  audioElement?: HTMLAudioElement | null\n  size?: 'large' | 'small'\n  paused?: boolean\n}\n\ninterface BarsMapType {\n  [key: number]: number\n}\n\n/**\n * This component shows a dynamic audio spectrum given an audio stream\n *\n * @param audioStream An audio stream to analyse\n * @param audioElement An audio element to analyse\n */\nexport const AudioBars: FC<AudioBarsProps> = ({\n  audioStream = null,\n  audioElement = null,\n  paused = false,\n  size = 'large',\n}) => {\n  // Initialize the main elements\n  const containerElement = useRef<HTMLDivElement | null>(null)\n  const animationRequest = useRef<number | null>(null)\n  const context = useRef<AudioContext | null>(null)\n  const analyser = useRef<AnalyserNode | null>(null)\n  const source = useRef<ContextSourceType>(null)\n\n  const barsMap: BarsMapType = BARS_CONFIG[size]\n  const dispatch = useDispatch<Dispatch>()\n\n  // The function that renders the frames of animation\n  const animate = useCallback(() => {\n    if (!analyser.current || !containerElement.current?.children) {\n      return\n    }\n\n    try {\n      const frequencyData = new Uint8Array(analyser.current.frequencyBinCount)\n      analyser.current.getByteFrequencyData(frequencyData)\n      // Update the height of each bar based on frequency data\n      const bars = containerElement.current.children\n      const barCount = Object.keys(barsMap).length\n\n      for (let i = 0; i < barCount; ++i) {\n        const value = frequencyData[barsMap[i]] / 255\n        const bar = bars[i] as HTMLElement\n\n        if (bar) {\n          bar.style.height = value > 0 ? `${100 * value}%` : '0%'\n        }\n      }\n\n      // Continue animation if not paused\n      if (!paused) {\n        animationRequest.current = requestAnimationFrame(animate)\n      }\n    } catch (err) {\n      console.error('AudioBars animation error:', err)\n    }\n  }, [barsMap, paused])\n\n  // Handles audio configuration and animation\n  useEffect(() => {\n    // Clean up any previous animations\n    const cleanupAnimation = () => {\n      if (animationRequest.current) {\n        cancelAnimationFrame(animationRequest.current)\n        animationRequest.current = null\n      }\n    }\n\n    // Disconnect audio source if it exists\n    const disconnectSource = () => {\n      if (source.current) {\n        try {\n          source.current.disconnect()\n        } catch (e) {\n          // Ignore disconnection errors\n        }\n      }\n    }\n\n    // Check if audio stream is active\n    if (audioStream && !audioStream.active) {\n      console.warn('AudioBars: audio stream is not active')\n      return cleanupAnimation\n    }\n\n    try {\n      const { audioElementContext, audioElementAnalyser, audioElementSource, isReady } =\n        store.getState().audioBars\n\n      // Initialize audio context and analyser once\n      if (audioElement && isReady) {\n        // The source is an audio element\n        context.current = audioElementContext\n        analyser.current = audioElementAnalyser\n        source.current = audioElementSource\n      } else {\n        // The source is an audio stream or isn't ready\n        context.current = new AudioContext()\n        analyser.current = context.current.createAnalyser()\n        analyser.current.smoothingTimeConstant = 0.8\n        analyser.current.fftSize = 32\n\n        // Create the media source stream\n        if (audioStream) {\n          source.current = context.current.createMediaStreamSource(audioStream)\n        } else if (audioElement) {\n          source.current = context.current.createMediaElementSource(audioElement)\n\n          // Save audio elements to the store\n          dispatch.audioBars.setAudioElementContext(context.current)\n          dispatch.audioBars.setAudioElementAnalyser(analyser.current)\n          dispatch.audioBars.setAudioElementSource(source.current)\n          dispatch.audioBars.setIsReady(true)\n        }\n      }\n\n      // Connect the audio source to the analyser\n      if (analyser.current && source.current) {\n        // Disconnect any existing connections\n        disconnectSource()\n\n        // Connect source -> analyser (-> destination if it's an audio element)\n        source.current.connect(analyser.current)\n        if (audioElement) {\n          analyser.current.connect(context.current!.destination)\n        }\n\n        // Start animation if not paused\n        if (!paused) {\n          cleanupAnimation()\n          animationRequest.current = requestAnimationFrame(animate)\n        }\n      }\n    } catch (err) {\n      console.error('AudioBars initialization error:', err)\n      cleanupAnimation()\n    }\n\n    // Cleanup when component is unmounted\n    return () => {\n      cleanupAnimation()\n      disconnectSource()\n    }\n  }, [audioStream, audioElement, animate, dispatch.audioBars, paused])\n\n  // Handle paused state or size changes\n  useEffect(() => {\n    if (analyser.current) {\n      // Stop current animation\n      if (animationRequest.current) {\n        cancelAnimationFrame(animationRequest.current)\n        animationRequest.current = null\n      }\n\n      // Restart if not paused\n      if (!paused) {\n        animationRequest.current = requestAnimationFrame(animate)\n      }\n    }\n  }, [size, paused, animate])\n\n  return (\n    <div\n      className={`${\n        size === 'small' ? 'pi-h-6 pi-w-6' : 'pi-h-12 pi-w-12'\n      } pi-flex pi-justify-center pi-items-center`}\n    >\n      {/* The bars container  */}\n      <div\n        className={`${\n          size === 'small' ? 'pi-h-6' : 'pi-h-8'\n        } pi-w-fit pi-flex pi-justify-center pi-items-center pi-gap-1 pi-overflow-hidden`}\n        ref={containerElement}\n      >\n        {/* Every single bar */}\n        {(audioStream || audioElement) &&\n          Object.keys(barsMap).map((key) => (\n            <span\n              key={key}\n              className='pi-bg-emerald-700 dark:pi-bg-emerald-600 pi-w-0.5 pi-rounded-sm'\n            ></span>\n          ))}\n      </div>\n    </div>\n  )\n}\n"],"names":["BARS_CONFIG","large","small","_a","_b","audioStream","_c","audioElement","_d","paused","_e","size","containerElement","useRef","animationRequest","context","analyser","source","barsMap","dispatch","useDispatch","animate","useCallback","current","children","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","bars","barCount","Object","keys","length","i","value","bar","style","height","concat","requestAnimationFrame","err","console","error","useEffect","cleanupAnimation","cancelAnimationFrame","disconnectSource","disconnect","e","active","warn","store","getState","audioBars","audioElementContext","audioElementAnalyser","audioElementSource","isReady","AudioContext","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","createMediaElementSource","setAudioElementContext","setAudioElementAnalyser","setAudioElementSource","setIsReady","connect","destination","React","createElement","className","ref","map","key"],"mappings":"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"}