{"version":3,"file":"index.js","sources":["../../../src/components/VideoView/index.tsx"],"sourcesContent":["// Copyright (C) 2025 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type FC, useEffect, useRef, useState } from 'react'\nimport { Button } from '../Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, RootState, store } from '../../store'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCompress,\n  faDisplay,\n  faExpand,\n  faMicrophone,\n  faMicrophoneSlash,\n  faPause,\n  faPlay,\n  faStop,\n  faVideo,\n  faVideoSlash,\n} from '@fortawesome/free-solid-svg-icons'\nimport { t } from 'i18next'\nimport { eventDispatch, useEventListener, useIsomorphicLayoutEffect } from '../../utils'\nimport Hangup from '../Hangup'\nimport {\n  muteCurrentCall,\n  pauseCurrentCall,\n  recordCurrentCall,\n  unmuteCurrentCall,\n  unpauseCurrentCall,\n} from '../../lib/phone/call'\nimport { JanusTrack, JanusTypes } from '../../types/webrtc'\nimport JanusLib from '../../lib/webrtc/janus.js'\nimport Avatar from '../CallView/Avatar'\nimport Timer from '../CallView/Timer'\nimport { isPhysical } from '../../lib/user/default_device'\nimport { AudioBars } from '../AudioBars'\nimport { CustomThemedTooltip } from '../CustomThemedTooltip'\nimport { faDisplaySlash, faRecord } from '@nethesis/nethesis-solid-svg-icons'\nimport { getCurrentVideoInputDeviceId } from '../../lib/devices/devices'\nimport { getInitials } from '../../lib/avatars/avatars'\nimport { checkWebCamPermission } from '../../lib/devices/devices'\n\nexport interface VideoViewProps {}\n\nexport type ScreenSharingMessage = {\n  message: 'screenSharingStart' | 'screenSharingStop'\n  roomId: string\n  destUser: string\n  callUser: string\n}\n\nexport const VideoView: FC<VideoViewProps> = () => {\n  const dispatch = useDispatch<Dispatch>()\n  const {\n    muted,\n    startTime,\n    isRecording,\n    paused,\n    isLocalVideoEnabled,\n    showRemoteVideoPlaceHolder,\n    hasVideoTrackAdded,\n    displayName,\n    isStartingVideoCall,\n  } = useSelector((state: RootState) => state.currentCall)\n  const {\n    localTracks,\n    localVideos,\n    role: screenShareRole,\n    active: screenShareActive,\n    isStartingScreenShare,\n    isJoiningScreenShare,\n    isLeavingScreenShare,\n  } = useSelector((state: RootState) => state.screenShare)\n  const intrudeListenStatus = useSelector((state: RootState) => state.listen)\n  const { isOpen } = useSelector((state: RootState) => state.island)\n  const { janusInstance, remoteAudioStream } = useSelector((state: RootState) => state.webrtc)\n  const userInfo = store.getState().currentUser\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [isUiShown, setUiShown] = useState(false)\n  const uiTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const screenShareViewRef = useRef(null)\n  const localScreen = useRef<HTMLVideoElement>(null)\n  const remoteScreen = useRef<HTMLVideoElement>(null)\n  const localVideo = useRef<HTMLVideoElement>(null)\n  const largeRemoteVideo = useRef<HTMLVideoElement>(null)\n  const smallRemoteVideo = useRef<HTMLVideoElement>(null)\n  const janus = useRef<JanusTypes>(JanusLib)\n  const videoInputDevices = store.select.mediaDevices.videoInputDevices(store.getState())\n\n  useIsomorphicLayoutEffect(() => {\n    dispatch.player.updatePlayer({\n      localScreen: localScreen,\n      remoteScreen: remoteScreen,\n      localVideo: localVideo,\n      largeRemoteVideo: largeRemoteVideo,\n      smallRemoteVideo: smallRemoteVideo,\n    })\n  }, [])\n\n  // component did mount\n  useEffect(() => {\n    updateScreenStreams()\n    updateVideoStreams()\n\n    // register for full screen change\n    addEventListener('fullscreenchange', handleFullscreenChange)\n\n    return () => {\n      removeEventListener('fullscreenchange', handleFullscreenChange)\n\n      // clear timeout\n      if (uiTimeoutRef.current) {\n        clearTimeout(uiTimeoutRef.current)\n      }\n    }\n  }, [])\n\n  // starting videocall\n  useEffect(() => {\n    if (isStartingVideoCall) {\n      enableVideo()\n      dispatch.currentCall.updateCurrentCall({\n        isStartingVideoCall: false,\n      })\n    }\n  }, [isStartingVideoCall])\n\n  // starting screen sharing\n  useEffect(() => {\n    if (isStartingScreenShare) {\n      initAndStartScreenShare()\n      store.dispatch.screenShare.update({\n        isStartingScreenShare: false,\n      })\n    }\n  }, [isStartingScreenShare])\n\n  // joining screen sharing\n  useEffect(() => {\n    if (isJoiningScreenShare) {\n      initAndJoinScreenShare()\n      store.dispatch.screenShare.update({\n        isJoiningScreenShare: false,\n      })\n    }\n  }, [isJoiningScreenShare])\n\n  // leaving screen sharing\n  useEffect(() => {\n    if (isLeavingScreenShare) {\n      leaveScreenShare()\n      store.dispatch.screenShare.update({\n        isLeavingScreenShare: false,\n      })\n    }\n  }, [isLeavingScreenShare])\n\n  // isOpen changed\n  useEffect(() => {\n    updateScreenStreams()\n    updateVideoStreams()\n  }, [isOpen])\n\n  const updateVideoStreams = () => {\n    const localVideoElement = store.getState().player.localVideo\n    const largeRemoteVideoElement = store.getState().player.largeRemoteVideo\n    const smallRemoteVideoElement = store.getState().player.smallRemoteVideo\n    const { localVideoStream, remoteVideoStream } = store.getState().webrtc\n\n    // local video stream\n\n    if (localVideoElement?.current) {\n      if (janus.current.attachMediaStream) {\n        janus.current.attachMediaStream(localVideoElement.current, localVideoStream as MediaStream)\n      }\n    }\n\n    // large remote video stream\n\n    if (largeRemoteVideoElement?.current && janus.current.attachMediaStream) {\n      janus.current.attachMediaStream(\n        largeRemoteVideoElement.current,\n        remoteVideoStream as MediaStream,\n      )\n    }\n\n    // small remote video stream\n\n    if (smallRemoteVideoElement?.current && janus.current.attachMediaStream) {\n      janus.current.attachMediaStream(\n        smallRemoteVideoElement.current,\n        remoteVideoStream as MediaStream,\n      )\n    }\n  }\n\n  const handleFullscreenChange = () => {\n    setIsFullscreen(!!document.fullscreenElement)\n  }\n\n  const toggleFullScreen = () => {\n    if (document.fullscreenElement) {\n      // exit full screen\n      document.exitFullscreen()\n      eventDispatch('phone-island-fullscreen-exited', {})\n    } else {\n      // enter full screen\n      if (screenShareViewRef.current) {\n        ;(screenShareViewRef.current as HTMLElement).requestFullscreen()\n        eventDispatch('phone-island-fullscreen-entered', {})\n      }\n    }\n  }\n  useEventListener('phone-island-fullscreen-enter', () => {\n    toggleFullScreen()\n  })\n  useEventListener('phone-island-fullscreen-exit', () => {\n    toggleFullScreen()\n  })\n\n  const newRemoteFeed = (id, display) => {\n    // A new feed has been published, create a new plugin handle and attach to it as a listener\n\n    dispatch.screenShare.update({\n      source: id,\n    })\n\n    let remoteFeed: any = null\n    janusInstance?.attach({\n      plugin: 'janus.plugin.videoroom',\n      opaqueId: janus.current.randomString(32),\n      success: function (pluginHandle) {\n        remoteFeed = pluginHandle\n\n        dispatch.screenShare.update({\n          remoteFeed: pluginHandle,\n        })\n        remoteFeed.remoteTracks = {}\n        remoteFeed.remoteVideos = 0\n        janus.current.log?.(\n          'Plugin attached! (' + remoteFeed.getPlugin() + ', id=' + remoteFeed.getId() + ')',\n        )\n        janus.current.log?.('  -- This is a subscriber')\n        // We wait for the plugin to send us an offer\n        const { room } = store.getState().screenShare\n\n        let listen = {\n          request: 'join',\n          room: room,\n          ptype: 'subscriber',\n          feed: id,\n        }\n        remoteFeed.send({ message: listen })\n      },\n      error: function (error) {\n        janus.current.error?.('Error attaching videoroom plugin', error)\n      },\n      iceState: function (state) {\n        janus.current.log?.('ICE state (feed #' + remoteFeed.rfindex + ') changed to ' + state)\n      },\n      webrtcState: function (on) {\n        janus.current.log?.(\n          'Janus says this WebRTC PeerConnection (feed #' +\n            remoteFeed.rfindex +\n            ') is ' +\n            (on ? 'up' : 'down') +\n            ' now',\n        )\n      },\n      slowLink: function (uplink, lost, mid) {\n        janus.current.warn?.(\n          'Janus reports problems ' +\n            (uplink ? 'sending' : 'receiving') +\n            ' packets on mid ' +\n            mid +\n            ' (' +\n            lost +\n            ' lost packets)',\n        )\n      },\n      onmessage: function (msg, jsep) {\n        janus.current.debug?.(' ::: Got a message (listener) :::', msg)\n        let event = msg['videoroom']\n        janus.current.debug?.('Event: ' + event)\n        if (event) {\n          if (event === 'attached') {\n            // Subscriber created and attached\n            janus.current.log?.(\n              'Successfully attached to feed ' + id + ' (' + display + ') in room ' + msg['room'],\n            )\n          } else {\n            janus.current.warn?.('Unhandled event: ' + event)\n          }\n        }\n        if (jsep) {\n          janus.current.debug?.('Handling SDP as well...', jsep)\n          // Answer and attach\n          remoteFeed.createAnswer({\n            jsep: jsep,\n            // We only specify data channels here, as this way in\n            // case they were offered we'll enable them. Since we\n            // don't mention audio or video tracks, we autoaccept them\n            // as recvonly (since we won't capture anything ourselves)\n            tracks: [{ type: 'data' }],\n            success: function (jsep) {\n              janus.current.debug?.('Got SDP!', jsep)\n\n              const { room } = store.getState().screenShare\n\n              let body = { request: 'start', room: room }\n              remoteFeed.send({ message: body, jsep: jsep })\n            },\n            error: function (error) {\n              janus.current.error?.('WebRTC error:', error)\n            },\n          })\n        }\n      },\n      // eslint-disable-next-line no-unused-vars\n      onlocaltrack: function (track, on) {\n        // The subscriber stream is recvonly, we don't expect anything here\n      },\n      onremotetrack: function (track, mid, on, metadata) {\n        janus.current.debug?.(\n          'Remote track (mid=' +\n            mid +\n            ') ' +\n            (on ? 'added' : 'removed') +\n            (metadata ? ' (' + metadata.reason + ') ' : '') +\n            ':',\n          track,\n        )\n        // Screen sharing tracks are sometimes muted/unmuted by browser\n        // when data is not flowing fast enough; this can make streams blink.\n        // We can ignore these.\n        if (\n          track.kind === 'video' &&\n          metadata &&\n          (metadata.reason === 'mute' || metadata.reason === 'unmute')\n        ) {\n          janus.current.log?.('Ignoring mute/unmute on screen-sharing track.')\n          return\n        }\n        if (!on) {\n          const { remoteScreenStream } = store.getState().screenShare\n          janus.current.stopAllTracks(remoteScreenStream)\n          dispatch.screenShare.update({ active: false })\n          return\n        }\n        // If we're here, a new track was added\n        if (track.kind === 'video') {\n          // New video track: create a stream out of it\n          let stream = new MediaStream([track])\n\n          // Save the new video stream to the store\n          store.dispatch.screenShare.update({ remoteScreenStream: stream })\n\n          remoteFeed.remoteTracks[mid] = stream\n          janus.current.log?.('Created remote video stream: ' + stream)\n          const remoteScreenElement = store.getState().player.remoteScreen\n\n          if (remoteScreenElement?.current) {\n            janus.current.attachMediaStream?.(remoteScreenElement.current, stream)\n          }\n        }\n      },\n      oncleanup: function () {\n        janus.current.log?.(' ::: Got a cleanup notification (remote feed ' + id + ') :::')\n        remoteFeed.remoteTracks = {}\n        remoteFeed.remoteVideos = 0\n      },\n    })\n  }\n\n  const enableVideo = () => {\n    const { sipcall }: { sipcall: any } = store.getState().webrtc\n    store.dispatch.currentCall.updateCurrentCall({\n      isLocalVideoEnabled: true,\n    })\n    const tracks: JanusTrack[] = []\n    const currentVideoInputDeviceId = getCurrentVideoInputDeviceId()\n\n    const track: Partial<JanusTrack> = {\n      type: 'video',\n      recv: true,\n    }\n\n    if (currentVideoInputDeviceId) {\n      track.capture = { deviceId: { exact: currentVideoInputDeviceId } }\n    } else {\n      track.capture = true\n    }\n\n    const { hasVideoTrackAdded } = store.getState().currentCall\n\n    if (!hasVideoTrackAdded) {\n      track.add = true\n      dispatch.currentCall.setVideoTrackAdded(true)\n    } else {\n      // replace video track (video track has been previously added and removed)\n      track.replace = true\n      track.mid = '1'\n    }\n    tracks.push(track as JanusTrack)\n\n    sipcall.createOffer({\n      tracks: tracks,\n      success: function (jsep) {\n        sipcall.send({ message: { request: 'update' }, jsep: jsep })\n        eventDispatch('phone-island-video-enabled', {})\n      },\n      error: function (error) {\n        console.error('WebRTC error... ' + JSON.stringify(error))\n      },\n    })\n  }\n  useEventListener('phone-island-video-enable', () => {\n    enableVideo()\n  })\n\n  const disableVideo = () => {\n    const { sipcall, localVideoStream }: { sipcall: any; localVideoStream: MediaStream | null } =\n      store.getState().webrtc\n\n    janus.current.stopAllTracks(localVideoStream)\n    store.dispatch.webrtc.updateLocalVideoStream(null)\n    store.dispatch.currentCall.setLocalVideoEnabled(false)\n    const tracks: JanusTrack[] = []\n    tracks.push({ type: 'video', mid: '1', remove: true })\n\n    sipcall.createOffer({\n      tracks: tracks,\n      success: function (jsep) {\n        sipcall.send({ message: { request: 'update' }, jsep: jsep })\n        eventDispatch('phone-island-video-disabled', {})\n      },\n      error: function (error) {\n        console.error('WebRTC error... ' + JSON.stringify(error))\n      },\n    })\n  }\n  useEventListener('phone-island-video-disable', () => {\n    disableVideo()\n  })\n\n  const toggleVideo = async () => {\n    let cameraPermission = await checkCameraPermission()\n    if (cameraPermission) {\n      if (isLocalVideoEnabled) {\n        disableVideo()\n      } else {\n        enableVideo()\n      }\n    }\n  }\n\n  const shareScreen = () => {\n    if (!janus.current.isExtensionEnabled()) {\n      janus.current.error?.(\n        \"This browser doesn't support screensharing (getDisplayMedia unavailable)\",\n      )\n      return\n    }\n\n    // Create a new room\n    const roomName = janus.current.randomString(32)\n\n    let create = {\n      request: 'create',\n      description: roomName,\n      bitrate: 500000,\n      publishers: 1,\n    }\n\n    const { plugin } = store.getState().screenShare\n\n    plugin.send({\n      message: create,\n      success: function (result) {\n        if (result['error']) {\n          janus.current.error?.(\"Couldn't create room: \" + result['error'])\n          return\n        }\n        let event = result['videoroom']\n        janus.current.debug?.('Event: ' + event)\n        if (event) {\n          // Our own screen sharing session has been created, join it\n\n          const room = result['room']\n          // Set room to the store\n          dispatch.screenShare.update({\n            room: room,\n          })\n\n          janus.current.log?.('Screen sharing session created: ' + room)\n\n          const { username } = store.getState().currentUser\n\n          let register = {\n            request: 'join',\n            room: room,\n            ptype: 'publisher',\n            display: username,\n          }\n          plugin.send({ message: register })\n        }\n      },\n    })\n  }\n\n  const initScreenShare = () => {\n    janusInstance?.attach({\n      plugin: 'janus.plugin.videoroom',\n      opaqueId: janus.current.randomString(32),\n      success: function (pluginHandle) {\n        // Set plugin to the store\n        dispatch.screenShare.update({\n          plugin: pluginHandle,\n        })\n        const { role } = store.getState().screenShare\n\n        if (role === 'publisher') {\n          // trigger event to nethlink\n          eventDispatch('phone-island-screen-share-initialized', {})\n\n          setTimeout(function () {\n            shareScreen()\n          }, 500)\n        } else if (role === 'listener') {\n          joinScreenShare()\n        }\n        eventDispatch('phone-island-screen-share-started', {})\n      },\n      error: function (error) {\n        janus.current.error?.('Error attaching videoroom plugin', error)\n      },\n      consentDialog: function (on) {},\n      iceState: function (state) {\n        janus.current.log?.('ICE state changed to ' + state)\n      },\n      mediaState: function (medium, on) {\n        janus.current.log?.('Janus ' + (on ? 'started' : 'stopped') + ' receiving our ' + medium)\n      },\n      webrtcState: function (on) {\n        janus.current.log?.(\n          'Janus says our WebRTC PeerConnection is ' + (on ? 'up' : 'down') + ' now',\n        )\n      },\n      slowLink: function (uplink, lost, mid) {\n        janus.current.warn?.(\n          'Janus reports problems ' +\n            (uplink ? 'sending' : 'receiving') +\n            ' packets on mid ' +\n            mid +\n            ' (' +\n            lost +\n            ' lost packets)',\n        )\n      },\n      onmessage: function (msg, jsep) {\n        janus.current.debug?.(' ::: Got a message (publisher) :::', msg)\n        const { plugin, role } = store.getState().screenShare\n        const event = msg['videoroom']\n        janus.current.debug?.('Event: ' + event)\n\n        if (event) {\n          if (event === 'joined') {\n            if (role === 'publisher') {\n              // This is our session, publish our stream\n              janus.current.debug?.('Negotiating WebRTC stream for our screen')\n\n              plugin.createOffer({\n                // We want sendonly audio and screensharing\n                tracks: [\n                  { type: 'audio', capture: true, recv: false },\n                  { type: 'screen', capture: true, recv: false },\n                ],\n                success: function (jsep) {\n                  janus.current.debug?.('Got publisher SDP!', jsep)\n                  let publish = { request: 'configure', audio: true, video: true }\n                  plugin.send({ message: publish, jsep: jsep })\n                },\n                error: function (error) {\n                  janus.current.error?.('WebRTC error:', error)\n                  dispatch.screenShare.update({ active: false, role: '' })\n                },\n              })\n            } else {\n              // We're just watching a session, any feed to attach to?\n              if (msg['publishers']) {\n                let list = msg['publishers']\n                janus.current.debug?.('Got a list of available publishers/feeds:', list)\n                for (let f in list) {\n                  if (list[f]['dummy']) continue\n                  let id = list[f]['id']\n                  let display = list[f]['display']\n                  janus.current.debug?.('  >> [' + id + '] ' + display)\n                  newRemoteFeed(id, display)\n                }\n              }\n            }\n          } else if (event === 'event') {\n            // Any feed to attach to?\n            if (role === 'listener' && msg['publishers']) {\n              let list = msg['publishers']\n              janus.current.debug?.('Got a list of available publishers/feeds:', list)\n              for (let f in list) {\n                if (list[f]['dummy']) continue\n                let id = list[f]['id']\n                let display = list[f]['display']\n                janus.current.debug?.('  >> [' + id + '] ' + display)\n                newRemoteFeed(id, display)\n              }\n            } else if (msg['leaving']) {\n              // One of the publishers has gone away?\n              let leaving = msg['leaving']\n              janus.current.log?.('Publisher left: ' + leaving)\n            } else if (msg['error']) {\n              janus.current.error?.('Error event: ' + msg['error'])\n            }\n          }\n        }\n        if (jsep) {\n          janus.current.debug?.('Handling SDP as well...', jsep)\n          plugin.handleRemoteJsep({ jsep: jsep })\n        }\n      },\n      onlocaltrack: function (track, on) {\n        janus.current.debug?.('Local track ' + (on ? 'added' : 'removed') + ':', track)\n        // We use the track ID as name of the element, but it may contain invalid characters\n        let trackId = track.id.replace(/[{}]/g, '')\n        if (!on) {\n          // Track removed, get rid of the stream and the rendering\n          let stream = localTracks?.[trackId]\n          if (stream) {\n            try {\n              let tracks = stream.getTracks()\n              for (let i in tracks) {\n                let mst = tracks[i]\n                if (mst) mst.stop()\n              }\n              // eslint-disable-next-line no-unused-vars\n            } catch (e) {}\n          }\n          if (track.kind === 'video') {\n            dispatch.screenShare.update({\n              localVideos: localVideos - 1,\n            })\n          }\n\n          // remove track\n          const filteredTracks = localTracks?.filter((track) => track !== localTracks[trackId])\n          dispatch.screenShare.update({\n            localTracks: filteredTracks,\n          })\n          return\n        }\n        // If we're here, a new track was added\n        let stream = localTracks?.[trackId]\n        if (stream) {\n          // We've been here already\n          return\n        }\n\n        if (track.kind === 'video') {\n          // New video track: create a stream out of it\n          dispatch.screenShare.update({\n            localVideos: localVideos + 1,\n          })\n          let stream = new MediaStream([track])\n\n          // Save the new video stream to the store\n          store.dispatch.screenShare.update({\n            localScreenStream: stream,\n          })\n\n          janus.current.log?.('Created local stream: ' + stream)\n          const localScreenElement = store.getState().player.localScreen\n\n          if (localScreenElement?.current) {\n            janus.current.attachMediaStream?.(localScreenElement.current, stream)\n            inviteOtherUser()\n\n            // Listen for the 'ended' event on the screen-sharing track\n            track.addEventListener('ended', () => {\n              stopScreenShare()\n            })\n          }\n        }\n        const { plugin } = store.getState().screenShare\n\n        if (\n          plugin.webrtcStuff.pc.iceConnectionState !== 'completed' &&\n          plugin.webrtcStuff.pc.iceConnectionState !== 'connected'\n        ) {\n        }\n      },\n      // eslint-disable-next-line no-unused-vars\n      onremotetrack: function (track, mid, on) {\n        // The publisher stream is sendonly, we don't expect anything here\n      },\n      oncleanup: function () {\n        janus.current.log?.(' ::: Got a cleanup notification :::')\n\n        dispatch.screenShare.update({\n          localTracks: {},\n          localVideos: 0,\n        })\n      },\n    })\n  }\n\n  const updateScreenStreams = () => {\n    const localScreenElement = store.getState().player.localScreen\n    const remoteScreenElement = store.getState().player.remoteScreen\n    const { localScreenStream, remoteScreenStream } = store.getState().screenShare\n\n    // local screen stream\n\n    if (localScreenElement?.current) {\n      if (janus.current.attachMediaStream) {\n        janus.current.attachMediaStream(\n          localScreenElement.current,\n          localScreenStream as MediaStream,\n        )\n      }\n    }\n\n    // remote screen stream\n\n    if (remoteScreenElement?.current) {\n      if (janus.current.attachMediaStream) {\n        janus.current.attachMediaStream(\n          remoteScreenElement.current,\n          remoteScreenStream as MediaStream,\n        )\n      }\n    }\n  }\n\n  const inviteOtherUser = () => {\n    // send message to websocket to invite the other user\n    const { socket } = store.getState().websocket\n    const { username: destUsername } = store.getState().currentCall\n    const { room } = store.getState().screenShare\n    const { username } = store.getState().currentUser\n\n    socket.emit('message', {\n      message: 'screenSharingStart',\n      roomId: room,\n      destUser: destUsername,\n      callUser: username,\n    } as ScreenSharingMessage)\n  }\n\n  const initAndStartScreenShare = () => {\n    dispatch.screenShare.update({ active: true, role: 'publisher' })\n    initScreenShare()\n  }\n  useEventListener('phone-island-screen-share-start', () => {\n    initAndStartScreenShare()\n  })\n\n  const initAndJoinScreenShare = () => {\n    dispatch.screenShare.update({ active: true, role: 'listener' })\n    initScreenShare()\n    eventDispatch('phone-island-screen-share-joined', {})\n  }\n\n  const joinScreenShare = () => {\n    const { room } = store.getState().screenShare\n    const { username } = store.getState().currentUser\n\n    const joinMessage = {\n      request: 'join',\n      room: room,\n      ptype: 'publisher',\n      display: username,\n    }\n\n    const { plugin } = store.getState().screenShare\n    plugin.send({ message: joinMessage })\n  }\n\n  const leaveScreenShare = () => {\n    const { remoteScreenStream } = store.getState().screenShare\n    janus.current.stopAllTracks(remoteScreenStream)\n    dispatch.screenShare.update({ active: false })\n    eventDispatch('phone-island-screen-share-left', {})\n  }\n\n  const handleMouseMove = () => {\n    setUiShown(true)\n\n    if (uiTimeoutRef.current) {\n      clearTimeout(uiTimeoutRef.current)\n      uiTimeoutRef.current = null\n    }\n  }\n\n  const startHideTimer = () => {\n    // start a timer when mouse stops moving to hide video UI\n    uiTimeoutRef.current = setTimeout(() => {\n      setUiShown(false)\n    }, 3000)\n  }\n\n  const handleMouseMoveWithDebounce = () => {\n    handleMouseMove()\n\n    // clear the previous debounce timer\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current)\n    }\n\n    // set a new debounce timer - when this isn't cleared, it means the mouse has stopped\n    debounceTimerRef.current = setTimeout(() => {\n      startHideTimer()\n    }, 100) // small delay to detect \"stopped moving\"\n  }\n\n  const stopScreenShare = () => {\n    const { plugin, localScreenStream } = store.getState().screenShare\n\n    janus.current.stopAllTracks(localScreenStream)\n    dispatch.screenShare.update({ active: false })\n    plugin.detach()\n\n    // send message to websocket to tell the other user the screen share has stopped\n    const { socket } = store.getState().websocket\n    const { username: destUsername } = store.getState().currentCall\n    const { room } = store.getState().screenShare\n    const { username } = store.getState().currentUser\n\n    socket.emit('message', {\n      message: 'screenSharingStop',\n      roomId: room,\n      destUser: destUsername,\n      callUser: username,\n    } as ScreenSharingMessage)\n\n    eventDispatch('phone-island-screen-share-stopped', {})\n  }\n  useEventListener('phone-island-screen-share-stop', () => {\n    stopScreenShare()\n  })\n\n  const pauseCall = () => {\n    pauseCurrentCall()\n    stopScreenShare()\n  }\n\n  const [isVideoCallButtonVisible, setIsVideoCallButtonVisible] = useState(true)\n\n  const checkCameraPermission = async () => {\n    if (videoInputDevices?.length > 0) {\n      const isWebCamAccepted = await checkWebCamPermission()\n      if (isWebCamAccepted) {\n        setIsVideoCallButtonVisible(true)\n        return true\n      } else {\n        setIsVideoCallButtonVisible(false)\n        return false\n      }\n    } else {\n      setIsVideoCallButtonVisible(false)\n      return false\n    }\n  }\n\n  return (\n    <>\n      {isOpen ? (\n        <div\n          ref={screenShareViewRef}\n          onMouseMove={() => handleMouseMoveWithDebounce()}\n          className={isFullscreen ? 'pi-h-screen' : 'pi-h-[480px] pi-w-[600px]'}\n        >\n          <div className={`pi-flex pi-relative pi-justify-center pi-w-full pi-h-full`}>\n            {/* large remote screen */}\n            <video\n              autoPlay\n              muted={true}\n              ref={remoteScreen}\n              className={`pi-rounded-2xl pi-w-full pi-h-full ${\n                !screenShareActive || screenShareRole !== 'listener' ? 'pi-hidden' : ''\n              }`}\n            ></video>\n            {/* large local screen */}\n            <video\n              autoPlay\n              muted={true}\n              ref={localScreen}\n              className={`pi-rounded-2xl pi-w-full pi-h-full ${\n                !screenShareActive || screenShareRole !== 'publisher' ? 'pi-hidden' : ''\n              }`}\n            ></video>\n            {/* large remote video */}\n            <video\n              autoPlay\n              muted={true}\n              ref={largeRemoteVideo}\n              className={`pi-rounded-2xl ${\n                screenShareActive || showRemoteVideoPlaceHolder ? 'pi-hidden' : ''\n              }`}\n            ></video>\n            {/* remote video placeholder */}\n            <div\n              className={`pi-w-full pi-bg-gray-200 dark:pi-bg-gray-800 pi-flex pi-items-center pi-justify-center ${\n                screenShareActive || !showRemoteVideoPlaceHolder ? 'pi-hidden' : ''\n              }`}\n            >\n              <div className='pi-rounded-full pi-bg-gray-700 dark:pi-bg-gray-200 pi-w-32 pi-h-32 pi-flex pi-items-center pi-justify-center'>\n                <span className='pi-text-4xl pi-text-gray-50 dark:pi-text-gray-900'>\n                  {getInitials(displayName)}\n                </span>\n              </div>\n            </div>\n            {/* small local video */}\n            <video\n              muted={true}\n              autoPlay\n              ref={localVideo}\n              className={`pi-max-w-32 pi-max-h-32 pi-absolute pi-top-5 pi-right-5 pi-rounded-lg ${\n                !isLocalVideoEnabled ? 'pi-hidden' : ''\n              }`}\n            ></video>\n            {/* small local video placeholder */}\n            <div\n              className={`pi-w-32 pi-h-24 pi-absolute pi-top-5 pi-right-5 pi-rounded-lg pi-bg-gray-200 dark:pi-bg-gray-900 pi-flex pi-items-center pi-justify-center ${\n                isLocalVideoEnabled || !hasVideoTrackAdded ? 'pi-hidden' : ''\n              }`}\n            >\n              <div className='pi-rounded-full pi-bg-gray-700 dark:pi-bg-gray-200 pi-w-12 pi-h-12 pi-flex pi-items-center pi-justify-center'>\n                <span className='pi-text-base pi-text-gray-50 dark:pi-text-gray-900'>\n                  {getInitials(userInfo.name || '-')}\n                </span>\n              </div>\n            </div>\n            {/* small remote video */}\n            <video\n              muted={true}\n              autoPlay\n              ref={smallRemoteVideo}\n              className={`pi-max-w-32 pi-max-h-32 pi-absolute pi-top-32 pi-right-5 pi-rounded-lg ${\n                !screenShareActive || showRemoteVideoPlaceHolder ? 'pi-hidden' : ''\n              }`}\n            ></video>\n            {/* small remote video placeholder */}\n            <div\n              className={`pi-w-32 pi-h-24 pi-absolute pi-top-32 pi-right-5 pi-rounded-lg pi-bg-gray-200 dark:pi-bg-gray-900 pi-flex pi-items-center pi-justify-center ${\n                !screenShareActive || !showRemoteVideoPlaceHolder || !hasVideoTrackAdded\n                  ? 'pi-hidden'\n                  : ''\n              }`}\n            >\n              <div className='pi-rounded-full pi-bg-gray-700 dark:pi-bg-gray-200 pi-w-12 pi-h-12 pi-flex pi-items-center pi-justify-center'>\n                <span className='pi-text-base pi-text-gray-50 dark:pi-text-gray-900'>\n                  {getInitials(displayName)}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div\n            className={`${\n              !isUiShown && 'pi-opacity-0 pi-pointer-events-none'\n            } pi-absolute pi-bottom-0 pi-bg-gray-950/65 pi-w-full pi-p-6 pi-rounded-bl-[20px] pi-rounded-br-[20px] pi-transition-all`}\n          >\n            <div className='pi-flex pi-items-center pi-justify-center pi-gap-6 pi-mb-5'>\n              {/* mute button */}\n              {!intrudeListenStatus?.isListen && (\n                <Button\n                  variant='default'\n                  active={muted ? true : false}\n                  onClick={() => (muted ? unmuteCurrentCall() : muteCurrentCall())}\n                  data-tooltip-id='tooltip-mute'\n                  data-tooltip-content={muted ? `${t('Tooltip.Unmute')}` : `${t('Tooltip.Mute')}`}\n                >\n                  {muted ? (\n                    <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={faMicrophoneSlash} />\n                  ) : (\n                    <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={faMicrophone} />\n                  )}\n                </Button>\n              )}\n\n              {/* video button */}\n              {videoInputDevices?.length > 0 && (\n                <Button\n                  variant='default'\n                  onClick={() => toggleVideo()}\n                  data-tooltip-id='tooltip-toggle-video'\n                  data-tooltip-content={`${\n                    !isVideoCallButtonVisible\n                      ? t('Tooltip.Enable camera permission') || ''\n                      : isLocalVideoEnabled\n                      ? t('Tooltip.Disable camera')\n                      : t('Tooltip.Enable camera')\n                  }`}\n                  disabled={!isVideoCallButtonVisible}\n                  className={`${!isVideoCallButtonVisible ? 'pi-cursor-auto' : ''}`}\n                >\n                  <FontAwesomeIcon\n                    className='pi-h-6 pi-w-6'\n                    icon={isVideoCallButtonVisible || isLocalVideoEnabled ? faVideo : faVideoSlash}\n                  />\n                </Button>\n              )}\n\n              {/* Share screen button */}\n              {janus.current.webRTCAdapter.browserDetails.browser !== 'safari' &&\n                userInfo?.profile?.macro_permissions?.nethvoice_cti?.permissions?.screen_sharing\n                  ?.value &&\n                !screenShareActive && (\n                  <Button\n                    variant='default'\n                    onClick={() => initAndStartScreenShare()}\n                    data-tooltip-id='tooltip-start-screen-share'\n                    data-tooltip-content={t('Tooltip.Share screen') || ''}\n                  >\n                    <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={faDisplay} />\n                  </Button>\n                )}\n\n              {/* stop screen share */}\n              {screenShareActive && screenShareRole === 'publisher' && (\n                <Button\n                  variant='default'\n                  onClick={() => stopScreenShare()}\n                  data-tooltip-id='tooltip-stop-screen-share'\n                  data-tooltip-content={t('Tooltip.Stop sharing')}\n                >\n                  <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={faDisplaySlash} />\n                </Button>\n              )}\n\n              {/* fullscreen */}\n              {screenShareActive && screenShareRole === 'listener' && (\n                <Button\n                  variant='default'\n                  onClick={() => toggleFullScreen()}\n                  data-tooltip-id='tooltip-toggle-fullscreen'\n                  data-tooltip-content={\n                    isFullscreen ? t('Tooltip.Exit fullscreen') : t('Tooltip.Enter fullscreen')\n                  }\n                >\n                  <FontAwesomeIcon\n                    className='pi-h-6 pi-w-6'\n                    icon={isFullscreen ? faCompress : faExpand}\n                  />\n                </Button>\n              )}\n\n              {/* record */}\n              {userInfo?.profile?.macro_permissions?.settings?.permissions?.recording?.value && (\n                <Button\n                  variant='default'\n                  onClick={() => recordCurrentCall(isRecording)}\n                  data-tooltip-id='tooltip-record-video-view'\n                  data-tooltip-content={\n                    isRecording ? t('Tooltip.Stop recording') : t('Tooltip.Record')\n                  }\n                >\n                  <FontAwesomeIcon\n                    className='pi-h-6 pi-w-6'\n                    icon={isRecording ? faStop : faRecord}\n                  />\n                </Button>\n              )}\n\n              {/* hold */}\n              {!(intrudeListenStatus?.isIntrude || intrudeListenStatus?.isListen) && (\n                <Button\n                  variant='default'\n                  onClick={() => (paused ? unpauseCurrentCall() : pauseCall())}\n                  data-tooltip-id='tooltip-pause-video-view'\n                  data-tooltip-content={paused ? t('Tooltip.Play') : t('Tooltip.Pause')}\n                >\n                  <FontAwesomeIcon className='pi-h-6 pi-w-6' icon={paused ? faPlay : faPause} />\n                </Button>\n              )}\n            </div>\n            <Hangup buttonsVariant='default' />\n          </div>\n          {/* Buttons tooltips */}\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-mute-video-view' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-toggle-video' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-toggle-fullscreen' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-start-screen-share' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-stop-screen-share' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-record-video-view' place='bottom' />\n          <CustomThemedTooltip className='pi-z-20' id='tooltip-pause-video-view' place='bottom' />\n        </div>\n      ) : (\n        // collapsed view\n        <>\n          <div className='pi-flex pi-justify-between pi-items-center'>\n            <Avatar />\n            <Timer startTime={startTime} isNotAlwaysWhite />\n            {!isOpen && remoteAudioStream && !isPhysical() && (\n              <AudioBars\n                audioStream={remoteAudioStream}\n                paused={paused}\n                size={isOpen ? 'large' : 'small'}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default VideoView\n"],"names":["VideoView","dispatch","useDispatch","_l","useSelector","state","currentCall","muted","startTime","isRecording","paused","isLocalVideoEnabled","showRemoteVideoPlaceHolder","hasVideoTrackAdded","displayName","isStartingVideoCall","_m","screenShare","localTracks","localVideos","screenShareRole","role","screenShareActive","active","isStartingScreenShare","isJoiningScreenShare","isLeavingScreenShare","intrudeListenStatus","listen","isOpen","island","_o","webrtc","janusInstance","remoteAudioStream","userInfo","store","getState","currentUser","_p","useState","isFullscreen","setIsFullscreen","_q","isUiShown","setUiShown","uiTimeoutRef","useRef","debounceTimerRef","screenShareViewRef","localScreen","remoteScreen","localVideo","largeRemoteVideo","smallRemoteVideo","janus","JanusLib","videoInputDevices","select","mediaDevices","useIsomorphicLayoutEffect","player","updatePlayer","useEffect","updateScreenStreams","updateVideoStreams","addEventListener","handleFullscreenChange","removeEventListener","current","clearTimeout","enableVideo","updateCurrentCall","initAndStartScreenShare","update","initAndJoinScreenShare","leaveScreenShare","localVideoElement","largeRemoteVideoElement","smallRemoteVideoElement","_a","localVideoStream","remoteVideoStream","attachMediaStream","document","fullscreenElement","toggleFullScreen","exitFullscreen","eventDispatch","requestFullscreen","useEventListener","newRemoteFeed","id","display","source","remoteFeed","attach","plugin","opaqueId","randomString","success","pluginHandle","remoteTracks","remoteVideos","_b","log","call","getPlugin","getId","_d","_c","request","room","ptype","feed","send","message","error","iceState","rfindex","webrtcState","on","slowLink","uplink","lost","mid","warn","onmessage","msg","jsep","debug","event","_f","_e","_h","_g","_k","_j","createAnswer","tracks","type","body","onlocaltrack","track","onremotetrack","metadata","reason","kind","remoteScreenStream","stopAllTracks","stream","MediaStream","remoteScreenElement","oncleanup","sipcall","currentVideoInputDeviceId","getCurrentVideoInputDeviceId","recv","capture","deviceId","exact","replace","add","setVideoTrackAdded","push","createOffer","console","JSON","stringify","disableVideo","updateLocalVideoStream","setLocalVideoEnabled","remove","initScreenShare","setTimeout","isExtensionEnabled","create","description","bitrate","publishers","result","register","username","shareScreen","joinScreenShare","consentDialog","mediaState","medium","_w","audio","video","list","f","leaving","_r","_t","_s","_v","_u","handleRemoteJsep","trackId","stream_2","localScreenStream","localScreenElement","inviteOtherUser","stopScreenShare","webrtcStuff","pc","iceConnectionState","stream_1","getTracks","i","mst","stop","e","filteredTracks","filter","socket","websocket","destUsername","emit","roomId","destUser","callUser","joinMessage","handleMouseMoveWithDebounce","detach","isVideoCallButtonVisible","setIsVideoCallButtonVisible","checkCameraPermission","__awaiter","length","checkWebCamPermission","sent","React","createElement","Fragment","ref","onMouseMove","className","autoPlay","concat","getInitials","name","isListen","Button","variant","onClick","unmuteCurrentCall","muteCurrentCall","t","FontAwesomeIcon","icon","faMicrophoneSlash","faMicrophone","disabled","faVideo","faVideoSlash","webRTCAdapter","browserDetails","browser","profile","macro_permissions","nethvoice_cti","permissions","screen_sharing","value","faDisplay","faDisplaySlash","faCompress","faExpand","settings","recording","recordCurrentCall","faStop","faRecord","isIntrude","unpauseCurrentCall","pauseCurrentCall","faPlay","faPause","Hangup","buttonsVariant","CustomThemedTooltip","place","Avatar","Timer","isNotAlwaysWhite","isPhysical","AudioBars","audioStream","size"],"mappings":"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"}