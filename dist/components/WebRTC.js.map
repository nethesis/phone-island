{"version":3,"file":"WebRTC.js","sources":["../../src/components/WebRTC.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { type ReactNode, FC, useEffect, useRef, useCallback, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Dispatch } from '../store'\nimport adapter from 'webrtc-adapter'\nimport JanusLib from '../lib/webrtc/janus.js'\nimport type { JanusTypes } from '../types'\nimport { register, unregister, handleRemote } from '../lib/webrtc/messages'\nimport { store } from '../store'\nimport { checkMediaPermissions } from '../lib/devices/devices'\nimport { attendedTransfer, hangupCurrentCall } from '../lib/phone/call'\nimport { webrtcCheck } from '../lib/webrtc/connection'\nimport outgoingRingtone from '../static/outgoing_ringtone'\nimport { eventDispatch, useEventListener } from '../utils'\nimport { isPhysical } from '../lib/user/default_device'\n\ninterface WebRTCProps {\n  children: ReactNode\n  sipExten: string\n  sipSecret: string\n  hostName: string\n  sipHost: string\n  sipPort: string\n  reload: boolean\n  uaType: string\n  reloadedCallback?: () => void\n}\n\nexport const WebRTC: FC<WebRTCProps> = ({\n  hostName,\n  sipExten,\n  sipSecret,\n  children,\n  sipHost,\n  sipPort,\n  reload,\n  uaType,\n  reloadedCallback,\n}) => {\n  // Initialize store dispatch\n  const dispatch = useDispatch<Dispatch>()\n\n  // Initialize janus check interval id\n  const janusCheckInterval = useRef<any>(null)\n\n  // Initialize Janus from Janus library\n  const janus = useRef<JanusTypes>(JanusLib)\n\n  let localTracks = {}\n  let localVideos = 0\n  let remoteTracks = {}\n  let remoteVideos = 0\n\n  // Initializes the webrtc connection and handlers\n  const initWebRTC = useCallback(() => {\n    janus.current.init({\n      debug: 'all',\n      dependencies: janus.current.useDefaultDependencies({\n        adapter,\n      }),\n      callback: function () {\n        const janusInstance = new janus.current({\n          server: `https://${hostName}/janus`,\n          success: () => {\n            if (janusInstance.attach) {\n              // Use Janus Sip Plugin\n              janusInstance.attach({\n                plugin: 'janus.plugin.sip',\n                opaqueId: 'sebastian' + '_' + new Date().getTime(),\n                success: function (pluginHandle) {\n                  // Set sipcall to the store\n                  if (pluginHandle) {\n                    dispatch.webrtc.updateWebRTC({\n                      sipcall: pluginHandle,\n                    })\n                    // Register the extension to the server\n                    register({ sipExten, sipSecret, sipHost, sipPort })\n                    if (pluginHandle) {\n                      if (janus.current.log)\n                        janus.current.log(\n                          'SIP plugin attached! (' + pluginHandle.getPlugin() + ', id = ' + ')',\n                        )\n                    }\n                  }\n                },\n                error: function (error) {\n                  if (janus.current.error) {\n                    janus.current.error('  -- Error attaching plugin...')\n                    janus.current.error(error)\n                  }\n                  // reject()\n                },\n                consentDialog: function (on) {\n                  if (janus.current.log) janus.current.log(`janus consentDialog (on: ${on})`)\n                },\n                webrtcState: function (on) {\n                  if (janus.current.log)\n                    janus.current.log(\n                      'Janus says our WebRTC PeerConnection is ' + (on ? 'up' : 'down') + ' now',\n                    )\n                },\n                iceState: function (newState) {\n                  const { sipcall }: { sipcall: any } = store.getState().webrtc\n\n                  if (sipcall) {\n                    if (janus.current.log)\n                      janus.current.log(\n                        `ICE state of PeerConnection of handle has changed to \"${newState}\"`,\n                      )\n                  }\n                },\n                mediaState: function (medium, on) {\n                  if (janus.current.log)\n                    janus.current.log(\n                      'Janus ' + (on ? 'started' : 'stopped') + ' receiving our ' + medium,\n                    )\n                },\n                slowLink: function (uplink, count) {\n                  if (uplink) {\n                    if (janus.current.warn)\n                      janus.current.warn(`SLOW link: several missing packets from janus (${count})`)\n                  } else {\n                    if (janus.current.warn)\n                      janus.current.warn(\n                        `SLOW link: janus is not receiving all your packets (${count})`,\n                      )\n                  }\n                },\n                onmessage: function (msg, jsep) {\n                  // Get webrtc state\n                  const { sipcall }: { sipcall: any } = store.getState().webrtc\n\n                  if (janus.current.debug) {\n                    janus.current.debug(' ::: Got a message :::')\n                    janus.current.debug(JSON.stringify(msg))\n                  }\n\n                  // Handle errors in message\n                  var error = msg['error']\n                  if (error != null && error != undefined) {\n                    if (!store.getState().webrtc.registered) {\n                      if (janus.current.log) janus.current.log('User is not registered')\n                    } else {\n                      // Reset status\n                      sipcall && sipcall.hangup()\n\n                      // Stop the local audio element ringing\n                      store.dispatch.player.stopAudioPlayer()\n                    }\n                    return\n                  }\n                  // Manage events\n                  var result = msg['result']\n                  if (\n                    result !== null &&\n                    result !== undefined &&\n                    result['event'] !== undefined &&\n                    result['event'] !== null\n                  ) {\n                    // Get event data\n                    var event = result['event']\n\n                    // Get the recording state\n                    const { recording } = store.getState().recorder\n                    const { view } = store.getState().island\n\n                    // Manage different types of events\n                    switch (event) {\n                      case 'registration_failed':\n                        if (janus.current.error)\n                          janus.current.error(\n                            'Registration failed: ' + result['code'] + ' ' + result['reason'],\n                          )\n                        break\n\n                      case 'unregistered':\n                        if (janus.current.log)\n                          janus.current.log(\n                            'Successfully un-registered as ' + result['username'] + '!',\n                          )\n                        eventDispatch('phone-island-webrtc-unregistered', {})\n                        break\n\n                      case 'registered':\n                        if (janus.current.log)\n                          janus.current.log(\n                            'Successfully registered as ' + result['username'] + '!',\n                          )\n                        eventDispatch('phone-island-webrtc-registered', {})\n                        if (!store.getState().webrtc.registered) {\n                          store.dispatch.webrtc.updateWebRTC({\n                            registered: true,\n                          })\n                        }\n                        // Remove WebRTC connections alert if any\n                        dispatch.alerts.removeAlert('webrtc_down')\n                        eventDispatch('phone-island-alert-removed', {\n                          type: 'webrtc_down',\n                        })\n                        // Update webrtc lastActivity time\n                        dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        break\n\n                      case 'registering':\n                        if (janus.current.log) {\n                          janus.current.log('janus registering')\n                        }\n                        break\n\n                      // This event arrive on outgoing call start\n                      case 'calling':\n                        // Number and display name are updated inside socket\n                        dispatch.currentCall.checkOutgoingUpdate({\n                          outgoingWebRTC: true,\n                        })\n\n                        // Update webrtc last activity time\n                        dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        break\n\n                      // After an outgoing call start on 180 code, it means\n                      // ...that the local outgoing ringtone must be player\n                      case 'ringing':\n                        const { audioPlayerPlaying } = store.getState().player\n\n                        // Check if the local audio is already playing and start playing\n                        if (!audioPlayerPlaying) {\n                          // Update audio player and start playing\n                          dispatch.player.updateStartAudioPlayer({\n                            src: outgoingRingtone,\n                            loop: true,\n                          })\n                        }\n                        // Update webrtc lastActivity time\n                        dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        if (view !== 'call') {\n                          dispatch.island.setIslandView('call')\n                        }\n                        break\n\n                      // After an outgoing call start on 183 code, it means\n                      // ...that the outgoing ringtone arrives from the stream\n                      // ...playing the local outgoing ringtone isn't needed\n                      case 'progress':\n                        if (janus.current.log) {\n                          janus.current.log(\n                            \"There's early media from \" +\n                              result['username'] +\n                              ', wairing for the call!',\n                          )\n                        }\n                        // Set the remote description to janus lib\n                        if (jsep) {\n                          handleRemote(jsep)\n                        }\n                        // Update webrtc lastActivity time\n                        dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        break\n\n                      case 'incomingcall':\n                        const { default_device } = store.getState().currentUser\n                        const { endpoints, username } = store.getState().currentUser\n                        const { extensions } = store.getState().users\n\n                        const hasOnlineNethlink = () => {\n                          if (!extensions || !username) return false\n\n                          // Get all extensions for current user\n                          const userExtensions: any = Object.values(extensions).filter(\n                            (ext) => ext?.username === username,\n                          )\n\n                          // Check if any extension is nethlink type and online\n                          return userExtensions?.some((ext) => {\n                            const endpointExtension = endpoints?.extension.find(\n                              (endpoint) => endpoint.id === ext?.exten,\n                            )\n                            return (\n                              endpointExtension?.type === 'nethlink' && ext?.status !== 'offline'\n                            )\n                          })\n                        }\n\n                        if (\n                          (uaType === 'mobile' && hasOnlineNethlink()) ||\n                          (uaType === 'desktop' &&\n                            (default_device?.type === 'webrtc' ||\n                              (default_device?.type === undefined && !hasOnlineNethlink()) ||\n                              (!hasOnlineNethlink() && default_device?.type === 'physical')))\n                        ) {\n                          // Update webrtc state\n                          dispatch.webrtc.updateWebRTC({ jsepGlobal: jsep })\n                          // Check if is recording an audio through call\n                          // ...recording an audio is a request made by the user\n                          // ...it must be managed differently than an incoming call\n                          if (recording) {\n                            // Update the recorder state\n                            dispatch.recorder.setIncoming(true)\n                          } else {\n                            // Manage the incoming message as a webrtc call\n                            // Update incoming webrtc state, number and display name\n                            // ...are updated inside socket\n                            dispatch.currentCall.checkIncomingUpdatePlay({\n                              incoming: true,\n                              incomingWebRTC: true,\n                            })\n\n                            if (janus.current.log) {\n                              dispatch.currentCall.updateIncoming(true)\n                              janus.current.log('Incoming call from ' + result['username'] + '!')\n                            }\n                          }\n\n                          // Update the webrtc last activity time\n                          dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        }\n\n                        break\n\n                      case 'accepted':\n                        const acceptedTimestamp = Math.floor(Date.now() / 1000)\n                        if (janus.current.log) {\n                          janus.current.log(result['username'] + ' accepted the call!')\n                        }\n                        // Set the remote description to janus lib\n                        if (jsep) {\n                          handleRemote(jsep)\n                        }\n                        // Set current call accepted\n                        dispatch.currentCall.checkAcceptedUpdate({\n                          acceptedWebRTC: true,\n                        })\n\n                        // Set incoming value to false and set start time\n                        dispatch.currentCall.updateCurrentCall({\n                          incoming: false,\n                          incomingWebRTC: false,\n                          startTime: acceptedTimestamp?.toString(),\n                        })\n\n                        // Stop the local audio element ringing\n                        store.dispatch.player.stopAudioPlayer()\n\n                        // Update webrtc lastActivity time\n                        dispatch.webrtc.updateLastActivity(new Date().getTime())\n                        break\n\n                      case 'hangup':\n                        // Manage hangup message during recording\n                        if (recording) {\n                          dispatch.recorder.setRecording(false)\n                        }\n                        if (!isPhysical() && uaType !== 'mobile') {\n                          hangupCurrentCall()\n                          sipcall.hangup()\n\n                          // Stop the local audio element ringing\n                          store.dispatch.player.stopAudioPlayer()\n\n                          // Check the janus doc before enable the following\n                          // if (\n                          //   result['code'] === 486 &&\n                          //   result['event'] === 'hangup' &&\n                          //   result['reason'] === 'Busy Here'\n                          // ) {\n                          //   dispatch.player.updateAudioSource({\n                          //     src: busyRingtone,\n                          //   })\n                          //   dispatch.player.playAudio()\n                          // }\n                          // Reset current call info\n                          store.dispatch.currentCall.reset()\n                          if (janus.current.log)\n                            janus.current.log(\n                              'Call hung up (' + result['code'] + ' ' + result['reason'] + ')!',\n                            )\n                          // Update webrtc lastActivity time\n                          dispatch.webrtc.updateLastActivity(new Date().getTime())\n                          // stopScreenSharingI()\n                        }\n\n                        // Stop the local audio element ringing\n                        store.dispatch.player.stopAudioPlayer()\n\n                        // Stop screen sharing if active\n                        const {\n                          active: screenShareActive,\n                          plugin,\n                          localScreenStream,\n                          remoteScreenStream,\n                        } = store.getState().screenShare\n\n                        if (screenShareActive) {\n                          janus.current.stopAllTracks(localScreenStream)\n                          janus.current.stopAllTracks(remoteScreenStream)\n                          dispatch.screenShare.update({ active: false })\n                          plugin.detach()\n                        }\n                        break\n\n                      case 'gateway_down':\n                        console.warn('THE GATEWAY IS DOWN')\n\n                        break\n\n                      case 'info':\n                        // Check if it's a keyframe request (see: https://github.com/meetecho/janus-gateway/pull/3517)\n                        if (\n                          result['type'] === 'application/media_control+xml' &&\n                          result['content'].includes('<picture_fast_update')\n                        ) {\n                          sipcall.send({\n                            message: { request: 'keyframe', user: true, peer: true },\n                          })\n                        }\n                        break\n\n                      default:\n                        if (janus.current.debug) {\n                          janus.current.debug('Event not handled:', event)\n                        }\n                        break\n                    }\n                  }\n                },\n                onlocaltrack: function (track, on) {\n                  if (janus.current.debug) {\n                    janus.current.debug('Local track ' + (on ? 'added' : 'removed') + ':', track)\n                  }\n\n                  // We use the track ID as name of the element, but it may contain invalid characters\n                  let trackId = track.id.replace(/[{}]/g, '')\n                  if (!on) {\n                    // Track removed, get rid of the stream and the rendering\n                    let stream = localTracks[trackId]\n                    if (stream) {\n                      try {\n                        let tracks = stream.getTracks()\n                        for (let i in tracks) {\n                          let mst = tracks[i]\n                          if (mst) mst.stop()\n                        }\n                      } catch (e: any) {\n                        if (janus.current.error) {\n                          janus.current.error('Error removing track:', e)\n                        }\n                      }\n                    }\n                    if (track.kind === 'video') {\n                      localVideos--\n                    }\n                    delete localTracks[trackId]\n                    return\n                  }\n                  // If we're here, a new track was added\n                  let stream = localTracks[trackId]\n                  if (stream) {\n                    // We've been here already\n                    return\n                  }\n                  if (track.kind === 'audio') {\n                    // We ignore local audio tracks, they'd generate echo anyway\n\n                    stream = new MediaStream([track])\n\n                    // Save the new audio stream to the store\n                    store.dispatch.webrtc.updateLocalAudioStream(stream)\n                  } else {\n                    // New video track: create a stream out of it\n                    localVideos++\n                    stream = new MediaStream([track])\n\n                    // Save the new video stream to the store\n                    store.dispatch.webrtc.updateLocalVideoStream(stream)\n\n                    localTracks[trackId] = stream\n                    if (janus.current.debug) {\n                      janus.current.debug('Created local stream:', stream)\n                    }\n                    const localVideoElement = store.getState().player.localVideo\n\n                    if (\n                      janus.current.attachMediaStream &&\n                      localVideoElement &&\n                      localVideoElement.current\n                    ) {\n                      janus.current.attachMediaStream(localVideoElement.current, stream)\n                    }\n                  }\n                },\n                onremotetrack: function (track, mid, on) {\n                  if (janus.current.debug) {\n                    janus.current.debug(\n                      'Remote track (mid=' + mid + ') ' + (on ? 'added' : 'removed') + ':',\n                      track,\n                    )\n                  }\n\n                  // Stop the local audio element ringing\n                  store.dispatch.player.stopAudioPlayer()\n\n                  if (!on) {\n                    // Track removed, get rid of the stream and the rendering\n                    if (track.kind === 'video') {\n                      remoteVideos--\n                    }\n                    delete remoteTracks[mid]\n\n                    // Show remote video placeholder\n                    dispatch.currentCall.updateCurrentCall({\n                      showRemoteVideoPlaceHolder: true,\n                    })\n\n                    return\n                  }\n\n                  if (track.kind === 'audio') {\n                    // New audio track: create a stream out of it, and use a hidden <audio> element\n                    let stream = new MediaStream([track])\n                    remoteTracks[mid] = stream\n                    if (janus.current.debug) {\n                      janus.current.debug('Created remote audio stream: ' + stream)\n                    }\n                    const remoteAudioElement = store.getState().player.remoteAudio\n\n                    if (\n                      remoteAudioElement &&\n                      remoteAudioElement.current &&\n                      janus.current.attachMediaStream\n                    ) {\n                      janus.current.attachMediaStream(remoteAudioElement.current, stream)\n                    }\n                    // Save the new audio stream to the store\n                    store.dispatch.webrtc.updateRemoteAudioStream(stream)\n                  } else {\n                    // New video track: create a stream out of it\n                    remoteVideos++\n                    let stream = new MediaStream([track])\n\n                    // Save the new video stream to the store\n                    store.dispatch.webrtc.updateRemoteVideoStream(stream)\n\n                    remoteTracks[mid] = stream\n                    if (janus.current.debug) {\n                      janus.current.debug('Created remote video stream:' + stream)\n                    }\n                    const largeRemoteVideoElement = store.getState().player.largeRemoteVideo\n                    const smallRemoteVideoElement = store.getState().player.smallRemoteVideo\n\n                    if (\n                      janus.current.attachMediaStream &&\n                      largeRemoteVideoElement &&\n                      largeRemoteVideoElement.current\n                    ) {\n                      janus.current.attachMediaStream(largeRemoteVideoElement.current, stream)\n                    }\n\n                    if (\n                      janus.current.attachMediaStream &&\n                      smallRemoteVideoElement &&\n                      smallRemoteVideoElement.current\n                    ) {\n                      janus.current.attachMediaStream(smallRemoteVideoElement.current, stream)\n\n                      // Hide remote video placeholder\n                      dispatch.currentCall.updateCurrentCall({\n                        showRemoteVideoPlaceHolder: false,\n                      })\n                    }\n                  }\n                },\n                oncleanup: function () {\n                  if (janus.current.log) {\n                    janus.current.log(' ::: janus Got a cleanup notification :::')\n                  }\n                },\n              })\n            }\n          },\n          error: (err: any) => {\n            if (janus.current.log) janus.current.log('error', err)\n            // Activate webrtc connection alert\n            dispatch.alerts.setAlert('webrtc_down')\n          },\n          destroyed: () => {\n            // Set webrtc destroyed status\n            dispatch.webrtc.updateWebRTC({\n              destroyed: true,\n            })\n            // Activate webrtc connection alert\n            dispatch.alerts.setAlert('webrtc_down')\n          },\n        })\n        // Set janus instance to the store\n        dispatch.webrtc.updateWebRTC({\n          janusInstance,\n        })\n      },\n    })\n  }, [janus.current])\n\n  // Check audio and video permissions when default_device is loaded or changed\n  useEffect(() => {\n    const { default_device } = store.getState().currentUser\n    if (default_device !== undefined) {\n      checkMediaPermissions()\n    }\n  }, [store?.getState()?.currentUser?.default_device])\n\n  const [isOnline, setIsOnline] = useState(navigator.onLine)\n  const [connectionReturned, setConnectionReturned] = useState(false)\n  const wasOfflineRef = useRef(false)\n\n  useEffect(() => {\n    // Event listeners for online/offline status\n    const handleOnline = () => setIsOnline(true)\n    const handleOffline = () => setIsOnline(false)\n\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  // Reconnection management\n  useEffect(() => {\n    if (!isOnline) {\n      console.log('Internet connection lost.')\n      wasOfflineRef.current = true\n      setConnectionReturned(false)\n    } else if (wasOfflineRef.current) {\n      console.log('Internet connection restored.')\n      setConnectionReturned(true)\n      wasOfflineRef.current = false\n    }\n  }, [isOnline])\n\n  // Manage webrtc connections and events\n  useEffect(() => {\n    // Initializes the webrtc registration check interval\n    function startWebrtcCheck() {\n      const { CHECK_INTERVAL_TIME } = store.getState().webrtc\n      if (!janusCheckInterval.current) {\n        // Initialize the interval that check the webrtc\n        janusCheckInterval.current = setInterval(\n          () =>\n            webrtcCheck(() => {\n              // Do the register as callback of webrtc check\n              register({ sipExten, sipSecret, sipHost, sipPort })\n            }),\n          CHECK_INTERVAL_TIME,\n        )\n      }\n    }\n\n    // Start webrtc initialization and handlers\n    initWebRTC()\n    // Start the check of webrtc activity\n    startWebrtcCheck()\n\n    return () => {\n      // Unregister from janus\n      unregister()\n      // Stop Janus check interval\n      clearInterval(janusCheckInterval.current)\n    }\n  }, [])\n\n  // Manage reload events\n  useEffect(() => {\n    if (reload || connectionReturned) {\n      // Unregister the WebRTC extension\n      unregister()\n      // Detach sipcall\n      const { sipcall }: { sipcall: any } = store.getState().webrtc\n      if (sipcall) sipcall.detach()\n      // Destroy Janus session\n      if (janus.current.destroy) janus.current.destroy()\n      // Initialize a new Janus session\n      setTimeout(() => {\n        initWebRTC()\n        // Execute the reloaded callback\n        if (reloadedCallback) reloadedCallback()\n      }, 10000)\n    }\n  }, [reload, connectionReturned])\n\n  // Manage media devices (audio/video)\n  useEffect(() => {\n    const getMediaDevices = () => {\n      if (navigator && navigator?.mediaDevices && navigator?.mediaDevices?.enumerateDevices) {\n        navigator?.mediaDevices\n          .enumerateDevices()\n          .then((deviceInfos) => {\n            dispatch.mediaDevices.updateMediaDevices(deviceInfos)\n          })\n          .catch((error) => {\n            console.error('Error fetching devices:', error)\n          })\n      } else {\n        console.warn('MediaDevices API not supported in this browser or context')\n        dispatch.mediaDevices.updateMediaDevices([])\n      }\n    }\n    getMediaDevices()\n\n    if (navigator && navigator?.mediaDevices) {\n      navigator?.mediaDevices?.addEventListener('devicechange', getMediaDevices)\n\n      return () => {\n        navigator?.mediaDevices?.removeEventListener('devicechange', getMediaDevices)\n      }\n    }\n  }, [])\n\n  useEventListener('phone-island-attach', (data) => {\n    initWebRTC()\n    eventDispatch('phone-island-attached', {})\n  })\n\n  /**\n   * Event listner for phone-island-call-transfer event\n   */\n  useEventListener('phone-island-call-transfer', (data) => {\n    const transferNumber = data?.to\n    dispatch.island.toggleIsOpen(true)\n    handleAttendedTransfer(transferNumber)\n    eventDispatch('phone-island-call-transfer-opened', {})\n  })\n\n  async function handleAttendedTransfer(number: string) {\n    // Send attended transfer message\n    const transferringMessageSent = await attendedTransfer(number)\n    if (transferringMessageSent) {\n      // Set transferring and disable pause\n      dispatch.currentCall.updateCurrentCall({\n        transferring: true,\n        paused: false,\n      })\n      // Play the remote audio element\n      dispatch.player.playRemoteAudio()\n    }\n  }\n\n  return <>{children}</>\n}\n"],"names":["_a","hostName","sipExten","sipSecret","children","sipHost","sipPort","reload","uaType","reloadedCallback","dispatch","useDispatch","janusCheckInterval","useRef","janus","JanusLib","localTracks","initWebRTC","useCallback","current","init","debug","dependencies","useDefaultDependencies","adapter","callback","janusInstance","server","concat","success","attach","plugin","opaqueId","Date","getTime","pluginHandle","webrtc","updateWebRTC","sipcall","register","log","getPlugin","error","consentDialog","on","webrtcState","iceState","newState","store","getState","mediaState","medium","slowLink","uplink","count","warn","onmessage","msg","jsep","JSON","stringify","undefined","result","event","recording","recorder","view","island","eventDispatch","registered","alerts","removeAlert","type","updateLastActivity","currentCall","checkOutgoingUpdate","outgoingWebRTC","player","audioPlayerPlaying","updateStartAudioPlayer","src","outgoingRingtone","loop","setIslandView","handleRemote","default_device","currentUser","endpoints_1","endpoints","username_1","extensions_1","users","extensions","hasOnlineNethlink","userExtensions","Object","values","filter","ext","username","some","endpointExtension","extension","find","endpoint","id","exten","status","jsepGlobal","setIncoming","checkIncomingUpdatePlay","incoming","incomingWebRTC","updateIncoming","acceptedTimestamp","Math","floor","now","checkAcceptedUpdate","acceptedWebRTC","updateCurrentCall","startTime","toString","stopAudioPlayer","setRecording","isPhysical","hangupCurrentCall","hangup","reset","_b","screenShare","screenShareActive","localScreenStream","remoteScreenStream","stopAllTracks","update","active","detach","console","includes","send","message","request","user","peer","onlocaltrack","track","trackId","replace","stream_1","tracks","getTracks","i","mst","stop","e","kind","stream","MediaStream","updateLocalAudioStream","updateLocalVideoStream","localVideoElement","localVideo","attachMediaStream","onremotetrack","mid","showRemoteVideoPlaceHolder","remoteAudioElement","remoteAudio","updateRemoteAudioStream","updateRemoteVideoStream","largeRemoteVideoElement","largeRemoteVideo","smallRemoteVideoElement","smallRemoteVideo","oncleanup","err","setAlert","destroyed","useEffect","checkMediaPermissions","_c","_d","useState","navigator","onLine","isOnline","setIsOnline","_e","connectionReturned","setConnectionReturned","wasOfflineRef","handleOnline","handleOffline","window","addEventListener","removeEventListener","CHECK_INTERVAL_TIME","setInterval","webrtcCheck","unregister","clearInterval","destroy","setTimeout","getMediaDevices","mediaDevices","enumerateDevices","then","deviceInfos","updateMediaDevices","catch","useEventListener","data","transferNumber","to","toggleIsOpen","number","attendedTransfer","sent","transferring","paused","playRemoteAudio","handleAttendedTransfer","React","createElement","Fragment"],"mappings":"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"}