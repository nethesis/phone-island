{"version":3,"file":"avatars.js","sources":["../../../src/lib/avatars/avatars.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { AvatarsTypes } from '../../types'\nimport { store } from '../../store'\nimport { loadCache, saveCache } from '../storage/local_storage'\nimport { getAllAvatars } from '../../services/user'\n\nexport const AVATARS_EXPIRATION_MILLIS = 24 * 60 * 60 * 1000 // 24 hours\n\n/**\n * Get avatars from localstorage or request it from the api\n * ... other applications like nethvoice-cti could use or\n * ... request an avatars object\n *\n * @param username The username of the current user\n */\nexport async function retrieveAvatars(username: string) {\n  try {\n    let avatars: AvatarsTypes | undefined = loadCache('operatorsAvatars', username)\n    if (avatars && Object.values(avatars).length > 0) {\n      // Avatars already are in localstorage\n      store.dispatch.avatars.updateAvatars(avatars)\n    } else {\n      // Request avatars to the API\n      const avatarsResponse: AvatarsTypes | undefined = await getAllAvatars()\n      if (avatarsResponse && Object.values(avatarsResponse).length > 0) {\n        const expiration: number = new Date().getTime() + AVATARS_EXPIRATION_MILLIS\n        // Update avatars in localstorage for performances and for other applications\n        saveCache('operatorsAvatars', avatarsResponse, username, expiration)\n        // Update avatars store\n        store.dispatch.avatars.updateAvatars(avatarsResponse)\n      }\n    }\n  } catch (error) {}\n}\n\nexport const getInitials = (displayName: string) => {\n  const initials = displayName\n    .split(' ')\n    .map((name) => name.charAt(0))\n    .join('')\n\n  // Maximum of 3 initials\n  if (initials.length > 3) {\n    return initials.slice(0, 2).concat(initials.charAt(initials.length - 1))\n  }\n  return initials\n}\n"],"names":["AVATARS_EXPIRATION_MILLIS","displayName","initials","split","map","name","charAt","join","length","slice","concat","username","avatars","loadCache","Object","values","store","dispatch","updateAvatars","getAllAvatars","avatarsResponse","_a","sent","expiration","Date","getTime","saveCache"],"mappings":"0OAQaA,EAA4B,8DA6Bd,SAACC,GAC1B,IAAMC,EAAWD,EACdE,MAAM,KACNC,KAAI,SAACC,GAAS,OAAAA,EAAKC,OAAO,MAC1BC,KAAK,IAGR,OAAIL,EAASM,OAAS,EACbN,EAASO,MAAM,EAAG,GAAGC,OAAOR,EAASI,OAAOJ,EAASM,OAAS,IAEhEN,CACT,0BA/BM,SAAgCS,6HAG9B,8BADAC,EAAoCC,EAASA,UAAC,mBAAoBF,KACvDG,OAAOC,OAAOH,GAASJ,OAAS,GAE7CQ,EAAAA,MAAMC,SAASL,QAAQM,cAAcN,UAFS,CAAA,EAAA,UAKI,MAAM,CAAA,EAAAO,EAAAA,yBAAlDC,EAA4CC,EAAqBC,SAChDR,OAAOC,OAAOK,GAAiBZ,OAAS,IACvDe,GAAqB,IAAIC,MAAOC,UAAYzB,EAElD0B,EAAAA,UAAU,mBAAoBN,EAAiBT,EAAUY,GAEzDP,EAAAA,MAAMC,SAASL,QAAQM,cAAcE,qFAI5C"}