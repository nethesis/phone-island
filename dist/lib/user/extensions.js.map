{"version":3,"file":"extensions.js","sources":["../../../src/lib/user/extensions.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { UserExtensionTypes } from '../../types'\nimport { store } from '../../store'\nimport { ExtensionTypes } from '../../types'\nimport { isFromTrunk } from '../phone/trunk'\n\n/**\n * Retrive the webrtc extensions for currentUser extensions\n *\n * @returns An extension object, an array of extension objects or null\n */\nexport function getWebrtcExtensions(): UserExtensionTypes | UserExtensionTypes[] | null {\n  // Get endpoints currentUser store\n  const { endpoints } = store.getState().currentUser\n  if (endpoints?.extension && endpoints.extension.length > 0) {\n    const webrtcExtensions = endpoints?.extension.filter(\n      (extension) => extension?.type === 'webrtc' || extension?.type === 'nethlink',\n    )\n    return webrtcExtensions.length === 1\n      ? webrtcExtensions[0]\n      : webrtcExtensions.length > 1\n      ? webrtcExtensions\n      : null\n  }\n  return null\n}\n\n/**\n * Retrieve the data of the id extension passed as parameter\n *\n * @param id The extension id\n * @return The extension data with conversations\n */\nexport function getExtensionData(id: string): ExtensionTypes | null {\n  const { extensions } = store.getState().users\n  return extensions && extensions[id] ? extensions[id] : null\n}\n\n/**\n * Checks if all the extensions are free\n */\nexport function userTotallyFree() {\n  const { extensions } = store.getState().users\n  const { endpoints } = store.getState().currentUser\n  // Check all extensions for conversations\n  if (extensions && endpoints) {\n    for (const extension of endpoints.extension) {\n      if (extensions[extension.id] && extensions[extension.id].conversations) {\n        if (Object.keys(extensions[extension.id].conversations).length > 0) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n/**\n * Retrieve the list of the extensions of the current user\n */\nexport function getExtensionsList(): string[] {\n  const { endpoints } = store.getState().currentUser\n  return endpoints?.extension.map((extension) => extension.id) || []\n}\n\nexport { isFromTrunk }\n"],"names":["id","extensions","store","getState","users","endpoints","currentUser","extension","map","length","webrtcExtensions","filter","type","_i","_a","conversations","Object","keys"],"mappings":"mIAmCM,SAA2BA,GACvB,IAAAC,EAAeC,EAAKA,MAACC,WAAWC,MAAKH,WAC7C,OAAOA,GAAcA,EAAWD,GAAMC,EAAWD,GAAM,IACzD,uCAyBU,IAAAK,EAAcH,EAAKA,MAACC,WAAWG,YAAWD,UAClD,OAAOA,eAAAA,EAAWE,UAAUC,KAAI,SAACD,GAAc,OAAAA,EAAUP,QAAO,EAClE,yCAlDU,IAAAK,EAAcH,EAAKA,MAACC,WAAWG,YAAWD,UAClD,IAAIA,aAAS,EAATA,EAAWE,YAAaF,EAAUE,UAAUE,OAAS,EAAG,CAC1D,IAAMC,EAAmBL,aAAS,EAATA,EAAWE,UAAUI,QAC5C,SAACJ,GAAc,MAAoB,YAApBA,aAAA,EAAAA,EAAWK,OAAyC,cAApBL,aAAA,EAAAA,EAAWK,KAA3C,IAEjB,OAAmC,IAA5BF,EAAiBD,OACpBC,EAAiB,GACjBA,EAAiBD,OAAS,EAC1BC,EACA,IACL,CACD,OAAO,IACT,qCAiBU,IAAAT,EAAeC,EAAKA,MAACC,WAAWC,MAAKH,WACrCI,EAAcH,EAAKA,MAACC,WAAWG,YAAWD,UAElD,GAAIJ,GAAcI,EAChB,IAAwB,IAAAQ,EAAA,EAAAC,EAAAT,EAAUE,UAAVM,EAAAC,EAAAL,OAAAI,IAAqB,CAAxC,IAAMN,EAASO,EAAAD,GAClB,GAAIZ,EAAWM,EAAUP,KAAOC,EAAWM,EAAUP,IAAIe,eACnDC,OAAOC,KAAKhB,EAAWM,EAAUP,IAAIe,eAAeN,OAAS,EAC/D,OAAO,CAGZ,CAEH,OAAO,CACT"}