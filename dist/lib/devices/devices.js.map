{"version":3,"file":"devices.js","sources":["../../../src/lib/devices/devices.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport {\n  MediaPermissionsError,\n  MediaPermissionsErrorType,\n  requestMediaPermissions,\n} from 'mic-check'\nimport JanusLib from '../webrtc/janus'\nimport { JanusTypes } from '../../types'\nimport { store } from '../../store'\nimport { isPhysical } from '../user/default_device'\nimport { getJSONItem } from '../../utils'\nimport { eventDispatch} from '../../utils/genericFunctions/eventDispatch'\n\nconst Janus: JanusTypes = JanusLib\n\nexport const getSupportedDevices = function (origCallback: () => void) {\n  let hasMicrophone = false\n  let hasSpeakers = false\n  let hasWebcam = false\n  let isMicrophoneAlreadyCaptured = false\n  let isWebcamAlreadyCaptured = false\n\n  function checkDeviceSupport(callback: () => void) {\n    const mediaDevices: MediaDeviceInfo[] = []\n\n    navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n      devices.forEach(function (device: MediaDeviceInfo) {\n        let skip = false\n\n        mediaDevices.forEach(function (d: MediaDeviceInfo) {\n          if (d.deviceId === device.deviceId && d.kind === device.kind) {\n            skip = true\n          }\n        })\n\n        if (skip) {\n          return\n        }\n\n        if (device.kind === 'videoinput' && !isWebcamAlreadyCaptured) {\n          isWebcamAlreadyCaptured = true\n        }\n        if (device.kind === 'audioinput' && !isMicrophoneAlreadyCaptured) {\n          isMicrophoneAlreadyCaptured = true\n        }\n\n        if (device.kind === 'audioinput') {\n          hasMicrophone = true\n        }\n\n        if (device.kind === 'audiooutput') {\n          hasSpeakers = true\n        }\n\n        if (device.kind === 'videoinput') {\n          hasWebcam = true\n        }\n\n        mediaDevices.push(device)\n      })\n\n      if (callback) {\n        callback()\n      }\n    })\n  }\n\n  // check for microphone/camera support!\n  checkDeviceSupport(function () {\n    const supportedDevices: any = {\n      audio: hasMicrophone,\n      audioCap: isMicrophoneAlreadyCaptured,\n      video: hasWebcam,\n      videoCap: isWebcamAlreadyCaptured,\n    }\n\n    Janus.log && Janus.log('supportedDevices=', supportedDevices)\n    origCallback()\n  })\n}\n\nexport const checkMediaPermissions = function () {\n  //Remove all media alerts if default_device is physical\n  if (isPhysical()) {\n    store.dispatch.alerts.removeAlert('browser_permissions')\n    store.dispatch.alerts.removeAlert('user_permissions')\n    store.dispatch.alerts.removeAlert('busy_camera')\n    store.dispatch.alerts.removeAlert('unknown_media_permissions')\n    return\n  }\n\n  requestMediaPermissions({ audio: true })\n    .then(() => {\n      // Can successfully access camera and microphone streams\n      // Save permissions state on rematch to get access globally on the app\n    })\n    .catch((err: any) => {\n      const { type } = err\n\n      // Define error mappings for different types of media permission errors\n      const errorMap: any = {\n        [MediaPermissionsErrorType.SystemPermissionDenied]: {\n          alert: 'browser_permissions',\n          message: 'WebRTC: browser does not have permission to access camera or microphone',\n        },\n        [MediaPermissionsErrorType.UserPermissionDenied]: {\n          alert: 'user_permissions',\n          message: \"WebRTC: user didn't allow app to access camera or microphone\",\n        },\n      }\n\n      // Get error details from map or use default error\n      const error = errorMap[type] ?? {\n        alert: 'unknown_media_permissions',\n        message: \"WebRTC: can't access audio or camera on this device. unknown error\",\n      }\n\n      // Display alert only for non-physical devices\n      store.dispatch.alerts.setAlert(error.alert)\n\n      // Log error message if Janus logger is available\n      if (Janus.error) {\n        Janus.error(error.message)\n      }\n    })\n}\n\nexport const checkWebCamPermission = function (): Promise<boolean> {\n  return new Promise((resolve) => {\n    requestMediaPermissions({ video: true })\n      .then(() => {\n        resolve(true)\n      })\n      .catch((err: any) => {\n        console.error('Error requesting webcam permission:', err)\n        resolve(false)\n      })\n  })\n}\n\nexport const getCurrentVideoInputDeviceId = function () {\n  const currentDeviceId = getJSONItem('phone-island-video-input-device').deviceId || null\n  const videoInputDevices = store.select.mediaDevices.videoInputDevices(store.getState())\n\n  // Check if the current device is still available\n  const deviceFound = videoInputDevices.find((device) => device.deviceId === currentDeviceId)\n\n  if (deviceFound) {\n    return currentDeviceId\n  } else {\n    return null\n  }\n}\n\nexport const getCurrentAudioInputDeviceId = function () {\n  const currentDeviceId = getJSONItem('phone-island-audio-input-device').deviceId || null\n  const audioInputDevices = store.select.mediaDevices.audioInputDevices(store.getState())\n\n  // Check if the current device is still available\n  const deviceFound = audioInputDevices.find((device) => device.deviceId === currentDeviceId)\n\n  if (deviceFound) {\n    return currentDeviceId\n  } else {\n    return null\n  }\n}\n\nexport const getCurrentAudioOutputDeviceId = function () {\n  const currentDeviceId = getJSONItem('phone-island-audio-output-device').deviceId || null\n  const audioOutputDevices = store.select.mediaDevices.audioOutputDevices(store.getState())\n\n  // Check if the current device is still available\n  const deviceFound = audioOutputDevices.find((device) => device.deviceId === currentDeviceId)\n\n  if (deviceFound) {\n    return currentDeviceId\n  } else {\n    return null\n  }\n}\n"],"names":["Janus","JanusLib","isPhysical","store","dispatch","alerts","removeAlert","requestMediaPermissions","audio","then","catch","err","type","error","_b","_a","MediaPermissionsErrorType","SystemPermissionDenied","alert","message","UserPermissionDenied","setAlert","Promise","resolve","video","console","currentDeviceId","getJSONItem","deviceId","select","mediaDevices","audioInputDevices","getState","find","device","audioOutputDevices","videoInputDevices","origCallback","callback","hasMicrophone","hasWebcam","isMicrophoneAlreadyCaptured","isWebcamAlreadyCaptured","supportedDevices","audioCap","videoCap","log","navigator","enumerateDevices","devices","forEach","skip","d","kind","push"],"mappings":"2VAeMA,EAAoBC,EAAAA,sCAoEW,WAEnC,GAAIC,EAAUA,aAKZ,OAJAC,EAAAA,MAAMC,SAASC,OAAOC,YAAY,uBAClCH,EAAAA,MAAMC,SAASC,OAAOC,YAAY,oBAClCH,EAAAA,MAAMC,SAASC,OAAOC,YAAY,oBAClCH,EAAAA,MAAMC,SAASC,OAAOC,YAAY,6BAIpCC,oCAAwB,CAAEC,OAAO,IAC9BC,MAAK,WAGN,IACCC,OAAM,SAACC,WACEC,EAASD,EAAGC,KAedC,EAA0B,QAAlBC,IAZAC,EAAA,CAAA,GACXC,EAAAA,UAAAA,0BAA0BC,wBAAyB,CAClDC,MAAO,sBACPC,QAAS,2EAEXJ,EAACC,EAAAA,UAAAA,0BAA0BI,sBAAuB,CAChDF,MAAO,mBACPC,QAAS,mEAKUP,UAAS,IAAAE,EAAAA,EAAA,CAC9BI,MAAO,4BACPC,QAAS,sEAIXhB,EAAKA,MAACC,SAASC,OAAOgB,SAASR,EAAMK,OAGjClB,EAAMa,OACRb,EAAMa,MAAMA,EAAMM,QAEtB,GACJ,gCAEqC,WACnC,OAAO,IAAIG,SAAQ,SAACC,GAClBhB,oCAAwB,CAAEiB,OAAO,IAC9Bf,MAAK,WACJc,GAAQ,EACV,IACCb,OAAM,SAACC,GACNc,QAAQZ,MAAM,sCAAuCF,GACrDY,GAAQ,EACV,GACJ,GACF,uCAgB4C,WAC1C,IAAMG,EAAkBC,EAAWA,YAAC,mCAAmCC,UAAY,KAMnF,OAL0BzB,EAAKA,MAAC0B,OAAOC,aAAaC,kBAAkB5B,EAAKA,MAAC6B,YAGtCC,MAAK,SAACC,GAAW,OAAAA,EAAON,WAAaF,CAApB,IAG9CA,EAEA,IAEX,wCAE6C,WAC3C,IAAMA,EAAkBC,EAAWA,YAAC,oCAAoCC,UAAY,KAMpF,OAL2BzB,EAAKA,MAAC0B,OAAOC,aAAaK,mBAAmBhC,EAAKA,MAAC6B,YAGvCC,MAAK,SAACC,GAAW,OAAAA,EAAON,WAAaF,CAApB,IAG/CA,EAEA,IAEX,uCAxC4C,WAC1C,IAAMA,EAAkBC,EAAWA,YAAC,mCAAmCC,UAAY,KAMnF,OAL0BzB,EAAKA,MAAC0B,OAAOC,aAAaM,kBAAkBjC,EAAKA,MAAC6B,YAGtCC,MAAK,SAACC,GAAW,OAAAA,EAAON,WAAaF,CAApB,IAG9CA,EAEA,IAEX,8BAzImC,SAAUW,GAC3C,IAM4BC,EACpBR,EAPJS,GAAgB,EAEhBC,GAAY,EACZC,GAA8B,EAC9BC,GAA0B,EAEFJ,EA8CT,WACjB,IAAMK,EAAwB,CAC5BnC,MAAO+B,EACPK,SAAUH,EACVjB,MAAOgB,EACPK,SAAUH,GAGZ1C,EAAM8C,KAAO9C,EAAM8C,IAAI,oBAAqBH,GAC5CN,GACF,EAvDQP,EAAkC,GAExCiB,UAAUjB,aAAakB,mBAAmBvC,MAAK,SAACwC,GAC9CA,EAAQC,SAAQ,SAAUhB,GACxB,IAAIiB,GAAO,EAEXrB,EAAaoB,SAAQ,SAAUE,GACzBA,EAAExB,WAAaM,EAAON,UAAYwB,EAAEC,OAASnB,EAAOmB,OACtDF,GAAO,EAEX,IAEIA,IAIgB,eAAhBjB,EAAOmB,MAA0BX,IACnCA,GAA0B,GAER,eAAhBR,EAAOmB,MAA0BZ,IACnCA,GAA8B,GAGZ,eAAhBP,EAAOmB,OACTd,GAAgB,GAGdL,EAAOmB,KAIS,eAAhBnB,EAAOmB,OACTb,GAAY,GAGdV,EAAawB,KAAKpB,GACpB,IAEII,GACFA,GAEJ,GAeJ"}