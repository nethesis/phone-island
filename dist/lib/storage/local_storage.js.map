{"version":3,"file":"local_storage.js","sources":["../../../src/lib/storage/local_storage.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { getJSONItem, setJSONItem } from '../../utils'\n\n/**\n * Used to save data to cache inside a local storage entry \"caches-username\"\n *\n * @param cacheName name of the cache\n * @param cacheValue a JSON object\n * @param currentUsername username currently logged in\n * @param expiration timestamp of expiration of the cache\n */\nexport const saveCache = (\n  cacheName: string,\n  cacheData: any,\n  currentUsername: string,\n  expiration: number,\n) => {\n  if (!currentUsername) {\n    return\n  }\n  const caches = getJSONItem(`caches-${currentUsername}`) || {}\n  let data = cacheData\n  data['_expiration'] = expiration\n  caches[cacheName] = data\n  setJSONItem(`caches-${currentUsername}`, caches)\n}\n\n/**\n * Used to load user caches from the local storage entry \"caches-username\"\n *\n * @param cacheName name of the cache\n * @param currentUsername username currently logged in\n */\nexport const loadCache = (cacheName: string, currentUsername: string) => {\n  const caches = getJSONItem(`caches-${currentUsername}`) || {}\n  const cache = caches[cacheName]\n\n  if (cache && cache['_expiration'] && new Date().getTime() > cache['_expiration']) {\n    // cache has expired\n    return undefined\n  }\n  return cache\n}\n"],"names":["cacheName","currentUsername","cache","getJSONItem","concat","Date","getTime","cacheData","expiration","caches","data","setJSONItem"],"mappings":"qMAmCyB,SAACA,EAAmBC,GAC3C,IACMC,GADSC,EAAAA,YAAY,UAAAC,OAAUH,KAAsB,IACtCD,GAErB,KAAIE,GAASA,EAAmB,cAAK,IAAIG,MAAOC,UAAYJ,EAAmB,aAI/E,OAAOA,CACT,oBA/ByB,SACvBF,EACAO,EACAN,EACAO,GAEA,GAAKP,EAAL,CAGA,IAAMQ,EAASN,EAAAA,YAAY,UAAAC,OAAUH,KAAsB,GACvDS,EAAOH,EACXG,EAAkB,YAAIF,EACtBC,EAAOT,GAAaU,EACpBC,EAAAA,YAAY,UAAUP,OAAAH,GAAmBQ,EALxC,CAMH"}