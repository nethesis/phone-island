{"version":3,"file":"CallEvents.js","sources":["../../src/events/CallEvents.tsx"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport React, { FC } from 'react'\nimport { useEventListener, eventDispatch } from '../utils'\nimport { useDispatch } from 'react-redux'\nimport { Dispatch } from '../store'\nimport {\n  callNumber,\n  muteCurrentCall,\n  unmuteCurrentCall,\n  pauseCurrentCall,\n  unpauseCurrentCall,\n  parkCurrentCall,\n  answerIncomingCall,\n  hangupCurrentCall,\n} from '../lib/phone/call'\n\nexport const CallEvents: FC<{ sipHost: string }> = ({ sipHost }) => {\n  const dispatch = useDispatch<Dispatch>()\n\n  /**\n   * Event listner for phone-island-call-* events\n   */\n  // Clean up phone number from unwanted characters\n  const sanitizePhoneNumber = (number: string): any => {\n    // Keep only numbers (0-9) and special characters (+, *, #)\n    return number.replace(/[^0-9+*#]/g, '')\n  }\n\n  useEventListener('phone-island-call-start', (data: CallStartTypes) => {\n    const number = sanitizePhoneNumber(data.number)\n    callNumber(number, sipHost)\n  })\n  useEventListener('phone-island-call-hold', () => {\n    pauseCurrentCall()\n  })\n  useEventListener('phone-island-call-unhold', () => {\n    unpauseCurrentCall()\n  })\n  useEventListener('phone-island-call-mute', () => {\n    muteCurrentCall()\n  })\n  useEventListener('phone-island-call-unmute', () => {\n    unmuteCurrentCall()\n  })\n\n  useEventListener('phone-island-call-park', () => {\n    parkCurrentCall()\n  })\n  useEventListener('phone-island-call-answer', () => {\n    answerIncomingCall()\n  })\n  useEventListener('phone-island-call-end', () => {\n    hangupCurrentCall()\n  })\n\n  useEventListener('phone-island-call-listen', (data: ListenIntrudeTypes) => {\n    dispatch.listen.setUpdateListenStatus(true, data.number)\n    eventDispatch('phone-island-call-listened', {})\n    dispatch.island.toggleActionsExpanded(false)\n  })\n\n  useEventListener('phone-island-call-intrude', (data: ListenIntrudeTypes) => {\n    dispatch.listen.setUpdateIntrudeStatus(true, data.number)\n    eventDispatch('phone-island-call-intruded', {})\n    dispatch.island.toggleActionsExpanded(false)\n  })\n\n  return <></>\n}\n\n/**\n * Dispatch the phone-island-outgoing-call-started event\n */\nexport function dispatchOutgoingCallStarted(name: string = '', number: string = '') {\n  const data: OutgoingCallStartedTypes = {\n    name,\n    number,\n  }\n  eventDispatch('phone-island-outgoing-call-started', data)\n}\n\ninterface CallStartTypes {\n  number: string\n}\n\ninterface OutgoingCallStartedTypes {\n  name: string\n  number: string\n}\n\ninterface ListenIntrudeTypes {\n  number: string\n}\n"],"names":["_a","sipHost","dispatch","useDispatch","useEventListener","data","number","replace","sanitizePhoneNumber","callNumber","pauseCurrentCall","unpauseCurrentCall","muteCurrentCall","unmuteCurrentCall","parkCurrentCall","answerIncomingCall","hangupCurrentCall","listen","setUpdateListenStatus","eventDispatch","island","toggleActionsExpanded","setUpdateIntrudeStatus","React","name"],"mappings":"seAkBmD,SAACA,GAAE,IAAAC,EAAOD,EAAAC,QACrDC,EAAWC,EAAAA,cAkDjB,OAvCAC,mBAAiB,2BAA2B,SAACC,GAC3C,IAAMC,EANoB,SAACA,GAE3B,OAAOA,EAAOC,QAAQ,aAAc,GACtC,CAGiBC,CAAoBH,EAAKC,QACxCG,aAAWH,EAAQL,EACrB,IACAG,EAAgBA,iBAAC,0BAA0B,WACzCM,EAAAA,kBACF,IACAN,EAAgBA,iBAAC,4BAA4B,WAC3CO,EAAAA,oBACF,IACAP,EAAgBA,iBAAC,0BAA0B,WACzCQ,EAAAA,iBACF,IACAR,EAAgBA,iBAAC,4BAA4B,WAC3CS,EAAAA,mBACF,IAEAT,EAAgBA,iBAAC,0BAA0B,WACzCU,EAAAA,iBACF,IACAV,EAAgBA,iBAAC,4BAA4B,WAC3CW,EAAAA,oBACF,IACAX,EAAgBA,iBAAC,yBAAyB,WACxCY,EAAAA,mBACF,IAEAZ,mBAAiB,4BAA4B,SAACC,GAC5CH,EAASe,OAAOC,uBAAsB,EAAMb,EAAKC,QACjDa,gBAAc,6BAA8B,CAAA,GAC5CjB,EAASkB,OAAOC,uBAAsB,EACxC,IAEAjB,mBAAiB,6BAA6B,SAACC,GAC7CH,EAASe,OAAOK,wBAAuB,EAAMjB,EAAKC,QAClDa,gBAAc,6BAA8B,CAAA,GAC5CjB,EAASkB,OAAOC,uBAAsB,EACxC,IAEOE,gDACT,sCAKgB,SAA4BC,EAAmBlB,QAAnB,IAAAkB,IAAAA,EAAiB,SAAE,IAAAlB,IAAAA,EAAmB,IAChF,IAAMD,EAAiC,CACrCmB,KAAIA,EACJlB,OAAMA,GAERa,gBAAc,qCAAsCd,EACtD"}