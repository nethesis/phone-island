{"version":3,"file":"SocketEvents.js","sources":["../../src/events/SocketEvents.ts"],"sourcesContent":["// Copyright (C) 2024 Nethesis S.r.l.\n// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { eventDispatch } from '../utils'\nimport type {\n  MainPresenceTypes,\n  MainPresenceEventTypes,\n  ExtensionTypes,\n  QueuesUpdateTypes,\n  QueuesEventType,\n  QueueUpdateMemberTypes,\n  QueuesMemberEventType,\n} from '../types'\n\n/**\n * The dispatch function for the userMainPresenceUpdate event\n *\n * @param event The userMainPresenceUpdate event from socket\n */\nexport function dispatchMainPresence(event: MainPresenceTypes) {\n  const data: MainPresenceEventTypes = {\n    [event.mainPresence.username]: {\n      mainPresence: event.mainPresence.status,\n    },\n  }\n  eventDispatch('phone-island-main-presence', data)\n}\n\n/**\n * The dispatch function for the extenUpdate event\n *\n * @param event The extenUpdate event from socket\n */\nexport function dispatchExtensions(event: ExtensionTypes) {\n  const data: any = {\n    [event.username]: {\n      conversations: event?.conversations,\n      status: event?.status,\n      sipuseragent: event?.sipuseragent,\n      username: event?.username,\n      port: event?.port,\n      dnd: event?.dnd,\n      number: event?.exten,\n      ip: event?.ip,\n      exten: event?.exten,\n      name: event?.name,\n    },\n  }\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-extensions-update', data)\n}\n\n/**\n * The dispatch function for the extenUpdate event\n *\n * @param event The extenUpdate event from socket\n */\nexport function dispatchConversations(event: ExtensionTypes) {\n  const data: any = {\n    [event.username]: {\n      conversations: event?.conversations,\n      status: event?.status,\n      sipuseragent: event?.sipuseragent,\n      username: event?.username,\n      port: event?.port,\n      dnd: event?.dnd,\n      number: event?.exten,\n      ip: event?.ip,\n      exten: event?.exten,\n      name: event?.name,\n    },\n  }\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-conversations', data)\n}\n\n/**\n * The dispatch function for the queueUpdate event\n *\n * @param event The queueUpdate event from socket\n */\nexport function dispatchQueueUpdate(event: QueuesUpdateTypes) {\n  const data: QueuesEventType = {\n    [event.queue]: event,\n  }\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-queue-update', data)\n}\n\n/**\n * The dispatch function for the queueMemberUpdate event\n *\n * @param event The queueMemberUpdate event from socket\n */\nexport function dispatchQueueMemberUpdate(event: QueueUpdateMemberTypes) {\n  const data: QueuesMemberEventType = {\n    [event.member]: event,\n  }\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-queue-member-update', data)\n}\n\n/**\n * The dispatch function for the takeOver event\n *\n * @param event The takeOver event from socket\n */\nexport function dispatchAlreadyLogin() {\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-user-already-login', {})\n}\n\n/**\n * The dispatch function for server reload\n *\n * @param event The serverReload event from socket\n */\nexport function dispatchServerReload() {\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-server-reloaded', {})\n}\n\n/**\n * The dispatch function for parking update\n *\n * @param event The parking update event from socket\n */\nexport function dispatchParkingUpdate() {\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-parking-update', {})\n}\n\n/**\n * The dispatch function for url physical call\n *\n * @param event The parking update event from socket\n */\nexport function dispatchUrlCall(url: string, urlType: string) {\n  // Dispatch the event on window for external handlers\n  let urlCallObject = {\n    url: url,\n    urlType: urlType,\n  }\n  eventDispatch('phone-island-action-physical', { urlCallObject })\n}\n\n/**\n * The dispatch function to update the default device\n *\n * @param extension The default_device_update event from socket\n */\nexport function dispatchDefaultDeviceUpdate(extension: string) {\n  // Dispatch the event on window for external handlers\n  eventDispatch('phone-island-default-device-updated', { id: extension })\n}\n"],"names":["eventDispatch","event","data","_a","username","conversations","status","sipuseragent","port","dnd","number","exten","ip","name","extension","id","mainPresence","member","queue","url","urlType","urlCallObject"],"mappings":"sNA6GEA,gBAAc,kCAAmC,CAAA,EACnD,gCArDM,SAAgCC,SAC9BC,IAAIC,EAAA,CAAA,GACPF,EAAMG,UAAW,CAChBC,cAAeJ,aAAA,EAAAA,EAAOI,cACtBC,OAAQL,aAAA,EAAAA,EAAOK,OACfC,aAAcN,aAAA,EAAAA,EAAOM,aACrBH,SAAUH,aAAA,EAAAA,EAAOG,SACjBI,KAAMP,aAAA,EAAAA,EAAOO,KACbC,IAAKR,aAAA,EAAAA,EAAOQ,IACZC,OAAQT,aAAA,EAAAA,EAAOU,MACfC,GAAIX,aAAA,EAAAA,EAAOW,GACXD,MAAOV,aAAA,EAAAA,EAAOU,MACdE,KAAMZ,aAAA,EAAAA,EAAOY,SAIjBb,gBAAc,6BAA8BE,EAC9C,sCA6EM,SAAsCY,GAE1Cd,EAAAA,cAAc,sCAAuC,CAAEe,GAAID,GAC7D,6BAzHM,SAA6Bb,SAC3BC,IAAIC,EAAA,CAAA,GACPF,EAAMG,UAAW,CAChBC,cAAeJ,aAAA,EAAAA,EAAOI,cACtBC,OAAQL,aAAA,EAAAA,EAAOK,OACfC,aAAcN,aAAA,EAAAA,EAAOM,aACrBH,SAAUH,aAAA,EAAAA,EAAOG,SACjBI,KAAMP,aAAA,EAAAA,EAAOO,KACbC,IAAKR,aAAA,EAAAA,EAAOQ,IACZC,OAAQT,aAAA,EAAAA,EAAOU,MACfC,GAAIX,aAAA,EAAAA,EAAOW,GACXD,MAAOV,aAAA,EAAAA,EAAOU,MACdE,KAAMZ,aAAA,EAAAA,EAAOY,SAIjBb,gBAAc,iCAAkCE,EAClD,+BA/BM,SAA+BD,SAC7BC,IAAIC,EAAA,CAAA,GACPF,EAAMe,aAAaZ,UAAW,CAC7BY,aAAcf,EAAMe,aAAaV,WAGrCN,gBAAc,6BAA8BE,EAC9C,2CAuGEF,gBAAc,8BAA+B,CAAA,EAC/C,oCApCM,SAAoCC,SAClCC,IAAIC,EAAA,CAAA,GACPF,EAAMgB,QAAShB,KAGlBD,gBAAc,mCAAoCE,EACpD,8BAnBM,SAA8BD,SAC5BC,IAAIC,EAAA,CAAA,GACPF,EAAMiB,OAAQjB,KAGjBD,gBAAc,4BAA6BE,EAC7C,0CAgCEF,gBAAc,+BAAgC,CAAA,EAChD,0BAiBgB,SAAgBmB,EAAaC,GAE3C,IAAIC,EAAgB,CAClBF,IAAKA,EACLC,QAASA,GAEXpB,EAAAA,cAAc,+BAAgC,CAAEqB,cAAaA,GAC/D"}